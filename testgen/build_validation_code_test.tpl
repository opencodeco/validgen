// Code generated by TestGen. DO NOT EDIT.

package codegenerator

import (
	"testing"

	"github.com/opencodeco/validgen/internal/analyzer"
	"github.com/opencodeco/validgen/internal/common"
)

func {{.FuncName}}(t *testing.T) {
	type args struct {
        fieldName       string
		fieldType       common.FieldType
		fieldValidation string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
{{range .Tests}}		{
			name: "{{.TestName}}",
			args: args{
				fieldName:       "{{.FieldName}}",
				fieldType:       common.FieldType{ComposedType: "{{.FieldType.ComposedType}}", BaseType: "{{.FieldType.BaseType}}", Size: "{{.FieldType.Size}}"},
				fieldValidation: "{{.Validation}}",
			},
			want: `{{.ExpectedCode}}`,
		},
{{end}}
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gv := GenValidations{}
			validation := AssertParserValidation(t, tt.args.fieldValidation)
			got, err := gv.BuildValidationCode(tt.args.fieldName, tt.args.fieldType, []*analyzer.Validation{validation})
			if err != nil {
				t.Errorf("BuildValidationCode() error = %v, wantErr %v", err, nil)
				return
			}
			if got != tt.want {
				t.Errorf("BuildValidationCode() = %v, want %v", got, tt.want)
			}
		})
	}
}
