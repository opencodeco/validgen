// Code generated by TestGen. DO NOT EDIT.

package codegenerator

import (
	"testing"

	"github.com/opencodeco/validgen/internal/analyzer"
	"github.com/opencodeco/validgen/internal/common"
	"github.com/opencodeco/validgen/internal/parser"
	"github.com/sergi/go-diff/diffmatchpatch"
)

func {{.FuncName}}(t *testing.T) {
	tests := []struct {
		name       string
		structInfo *analyzer.Struct
		want       string
	}{
{{range .Tests}}		{
			name: "{{.TestName}}",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "{{.StructName}}",
					Fields: []parser.Field{
					{{range .Fields}}
						{
							FieldName: "{{.Name}}",
							Type:      common.FieldType{ComposedType: "{{.Type.ComposedType}}", BaseType: "{{.Type.BaseType}}", Size: "{{.Type.Size}}"},
							Tag:       `validate:"{{.Tag}}"`,
						},
					{{end}}
					},
				},
				FieldsValidations: []analyzer.FieldValidations{
					{{range .Fields}}
					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `{{.Tag}}`)},
					},
					{{end}}
				},
			},
			want: `{{.ExpectedCode}}`,
		},
{{end}}
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gv := GenValidations{
				Struct: tt.structInfo,
			}
			got, err := gv.BuildFuncValidatorCode()
			if err != nil {
				t.Errorf("FileValidator.GenerateValidator() error = %v, wantErr %v", err, nil)
				return
			}
			if got != tt.want {
				t.Errorf("FileValidator.GenerateValidator() = %v, want %v", got, tt.want)
				dmp := diffmatchpatch.New()
				diffs := dmp.DiffMain(tt.want, got, false)
				if len(diffs) > 1 {
					t.Errorf("FileValidator.GenerateValidator() diff = \n%v", dmp.DiffPrettyText(diffs))
				}
			}
		})
	}
}
