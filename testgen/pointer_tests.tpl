// Code generated by TestGen. DO NOT EDIT.

package main

import (
	"log"
)

func pointerTests() {
{{range .TestCases}}{{.StructName}}Tests()
{{end}}
}

{{range .TestCases}}

type {{.StructName}} struct {
	{{range .Tests}}{{.FieldName}} {{.FieldType}} `valid:"{{.Validation}}"`
	{{end}}
}

func {{.StructName}}Tests() {
	log.Println("starting {{.StructName}} types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &{{.StructName}}{}
	expectedMsgErrors = []string{
		{{range .Tests}}"{{.ErrorMessage}}",
		{{end}}
	}
	errs = {{.StructName}}Validate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	{{range .Tests}}{{ if ne .InvalidCase "--" }}var Invalid{{.FieldName}} {{.BasicType}} = {{.InvalidCase}}{{end}}
	{{end}}
	v = &{{.StructName}}{}
	{{range .Tests}}{{ if ne .InvalidCase "--" }}v.{{.FieldName}} = &Invalid{{.FieldName}}{{end}}
	{{end}}
	errs = {{.StructName}}Validate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	{{range .Tests}}var Valid{{.FieldName}} {{.BasicType}} = {{.ValidCase}}
	{{end}}
	v = &{{.StructName}}{}
	{{range .Tests}}v.{{.FieldName}} = &Valid{{.FieldName}}
	{{end}}
	expectedMsgErrors = nil
	errs = {{.StructName}}Validate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("{{.StructName}} types tests ok")
}

{{end}}