package pkgwriter

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"text/template"

	"github.com/opencodeco/validgen/internal/codegenerator"
	"github.com/opencodeco/validgen/internal/parser"
)

var fileValidatorTpl = `// Code generated by ValidGen. DO NOT EDIT.

package {{.Name}}

import (
{{buildImportPath .Imports}}
)
{{range .Structs}}{{.ValidatorFuncCode}}{{end}}`

func Writer(pkgs map[string]*codegenerator.Pkg) error {
	for _, pkg := range pkgs {
		code, err := BuildFileValidatorCode(pkg)
		if err != nil {
			return err
		}

		if err := os.WriteFile(pkg.Path+"/"+"validator__.go", []byte(code), os.ModePerm); err != nil {
			return err
		}
	}

	return nil
}

func buildImportPath(imports map[string]parser.Import) (string, error) {
	code := "\t\"github.com/opencodeco/validgen/types\""

	for _, imp := range imports {
		code += fmt.Sprintf("\n\t\"%s\"", imp.Path)
	}

	return code, nil
}

func BuildFileValidatorCode(pkg *codegenerator.Pkg) (string, error) {

	funcMap := template.FuncMap{
		"buildImportPath": buildImportPath,
	}

	tmpl, err := template.New("FileValidator").Funcs(funcMap).Parse(fileValidatorTpl)
	if err != nil {
		return "", err
	}

	code := new(bytes.Buffer)
	if err := tmpl.Execute(code, pkg); err != nil {
		return "", err
	}

	formattedCode, err := format.Source(code.Bytes())
	if err != nil {
		return "", err
	}

	return string(formattedCode), nil
}
