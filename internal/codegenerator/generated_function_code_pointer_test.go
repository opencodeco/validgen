// Code generated by TestGen. DO NOT EDIT.

package codegenerator

import (
	"testing"

	"github.com/opencodeco/validgen/internal/analyzer"
	"github.com/opencodeco/validgen/internal/common"
	"github.com/opencodeco/validgen/internal/parser"
	"github.com/sergi/go-diff/diffmatchpatch"
)

func TestBuildFunctionCodePointer(t *testing.T) {
	tests := []struct {
		name       string
		structInfo *analyzer.Struct
		want       string
	}{
		{
			name: "emailStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "emailStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldEmailStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"email"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `email`)},
					},
				},
			},
			want: `func emailStructValidate(obj *emailStruct) []error {
var errs []error
if !(obj.FieldEmailStringPointer != nil && types.IsValidEmail(*obj.FieldEmailStringPointer)) {
errs = append(errs, types.NewValidationError("FieldEmailStringPointer must be a valid email"))
}
return errs
}
`,
		},
		{
			name: "requiredStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "requiredStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldRequiredStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredIntPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUintPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredBoolPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "bool", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredStringSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "string", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredIntSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUintSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredBoolSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredStringArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "string", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredIntArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt8ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int8", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt16ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int16", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt32ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int32", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt64ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int64", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUintArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint8ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint8", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint16ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint16", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint32ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint32", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint64ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint64", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat32ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "float32", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat64ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "float64", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredBoolArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "bool", Size: "3"},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredStringMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "string", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredIntMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUintMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredBoolMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "bool", Size: ""},
							Tag:       `validate:"required"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},
				},
			},
			want: `func requiredStructValidate(obj *requiredStruct) []error {
var errs []error
if !(obj.FieldRequiredStringPointer != nil && *obj.FieldRequiredStringPointer != "") {
errs = append(errs, types.NewValidationError("FieldRequiredStringPointer is required"))
}
if !(obj.FieldRequiredIntPointer != nil && *obj.FieldRequiredIntPointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredIntPointer is required"))
}
if !(obj.FieldRequiredInt8Pointer != nil && *obj.FieldRequiredInt8Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8Pointer is required"))
}
if !(obj.FieldRequiredInt16Pointer != nil && *obj.FieldRequiredInt16Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16Pointer is required"))
}
if !(obj.FieldRequiredInt32Pointer != nil && *obj.FieldRequiredInt32Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32Pointer is required"))
}
if !(obj.FieldRequiredInt64Pointer != nil && *obj.FieldRequiredInt64Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64Pointer is required"))
}
if !(obj.FieldRequiredUintPointer != nil && *obj.FieldRequiredUintPointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUintPointer is required"))
}
if !(obj.FieldRequiredUint8Pointer != nil && *obj.FieldRequiredUint8Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8Pointer is required"))
}
if !(obj.FieldRequiredUint16Pointer != nil && *obj.FieldRequiredUint16Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16Pointer is required"))
}
if !(obj.FieldRequiredUint32Pointer != nil && *obj.FieldRequiredUint32Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32Pointer is required"))
}
if !(obj.FieldRequiredUint64Pointer != nil && *obj.FieldRequiredUint64Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64Pointer is required"))
}
if !(obj.FieldRequiredFloat32Pointer != nil && *obj.FieldRequiredFloat32Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32Pointer is required"))
}
if !(obj.FieldRequiredFloat64Pointer != nil && *obj.FieldRequiredFloat64Pointer != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64Pointer is required"))
}
if !(obj.FieldRequiredBoolPointer != nil && *obj.FieldRequiredBoolPointer != false) {
errs = append(errs, types.NewValidationError("FieldRequiredBoolPointer is required"))
}
if !(obj.FieldRequiredStringSlicePointer != nil && len(*obj.FieldRequiredStringSlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredStringSlicePointer must not be empty"))
}
if !(obj.FieldRequiredIntSlicePointer != nil && len(*obj.FieldRequiredIntSlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredIntSlicePointer must not be empty"))
}
if !(obj.FieldRequiredInt8SlicePointer != nil && len(*obj.FieldRequiredInt8SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8SlicePointer must not be empty"))
}
if !(obj.FieldRequiredInt16SlicePointer != nil && len(*obj.FieldRequiredInt16SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16SlicePointer must not be empty"))
}
if !(obj.FieldRequiredInt32SlicePointer != nil && len(*obj.FieldRequiredInt32SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32SlicePointer must not be empty"))
}
if !(obj.FieldRequiredInt64SlicePointer != nil && len(*obj.FieldRequiredInt64SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64SlicePointer must not be empty"))
}
if !(obj.FieldRequiredUintSlicePointer != nil && len(*obj.FieldRequiredUintSlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUintSlicePointer must not be empty"))
}
if !(obj.FieldRequiredUint8SlicePointer != nil && len(*obj.FieldRequiredUint8SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8SlicePointer must not be empty"))
}
if !(obj.FieldRequiredUint16SlicePointer != nil && len(*obj.FieldRequiredUint16SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16SlicePointer must not be empty"))
}
if !(obj.FieldRequiredUint32SlicePointer != nil && len(*obj.FieldRequiredUint32SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32SlicePointer must not be empty"))
}
if !(obj.FieldRequiredUint64SlicePointer != nil && len(*obj.FieldRequiredUint64SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64SlicePointer must not be empty"))
}
if !(obj.FieldRequiredFloat32SlicePointer != nil && len(*obj.FieldRequiredFloat32SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32SlicePointer must not be empty"))
}
if !(obj.FieldRequiredFloat64SlicePointer != nil && len(*obj.FieldRequiredFloat64SlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64SlicePointer must not be empty"))
}
if !(obj.FieldRequiredBoolSlicePointer != nil && len(*obj.FieldRequiredBoolSlicePointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredBoolSlicePointer must not be empty"))
}
if !(obj.FieldRequiredStringArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredStringArrayPointer must not be empty"))
}
if !(obj.FieldRequiredIntArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredIntArrayPointer must not be empty"))
}
if !(obj.FieldRequiredInt8ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredInt16ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredInt32ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredInt64ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredUintArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredUintArrayPointer must not be empty"))
}
if !(obj.FieldRequiredUint8ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredUint16ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredUint32ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredUint64ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredFloat32ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredFloat64ArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64ArrayPointer must not be empty"))
}
if !(obj.FieldRequiredBoolArrayPointer != nil) {
errs = append(errs, types.NewValidationError("FieldRequiredBoolArrayPointer must not be empty"))
}
if !(obj.FieldRequiredStringMapPointer != nil && len(*obj.FieldRequiredStringMapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredStringMapPointer must not be empty"))
}
if !(obj.FieldRequiredIntMapPointer != nil && len(*obj.FieldRequiredIntMapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredIntMapPointer must not be empty"))
}
if !(obj.FieldRequiredInt8MapPointer != nil && len(*obj.FieldRequiredInt8MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8MapPointer must not be empty"))
}
if !(obj.FieldRequiredInt16MapPointer != nil && len(*obj.FieldRequiredInt16MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16MapPointer must not be empty"))
}
if !(obj.FieldRequiredInt32MapPointer != nil && len(*obj.FieldRequiredInt32MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32MapPointer must not be empty"))
}
if !(obj.FieldRequiredInt64MapPointer != nil && len(*obj.FieldRequiredInt64MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64MapPointer must not be empty"))
}
if !(obj.FieldRequiredUintMapPointer != nil && len(*obj.FieldRequiredUintMapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUintMapPointer must not be empty"))
}
if !(obj.FieldRequiredUint8MapPointer != nil && len(*obj.FieldRequiredUint8MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8MapPointer must not be empty"))
}
if !(obj.FieldRequiredUint16MapPointer != nil && len(*obj.FieldRequiredUint16MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16MapPointer must not be empty"))
}
if !(obj.FieldRequiredUint32MapPointer != nil && len(*obj.FieldRequiredUint32MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32MapPointer must not be empty"))
}
if !(obj.FieldRequiredUint64MapPointer != nil && len(*obj.FieldRequiredUint64MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64MapPointer must not be empty"))
}
if !(obj.FieldRequiredFloat32MapPointer != nil && len(*obj.FieldRequiredFloat32MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32MapPointer must not be empty"))
}
if !(obj.FieldRequiredFloat64MapPointer != nil && len(*obj.FieldRequiredFloat64MapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64MapPointer must not be empty"))
}
if !(obj.FieldRequiredBoolMapPointer != nil && len(*obj.FieldRequiredBoolMapPointer) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredBoolMapPointer must not be empty"))
}
return errs
}
`,
		},
		{
			name: "eqStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "eqStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldEqStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"eq=abcde"`,
						},

						{
							FieldName: "FieldEqIntPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqInt8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int8", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqInt16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int16", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqInt32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int32", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqInt64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int64", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUintPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUint8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint8", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUint16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint16", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUint32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint32", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUint64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint64", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqFloat32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float32", Size: ""},
							Tag:       `validate:"eq=12.34"`,
						},

						{
							FieldName: "FieldEqFloat64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float64", Size: ""},
							Tag:       `validate:"eq=12.34"`,
						},

						{
							FieldName: "FieldEqBoolPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "bool", Size: ""},
							Tag:       `validate:"eq=true"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=abcde`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=true`)},
					},
				},
			},
			want: `func eqStructValidate(obj *eqStruct) []error {
var errs []error
if !(obj.FieldEqStringPointer != nil && *obj.FieldEqStringPointer == "abcde") {
errs = append(errs, types.NewValidationError("FieldEqStringPointer must be equal to 'abcde'"))
}
if !(obj.FieldEqIntPointer != nil && *obj.FieldEqIntPointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqIntPointer must be equal to 32"))
}
if !(obj.FieldEqInt8Pointer != nil && *obj.FieldEqInt8Pointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt8Pointer must be equal to 32"))
}
if !(obj.FieldEqInt16Pointer != nil && *obj.FieldEqInt16Pointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt16Pointer must be equal to 32"))
}
if !(obj.FieldEqInt32Pointer != nil && *obj.FieldEqInt32Pointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt32Pointer must be equal to 32"))
}
if !(obj.FieldEqInt64Pointer != nil && *obj.FieldEqInt64Pointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt64Pointer must be equal to 32"))
}
if !(obj.FieldEqUintPointer != nil && *obj.FieldEqUintPointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqUintPointer must be equal to 32"))
}
if !(obj.FieldEqUint8Pointer != nil && *obj.FieldEqUint8Pointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint8Pointer must be equal to 32"))
}
if !(obj.FieldEqUint16Pointer != nil && *obj.FieldEqUint16Pointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint16Pointer must be equal to 32"))
}
if !(obj.FieldEqUint32Pointer != nil && *obj.FieldEqUint32Pointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint32Pointer must be equal to 32"))
}
if !(obj.FieldEqUint64Pointer != nil && *obj.FieldEqUint64Pointer == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint64Pointer must be equal to 32"))
}
if !(obj.FieldEqFloat32Pointer != nil && *obj.FieldEqFloat32Pointer == 12.34) {
errs = append(errs, types.NewValidationError("FieldEqFloat32Pointer must be equal to 12.34"))
}
if !(obj.FieldEqFloat64Pointer != nil && *obj.FieldEqFloat64Pointer == 12.34) {
errs = append(errs, types.NewValidationError("FieldEqFloat64Pointer must be equal to 12.34"))
}
if !(obj.FieldEqBoolPointer != nil && *obj.FieldEqBoolPointer == true) {
errs = append(errs, types.NewValidationError("FieldEqBoolPointer must be equal to true"))
}
return errs
}
`,
		},
		{
			name: "neqStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "neqStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldNeqStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"neq=abcde"`,
						},

						{
							FieldName: "FieldNeqIntPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqInt8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int8", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqInt16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int16", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqInt32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int32", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqInt64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int64", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUintPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUint8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint8", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUint16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint16", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUint32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint32", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUint64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint64", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqFloat32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float32", Size: ""},
							Tag:       `validate:"neq=12.34"`,
						},

						{
							FieldName: "FieldNeqFloat64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float64", Size: ""},
							Tag:       `validate:"neq=12.34"`,
						},

						{
							FieldName: "FieldNeqBoolPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "bool", Size: ""},
							Tag:       `validate:"neq=true"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=abcde`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=true`)},
					},
				},
			},
			want: `func neqStructValidate(obj *neqStruct) []error {
var errs []error
if !(obj.FieldNeqStringPointer != nil && *obj.FieldNeqStringPointer != "abcde") {
errs = append(errs, types.NewValidationError("FieldNeqStringPointer must not be equal to 'abcde'"))
}
if !(obj.FieldNeqIntPointer != nil && *obj.FieldNeqIntPointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqIntPointer must not be equal to 32"))
}
if !(obj.FieldNeqInt8Pointer != nil && *obj.FieldNeqInt8Pointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt8Pointer must not be equal to 32"))
}
if !(obj.FieldNeqInt16Pointer != nil && *obj.FieldNeqInt16Pointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt16Pointer must not be equal to 32"))
}
if !(obj.FieldNeqInt32Pointer != nil && *obj.FieldNeqInt32Pointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt32Pointer must not be equal to 32"))
}
if !(obj.FieldNeqInt64Pointer != nil && *obj.FieldNeqInt64Pointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt64Pointer must not be equal to 32"))
}
if !(obj.FieldNeqUintPointer != nil && *obj.FieldNeqUintPointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUintPointer must not be equal to 32"))
}
if !(obj.FieldNeqUint8Pointer != nil && *obj.FieldNeqUint8Pointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint8Pointer must not be equal to 32"))
}
if !(obj.FieldNeqUint16Pointer != nil && *obj.FieldNeqUint16Pointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint16Pointer must not be equal to 32"))
}
if !(obj.FieldNeqUint32Pointer != nil && *obj.FieldNeqUint32Pointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint32Pointer must not be equal to 32"))
}
if !(obj.FieldNeqUint64Pointer != nil && *obj.FieldNeqUint64Pointer != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint64Pointer must not be equal to 32"))
}
if !(obj.FieldNeqFloat32Pointer != nil && *obj.FieldNeqFloat32Pointer != 12.34) {
errs = append(errs, types.NewValidationError("FieldNeqFloat32Pointer must not be equal to 12.34"))
}
if !(obj.FieldNeqFloat64Pointer != nil && *obj.FieldNeqFloat64Pointer != 12.34) {
errs = append(errs, types.NewValidationError("FieldNeqFloat64Pointer must not be equal to 12.34"))
}
if !(obj.FieldNeqBoolPointer != nil && *obj.FieldNeqBoolPointer != true) {
errs = append(errs, types.NewValidationError("FieldNeqBoolPointer must not be equal to true"))
}
return errs
}
`,
		},
		{
			name: "gtStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "gtStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldGtIntPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtInt8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int8", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtInt16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int16", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtInt32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int32", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtInt64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int64", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUintPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUint8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint8", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUint16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint16", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUint32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint32", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUint64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint64", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtFloat32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float32", Size: ""},
							Tag:       `validate:"gt=12.34"`,
						},

						{
							FieldName: "FieldGtFloat64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float64", Size: ""},
							Tag:       `validate:"gt=12.34"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=12.34`)},
					},
				},
			},
			want: `func gtStructValidate(obj *gtStruct) []error {
var errs []error
if !(obj.FieldGtIntPointer != nil && *obj.FieldGtIntPointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtIntPointer must be > 32"))
}
if !(obj.FieldGtInt8Pointer != nil && *obj.FieldGtInt8Pointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt8Pointer must be > 32"))
}
if !(obj.FieldGtInt16Pointer != nil && *obj.FieldGtInt16Pointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt16Pointer must be > 32"))
}
if !(obj.FieldGtInt32Pointer != nil && *obj.FieldGtInt32Pointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt32Pointer must be > 32"))
}
if !(obj.FieldGtInt64Pointer != nil && *obj.FieldGtInt64Pointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt64Pointer must be > 32"))
}
if !(obj.FieldGtUintPointer != nil && *obj.FieldGtUintPointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtUintPointer must be > 32"))
}
if !(obj.FieldGtUint8Pointer != nil && *obj.FieldGtUint8Pointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint8Pointer must be > 32"))
}
if !(obj.FieldGtUint16Pointer != nil && *obj.FieldGtUint16Pointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint16Pointer must be > 32"))
}
if !(obj.FieldGtUint32Pointer != nil && *obj.FieldGtUint32Pointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint32Pointer must be > 32"))
}
if !(obj.FieldGtUint64Pointer != nil && *obj.FieldGtUint64Pointer > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint64Pointer must be > 32"))
}
if !(obj.FieldGtFloat32Pointer != nil && *obj.FieldGtFloat32Pointer > 12.34) {
errs = append(errs, types.NewValidationError("FieldGtFloat32Pointer must be > 12.34"))
}
if !(obj.FieldGtFloat64Pointer != nil && *obj.FieldGtFloat64Pointer > 12.34) {
errs = append(errs, types.NewValidationError("FieldGtFloat64Pointer must be > 12.34"))
}
return errs
}
`,
		},
		{
			name: "gteStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "gteStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldGteIntPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteInt8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int8", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteInt16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int16", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteInt32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int32", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteInt64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int64", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUintPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUint8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint8", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUint16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint16", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUint32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint32", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUint64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint64", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteFloat32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float32", Size: ""},
							Tag:       `validate:"gte=12.34"`,
						},

						{
							FieldName: "FieldGteFloat64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float64", Size: ""},
							Tag:       `validate:"gte=12.34"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=12.34`)},
					},
				},
			},
			want: `func gteStructValidate(obj *gteStruct) []error {
var errs []error
if !(obj.FieldGteIntPointer != nil && *obj.FieldGteIntPointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteIntPointer must be >= 32"))
}
if !(obj.FieldGteInt8Pointer != nil && *obj.FieldGteInt8Pointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt8Pointer must be >= 32"))
}
if !(obj.FieldGteInt16Pointer != nil && *obj.FieldGteInt16Pointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt16Pointer must be >= 32"))
}
if !(obj.FieldGteInt32Pointer != nil && *obj.FieldGteInt32Pointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt32Pointer must be >= 32"))
}
if !(obj.FieldGteInt64Pointer != nil && *obj.FieldGteInt64Pointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt64Pointer must be >= 32"))
}
if !(obj.FieldGteUintPointer != nil && *obj.FieldGteUintPointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUintPointer must be >= 32"))
}
if !(obj.FieldGteUint8Pointer != nil && *obj.FieldGteUint8Pointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint8Pointer must be >= 32"))
}
if !(obj.FieldGteUint16Pointer != nil && *obj.FieldGteUint16Pointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint16Pointer must be >= 32"))
}
if !(obj.FieldGteUint32Pointer != nil && *obj.FieldGteUint32Pointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint32Pointer must be >= 32"))
}
if !(obj.FieldGteUint64Pointer != nil && *obj.FieldGteUint64Pointer >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint64Pointer must be >= 32"))
}
if !(obj.FieldGteFloat32Pointer != nil && *obj.FieldGteFloat32Pointer >= 12.34) {
errs = append(errs, types.NewValidationError("FieldGteFloat32Pointer must be >= 12.34"))
}
if !(obj.FieldGteFloat64Pointer != nil && *obj.FieldGteFloat64Pointer >= 12.34) {
errs = append(errs, types.NewValidationError("FieldGteFloat64Pointer must be >= 12.34"))
}
return errs
}
`,
		},
		{
			name: "ltStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "ltStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldLtIntPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtInt8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int8", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtInt16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int16", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtInt32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int32", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtInt64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int64", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUintPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUint8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint8", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUint16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint16", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUint32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint32", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUint64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint64", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtFloat32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float32", Size: ""},
							Tag:       `validate:"lt=12.34"`,
						},

						{
							FieldName: "FieldLtFloat64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float64", Size: ""},
							Tag:       `validate:"lt=12.34"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=12.34`)},
					},
				},
			},
			want: `func ltStructValidate(obj *ltStruct) []error {
var errs []error
if !(obj.FieldLtIntPointer != nil && *obj.FieldLtIntPointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtIntPointer must be < 32"))
}
if !(obj.FieldLtInt8Pointer != nil && *obj.FieldLtInt8Pointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt8Pointer must be < 32"))
}
if !(obj.FieldLtInt16Pointer != nil && *obj.FieldLtInt16Pointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt16Pointer must be < 32"))
}
if !(obj.FieldLtInt32Pointer != nil && *obj.FieldLtInt32Pointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt32Pointer must be < 32"))
}
if !(obj.FieldLtInt64Pointer != nil && *obj.FieldLtInt64Pointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt64Pointer must be < 32"))
}
if !(obj.FieldLtUintPointer != nil && *obj.FieldLtUintPointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtUintPointer must be < 32"))
}
if !(obj.FieldLtUint8Pointer != nil && *obj.FieldLtUint8Pointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint8Pointer must be < 32"))
}
if !(obj.FieldLtUint16Pointer != nil && *obj.FieldLtUint16Pointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint16Pointer must be < 32"))
}
if !(obj.FieldLtUint32Pointer != nil && *obj.FieldLtUint32Pointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint32Pointer must be < 32"))
}
if !(obj.FieldLtUint64Pointer != nil && *obj.FieldLtUint64Pointer < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint64Pointer must be < 32"))
}
if !(obj.FieldLtFloat32Pointer != nil && *obj.FieldLtFloat32Pointer < 12.34) {
errs = append(errs, types.NewValidationError("FieldLtFloat32Pointer must be < 12.34"))
}
if !(obj.FieldLtFloat64Pointer != nil && *obj.FieldLtFloat64Pointer < 12.34) {
errs = append(errs, types.NewValidationError("FieldLtFloat64Pointer must be < 12.34"))
}
return errs
}
`,
		},
		{
			name: "lteStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "lteStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldLteIntPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteInt8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int8", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteInt16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int16", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteInt32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int32", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteInt64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int64", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUintPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUint8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint8", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUint16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint16", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUint32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint32", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUint64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint64", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteFloat32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float32", Size: ""},
							Tag:       `validate:"lte=12.34"`,
						},

						{
							FieldName: "FieldLteFloat64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float64", Size: ""},
							Tag:       `validate:"lte=12.34"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=12.34`)},
					},
				},
			},
			want: `func lteStructValidate(obj *lteStruct) []error {
var errs []error
if !(obj.FieldLteIntPointer != nil && *obj.FieldLteIntPointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteIntPointer must be <= 32"))
}
if !(obj.FieldLteInt8Pointer != nil && *obj.FieldLteInt8Pointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt8Pointer must be <= 32"))
}
if !(obj.FieldLteInt16Pointer != nil && *obj.FieldLteInt16Pointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt16Pointer must be <= 32"))
}
if !(obj.FieldLteInt32Pointer != nil && *obj.FieldLteInt32Pointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt32Pointer must be <= 32"))
}
if !(obj.FieldLteInt64Pointer != nil && *obj.FieldLteInt64Pointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt64Pointer must be <= 32"))
}
if !(obj.FieldLteUintPointer != nil && *obj.FieldLteUintPointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUintPointer must be <= 32"))
}
if !(obj.FieldLteUint8Pointer != nil && *obj.FieldLteUint8Pointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint8Pointer must be <= 32"))
}
if !(obj.FieldLteUint16Pointer != nil && *obj.FieldLteUint16Pointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint16Pointer must be <= 32"))
}
if !(obj.FieldLteUint32Pointer != nil && *obj.FieldLteUint32Pointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint32Pointer must be <= 32"))
}
if !(obj.FieldLteUint64Pointer != nil && *obj.FieldLteUint64Pointer <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint64Pointer must be <= 32"))
}
if !(obj.FieldLteFloat32Pointer != nil && *obj.FieldLteFloat32Pointer <= 12.34) {
errs = append(errs, types.NewValidationError("FieldLteFloat32Pointer must be <= 12.34"))
}
if !(obj.FieldLteFloat64Pointer != nil && *obj.FieldLteFloat64Pointer <= 12.34) {
errs = append(errs, types.NewValidationError("FieldLteFloat64Pointer must be <= 12.34"))
}
return errs
}
`,
		},
		{
			name: "minStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "minStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldMinStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"min=5"`,
						},

						{
							FieldName: "FieldMinStringSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "string", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinIntSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUintSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinFloat32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinFloat64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinBoolSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinStringMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "string", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinIntMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int8", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int16", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUintMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinFloat32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinFloat64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinBoolMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "bool", Size: ""},
							Tag:       `validate:"min=2"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=5`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},
				},
			},
			want: `func minStructValidate(obj *minStruct) []error {
var errs []error
if !(obj.FieldMinStringPointer != nil && len(*obj.FieldMinStringPointer) >= 5) {
errs = append(errs, types.NewValidationError("FieldMinStringPointer length must be >= 5"))
}
if !(obj.FieldMinStringSlicePointer != nil && len(*obj.FieldMinStringSlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinStringSlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinIntSlicePointer != nil && len(*obj.FieldMinIntSlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinIntSlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinInt8SlicePointer != nil && len(*obj.FieldMinInt8SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt8SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinInt16SlicePointer != nil && len(*obj.FieldMinInt16SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt16SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinInt32SlicePointer != nil && len(*obj.FieldMinInt32SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt32SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinInt64SlicePointer != nil && len(*obj.FieldMinInt64SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt64SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinUintSlicePointer != nil && len(*obj.FieldMinUintSlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUintSlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinUint8SlicePointer != nil && len(*obj.FieldMinUint8SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint8SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinUint16SlicePointer != nil && len(*obj.FieldMinUint16SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint16SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinUint32SlicePointer != nil && len(*obj.FieldMinUint32SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint32SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinUint64SlicePointer != nil && len(*obj.FieldMinUint64SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint64SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinFloat32SlicePointer != nil && len(*obj.FieldMinFloat32SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat32SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinFloat64SlicePointer != nil && len(*obj.FieldMinFloat64SlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat64SlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinBoolSlicePointer != nil && len(*obj.FieldMinBoolSlicePointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinBoolSlicePointer must have at least 2 elements"))
}
if !(obj.FieldMinStringMapPointer != nil && len(*obj.FieldMinStringMapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinStringMapPointer must have at least 2 elements"))
}
if !(obj.FieldMinIntMapPointer != nil && len(*obj.FieldMinIntMapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinIntMapPointer must have at least 2 elements"))
}
if !(obj.FieldMinInt8MapPointer != nil && len(*obj.FieldMinInt8MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt8MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinInt16MapPointer != nil && len(*obj.FieldMinInt16MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt16MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinInt32MapPointer != nil && len(*obj.FieldMinInt32MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt32MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinInt64MapPointer != nil && len(*obj.FieldMinInt64MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt64MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinUintMapPointer != nil && len(*obj.FieldMinUintMapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUintMapPointer must have at least 2 elements"))
}
if !(obj.FieldMinUint8MapPointer != nil && len(*obj.FieldMinUint8MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint8MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinUint16MapPointer != nil && len(*obj.FieldMinUint16MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint16MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinUint32MapPointer != nil && len(*obj.FieldMinUint32MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint32MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinUint64MapPointer != nil && len(*obj.FieldMinUint64MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint64MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinFloat32MapPointer != nil && len(*obj.FieldMinFloat32MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat32MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinFloat64MapPointer != nil && len(*obj.FieldMinFloat64MapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat64MapPointer must have at least 2 elements"))
}
if !(obj.FieldMinBoolMapPointer != nil && len(*obj.FieldMinBoolMapPointer) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinBoolMapPointer must have at least 2 elements"))
}
return errs
}
`,
		},
		{
			name: "maxStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "maxStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldMaxStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"max=3"`,
						},

						{
							FieldName: "FieldMaxStringSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "string", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxIntSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUintSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxFloat32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxFloat64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxBoolSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxStringMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "string", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxIntMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int8", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int16", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUintMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxFloat32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxFloat64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxBoolMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "bool", Size: ""},
							Tag:       `validate:"max=1"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=1`)},
					},
				},
			},
			want: `func maxStructValidate(obj *maxStruct) []error {
var errs []error
if !(obj.FieldMaxStringPointer != nil && len(*obj.FieldMaxStringPointer) <= 3) {
errs = append(errs, types.NewValidationError("FieldMaxStringPointer length must be <= 3"))
}
if !(obj.FieldMaxStringSlicePointer != nil && len(*obj.FieldMaxStringSlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxStringSlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxIntSlicePointer != nil && len(*obj.FieldMaxIntSlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxIntSlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxInt8SlicePointer != nil && len(*obj.FieldMaxInt8SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt8SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxInt16SlicePointer != nil && len(*obj.FieldMaxInt16SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt16SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxInt32SlicePointer != nil && len(*obj.FieldMaxInt32SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt32SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxInt64SlicePointer != nil && len(*obj.FieldMaxInt64SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt64SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxUintSlicePointer != nil && len(*obj.FieldMaxUintSlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUintSlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxUint8SlicePointer != nil && len(*obj.FieldMaxUint8SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint8SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxUint16SlicePointer != nil && len(*obj.FieldMaxUint16SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint16SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxUint32SlicePointer != nil && len(*obj.FieldMaxUint32SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint32SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxUint64SlicePointer != nil && len(*obj.FieldMaxUint64SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint64SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxFloat32SlicePointer != nil && len(*obj.FieldMaxFloat32SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat32SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxFloat64SlicePointer != nil && len(*obj.FieldMaxFloat64SlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat64SlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxBoolSlicePointer != nil && len(*obj.FieldMaxBoolSlicePointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxBoolSlicePointer must have at most 2 elements"))
}
if !(obj.FieldMaxStringMapPointer != nil && len(*obj.FieldMaxStringMapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxStringMapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxIntMapPointer != nil && len(*obj.FieldMaxIntMapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxIntMapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxInt8MapPointer != nil && len(*obj.FieldMaxInt8MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt8MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxInt16MapPointer != nil && len(*obj.FieldMaxInt16MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt16MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxInt32MapPointer != nil && len(*obj.FieldMaxInt32MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt32MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxInt64MapPointer != nil && len(*obj.FieldMaxInt64MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt64MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxUintMapPointer != nil && len(*obj.FieldMaxUintMapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUintMapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxUint8MapPointer != nil && len(*obj.FieldMaxUint8MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint8MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxUint16MapPointer != nil && len(*obj.FieldMaxUint16MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint16MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxUint32MapPointer != nil && len(*obj.FieldMaxUint32MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint32MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxUint64MapPointer != nil && len(*obj.FieldMaxUint64MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint64MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxFloat32MapPointer != nil && len(*obj.FieldMaxFloat32MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat32MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxFloat64MapPointer != nil && len(*obj.FieldMaxFloat64MapPointer) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat64MapPointer must have at most 2 elements"))
}
if !(obj.FieldMaxBoolMapPointer != nil && len(*obj.FieldMaxBoolMapPointer) <= 1) {
errs = append(errs, types.NewValidationError("FieldMaxBoolMapPointer must have at most 1 elements"))
}
return errs
}
`,
		},
		{
			name: "eq_ignore_caseStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "eq_ignore_caseStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldEq_ignore_caseStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"eq_ignore_case=abcde"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq_ignore_case=abcde`)},
					},
				},
			},
			want: `func eq_ignore_caseStructValidate(obj *eq_ignore_caseStruct) []error {
var errs []error
if !(obj.FieldEq_ignore_caseStringPointer != nil && types.EqualFold(*obj.FieldEq_ignore_caseStringPointer, "abcde")) {
errs = append(errs, types.NewValidationError("FieldEq_ignore_caseStringPointer must be equal to 'abcde'"))
}
return errs
}
`,
		},
		{
			name: "neq_ignore_caseStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "neq_ignore_caseStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldNeq_ignore_caseStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"neq_ignore_case=abcde"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq_ignore_case=abcde`)},
					},
				},
			},
			want: `func neq_ignore_caseStructValidate(obj *neq_ignore_caseStruct) []error {
var errs []error
if !(obj.FieldNeq_ignore_caseStringPointer != nil && !types.EqualFold(*obj.FieldNeq_ignore_caseStringPointer, "abcde")) {
errs = append(errs, types.NewValidationError("FieldNeq_ignore_caseStringPointer must not be equal to 'abcde'"))
}
return errs
}
`,
		},
		{
			name: "lenStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "lenStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldLenStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenStringSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "string", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenIntSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUintSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenFloat32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenFloat64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenBoolSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenStringMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "string", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenIntMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int8", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int16", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUintMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenFloat32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenFloat64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenBoolMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "bool", Size: ""},
							Tag:       `validate:"len=2"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},
				},
			},
			want: `func lenStructValidate(obj *lenStruct) []error {
var errs []error
if !(obj.FieldLenStringPointer != nil && len(*obj.FieldLenStringPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenStringPointer length must be 2"))
}
if !(obj.FieldLenStringSlicePointer != nil && len(*obj.FieldLenStringSlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenStringSlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenIntSlicePointer != nil && len(*obj.FieldLenIntSlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenIntSlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenInt8SlicePointer != nil && len(*obj.FieldLenInt8SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt8SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenInt16SlicePointer != nil && len(*obj.FieldLenInt16SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt16SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenInt32SlicePointer != nil && len(*obj.FieldLenInt32SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt32SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenInt64SlicePointer != nil && len(*obj.FieldLenInt64SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt64SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenUintSlicePointer != nil && len(*obj.FieldLenUintSlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUintSlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenUint8SlicePointer != nil && len(*obj.FieldLenUint8SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint8SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenUint16SlicePointer != nil && len(*obj.FieldLenUint16SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint16SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenUint32SlicePointer != nil && len(*obj.FieldLenUint32SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint32SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenUint64SlicePointer != nil && len(*obj.FieldLenUint64SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint64SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenFloat32SlicePointer != nil && len(*obj.FieldLenFloat32SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat32SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenFloat64SlicePointer != nil && len(*obj.FieldLenFloat64SlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat64SlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenBoolSlicePointer != nil && len(*obj.FieldLenBoolSlicePointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenBoolSlicePointer must have exactly 2 elements"))
}
if !(obj.FieldLenStringMapPointer != nil && len(*obj.FieldLenStringMapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenStringMapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenIntMapPointer != nil && len(*obj.FieldLenIntMapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenIntMapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenInt8MapPointer != nil && len(*obj.FieldLenInt8MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt8MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenInt16MapPointer != nil && len(*obj.FieldLenInt16MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt16MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenInt32MapPointer != nil && len(*obj.FieldLenInt32MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt32MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenInt64MapPointer != nil && len(*obj.FieldLenInt64MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt64MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenUintMapPointer != nil && len(*obj.FieldLenUintMapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUintMapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenUint8MapPointer != nil && len(*obj.FieldLenUint8MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint8MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenUint16MapPointer != nil && len(*obj.FieldLenUint16MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint16MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenUint32MapPointer != nil && len(*obj.FieldLenUint32MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint32MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenUint64MapPointer != nil && len(*obj.FieldLenUint64MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint64MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenFloat32MapPointer != nil && len(*obj.FieldLenFloat32MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat32MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenFloat64MapPointer != nil && len(*obj.FieldLenFloat64MapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat64MapPointer must have exactly 2 elements"))
}
if !(obj.FieldLenBoolMapPointer != nil && len(*obj.FieldLenBoolMapPointer) == 2) {
errs = append(errs, types.NewValidationError("FieldLenBoolMapPointer must have exactly 2 elements"))
}
return errs
}
`,
		},
		{
			name: "inStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "inStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldInStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"in=ab cd ef"`,
						},

						{
							FieldName: "FieldInIntPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int8", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int16", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int32", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int64", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUintPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint8", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint16", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint32", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint64", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInFloat32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float32", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInFloat64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float64", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInBoolPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "bool", Size: ""},
							Tag:       `validate:"in=true"`,
						},

						{
							FieldName: "FieldInStringSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "string", Size: ""},
							Tag:       `validate:"in=ab cd ef"`,
						},

						{
							FieldName: "FieldInIntSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUintSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInFloat32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInFloat64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInBoolSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"in=true"`,
						},

						{
							FieldName: "FieldInStringArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "string", Size: "3"},
							Tag:       `validate:"in=ab cd ef"`,
						},

						{
							FieldName: "FieldInIntArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt8ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int8", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt16ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int16", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt32ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int32", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt64ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int64", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUintArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint8ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint8", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint16ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint16", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint32ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint32", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint64ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint64", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInFloat32ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "float32", Size: "3"},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInFloat64ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "float64", Size: "3"},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInBoolArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "bool", Size: "3"},
							Tag:       `validate:"in=true"`,
						},

						{
							FieldName: "FieldInStringMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "string", Size: ""},
							Tag:       `validate:"in=a b c"`,
						},

						{
							FieldName: "FieldInIntMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInInt8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int8", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInInt16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int16", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInInt32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int32", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInInt64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int64", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUintMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUint8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUint16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUint32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUint64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInFloat32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float32", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInFloat64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float64", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInBoolMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "bool", Size: ""},
							Tag:       `validate:"in=false"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=a b c`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=false`)},
					},
				},
			},
			want: `func inStructValidate(obj *inStruct) []error {
var errs []error
if !((obj.FieldInStringPointer != nil && *obj.FieldInStringPointer == "ab") || (obj.FieldInStringPointer != nil && *obj.FieldInStringPointer == "cd") || (obj.FieldInStringPointer != nil && *obj.FieldInStringPointer == "ef")) {
errs = append(errs, types.NewValidationError("FieldInStringPointer must be one of 'ab' 'cd' 'ef'"))
}
if !((obj.FieldInIntPointer != nil && *obj.FieldInIntPointer == 12) || (obj.FieldInIntPointer != nil && *obj.FieldInIntPointer == 34) || (obj.FieldInIntPointer != nil && *obj.FieldInIntPointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInIntPointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInInt8Pointer != nil && *obj.FieldInInt8Pointer == 12) || (obj.FieldInInt8Pointer != nil && *obj.FieldInInt8Pointer == 34) || (obj.FieldInInt8Pointer != nil && *obj.FieldInInt8Pointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInInt8Pointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInInt16Pointer != nil && *obj.FieldInInt16Pointer == 12) || (obj.FieldInInt16Pointer != nil && *obj.FieldInInt16Pointer == 34) || (obj.FieldInInt16Pointer != nil && *obj.FieldInInt16Pointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInInt16Pointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInInt32Pointer != nil && *obj.FieldInInt32Pointer == 12) || (obj.FieldInInt32Pointer != nil && *obj.FieldInInt32Pointer == 34) || (obj.FieldInInt32Pointer != nil && *obj.FieldInInt32Pointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInInt32Pointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInInt64Pointer != nil && *obj.FieldInInt64Pointer == 12) || (obj.FieldInInt64Pointer != nil && *obj.FieldInInt64Pointer == 34) || (obj.FieldInInt64Pointer != nil && *obj.FieldInInt64Pointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInInt64Pointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInUintPointer != nil && *obj.FieldInUintPointer == 12) || (obj.FieldInUintPointer != nil && *obj.FieldInUintPointer == 34) || (obj.FieldInUintPointer != nil && *obj.FieldInUintPointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInUintPointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInUint8Pointer != nil && *obj.FieldInUint8Pointer == 12) || (obj.FieldInUint8Pointer != nil && *obj.FieldInUint8Pointer == 34) || (obj.FieldInUint8Pointer != nil && *obj.FieldInUint8Pointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInUint8Pointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInUint16Pointer != nil && *obj.FieldInUint16Pointer == 12) || (obj.FieldInUint16Pointer != nil && *obj.FieldInUint16Pointer == 34) || (obj.FieldInUint16Pointer != nil && *obj.FieldInUint16Pointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInUint16Pointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInUint32Pointer != nil && *obj.FieldInUint32Pointer == 12) || (obj.FieldInUint32Pointer != nil && *obj.FieldInUint32Pointer == 34) || (obj.FieldInUint32Pointer != nil && *obj.FieldInUint32Pointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInUint32Pointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInUint64Pointer != nil && *obj.FieldInUint64Pointer == 12) || (obj.FieldInUint64Pointer != nil && *obj.FieldInUint64Pointer == 34) || (obj.FieldInUint64Pointer != nil && *obj.FieldInUint64Pointer == 56)) {
errs = append(errs, types.NewValidationError("FieldInUint64Pointer must be one of '12' '34' '56'"))
}
if !((obj.FieldInFloat32Pointer != nil && *obj.FieldInFloat32Pointer == 11.11) || (obj.FieldInFloat32Pointer != nil && *obj.FieldInFloat32Pointer == 22.22) || (obj.FieldInFloat32Pointer != nil && *obj.FieldInFloat32Pointer == 33.33)) {
errs = append(errs, types.NewValidationError("FieldInFloat32Pointer must be one of '11.11' '22.22' '33.33'"))
}
if !((obj.FieldInFloat64Pointer != nil && *obj.FieldInFloat64Pointer == 11.11) || (obj.FieldInFloat64Pointer != nil && *obj.FieldInFloat64Pointer == 22.22) || (obj.FieldInFloat64Pointer != nil && *obj.FieldInFloat64Pointer == 33.33)) {
errs = append(errs, types.NewValidationError("FieldInFloat64Pointer must be one of '11.11' '22.22' '33.33'"))
}
if !((obj.FieldInBoolPointer != nil && *obj.FieldInBoolPointer == true)) {
errs = append(errs, types.NewValidationError("FieldInBoolPointer must be one of 'true'"))
}
if !(obj.FieldInStringSlicePointer != nil && types.SliceOnlyContains(*obj.FieldInStringSlicePointer, []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldInStringSlicePointer elements must be one of 'ab' 'cd' 'ef'"))
}
if !(obj.FieldInIntSlicePointer != nil && types.SliceOnlyContains(*obj.FieldInIntSlicePointer, []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInIntSlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt8SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInInt8SlicePointer, []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt8SlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt16SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInInt16SlicePointer, []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt16SlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt32SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInInt32SlicePointer, []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt32SlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt64SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInInt64SlicePointer, []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt64SlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUintSlicePointer != nil && types.SliceOnlyContains(*obj.FieldInUintSlicePointer, []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUintSlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint8SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInUint8SlicePointer, []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint8SlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint16SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInUint16SlicePointer, []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint16SlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint32SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInUint32SlicePointer, []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint32SlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint64SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInUint64SlicePointer, []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint64SlicePointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInFloat32SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInFloat32SlicePointer, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat32SlicePointer elements must be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldInFloat64SlicePointer != nil && types.SliceOnlyContains(*obj.FieldInFloat64SlicePointer, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat64SlicePointer elements must be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldInBoolSlicePointer != nil && types.SliceOnlyContains(*obj.FieldInBoolSlicePointer, []bool{true})) {
errs = append(errs, types.NewValidationError("FieldInBoolSlicePointer elements must be one of 'true'"))
}
if !(obj.FieldInStringArrayPointer != nil && types.SliceOnlyContains(obj.FieldInStringArrayPointer[:], []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldInStringArrayPointer elements must be one of 'ab' 'cd' 'ef'"))
}
if !(obj.FieldInIntArrayPointer != nil && types.SliceOnlyContains(obj.FieldInIntArrayPointer[:], []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInIntArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt8ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInInt8ArrayPointer[:], []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt8ArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt16ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInInt16ArrayPointer[:], []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt16ArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt32ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInInt32ArrayPointer[:], []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt32ArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt64ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInInt64ArrayPointer[:], []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt64ArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUintArrayPointer != nil && types.SliceOnlyContains(obj.FieldInUintArrayPointer[:], []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUintArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint8ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInUint8ArrayPointer[:], []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint8ArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint16ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInUint16ArrayPointer[:], []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint16ArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint32ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInUint32ArrayPointer[:], []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint32ArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint64ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInUint64ArrayPointer[:], []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint64ArrayPointer elements must be one of '12' '34' '56'"))
}
if !(obj.FieldInFloat32ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInFloat32ArrayPointer[:], []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat32ArrayPointer elements must be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldInFloat64ArrayPointer != nil && types.SliceOnlyContains(obj.FieldInFloat64ArrayPointer[:], []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat64ArrayPointer elements must be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldInBoolArrayPointer != nil && types.SliceOnlyContains(obj.FieldInBoolArrayPointer[:], []bool{true})) {
errs = append(errs, types.NewValidationError("FieldInBoolArrayPointer elements must be one of 'true'"))
}
if !(obj.FieldInStringMapPointer != nil && types.MapOnlyContains(*obj.FieldInStringMapPointer, []string{"a", "b", "c"})) {
errs = append(errs, types.NewValidationError("FieldInStringMapPointer elements must be one of 'a' 'b' 'c'"))
}
if !(obj.FieldInIntMapPointer != nil && types.MapOnlyContains(*obj.FieldInIntMapPointer, []int{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInIntMapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInInt8MapPointer != nil && types.MapOnlyContains(*obj.FieldInInt8MapPointer, []int8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt8MapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInInt16MapPointer != nil && types.MapOnlyContains(*obj.FieldInInt16MapPointer, []int16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt16MapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInInt32MapPointer != nil && types.MapOnlyContains(*obj.FieldInInt32MapPointer, []int32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt32MapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInInt64MapPointer != nil && types.MapOnlyContains(*obj.FieldInInt64MapPointer, []int64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt64MapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInUintMapPointer != nil && types.MapOnlyContains(*obj.FieldInUintMapPointer, []uint{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUintMapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInUint8MapPointer != nil && types.MapOnlyContains(*obj.FieldInUint8MapPointer, []uint8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint8MapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInUint16MapPointer != nil && types.MapOnlyContains(*obj.FieldInUint16MapPointer, []uint16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint16MapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInUint32MapPointer != nil && types.MapOnlyContains(*obj.FieldInUint32MapPointer, []uint32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint32MapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInUint64MapPointer != nil && types.MapOnlyContains(*obj.FieldInUint64MapPointer, []uint64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint64MapPointer elements must be one of '1' '2' '3'"))
}
if !(obj.FieldInFloat32MapPointer != nil && types.MapOnlyContains(*obj.FieldInFloat32MapPointer, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat32MapPointer elements must be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldInFloat64MapPointer != nil && types.MapOnlyContains(*obj.FieldInFloat64MapPointer, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat64MapPointer elements must be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldInBoolMapPointer != nil && types.MapOnlyContains(*obj.FieldInBoolMapPointer, []bool{false})) {
errs = append(errs, types.NewValidationError("FieldInBoolMapPointer elements must be one of 'false'"))
}
return errs
}
`,
		},
		{
			name: "ninStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "ninStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldNinStringPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "string", Size: ""},
							Tag:       `validate:"nin=ab cd ef"`,
						},

						{
							FieldName: "FieldNinIntPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int8", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int16", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int32", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "int64", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUintPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint8Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint8", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint16Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint16", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint32", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "uint64", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinFloat32Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float32", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinFloat64Pointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "float64", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinBoolPointer",
							Type:      common.FieldType{ComposedType: "*", BaseType: "bool", Size: ""},
							Tag:       `validate:"nin=true"`,
						},

						{
							FieldName: "FieldNinStringSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "string", Size: ""},
							Tag:       `validate:"nin=ab cd ef"`,
						},

						{
							FieldName: "FieldNinIntSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUintSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint8SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint16SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinFloat32SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinFloat64SlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinBoolSlicePointer",
							Type:      common.FieldType{ComposedType: "*[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"nin=true"`,
						},

						{
							FieldName: "FieldNinStringArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "string", Size: "3"},
							Tag:       `validate:"nin=ab cd ef"`,
						},

						{
							FieldName: "FieldNinIntArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt8ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int8", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt16ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int16", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt32ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int32", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt64ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "int64", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUintArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint8ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint8", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint16ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint16", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint32ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint32", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint64ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "uint64", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinFloat32ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "float32", Size: "3"},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinFloat64ArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "float64", Size: "3"},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinBoolArrayPointer",
							Type:      common.FieldType{ComposedType: "*[N]", BaseType: "bool", Size: "3"},
							Tag:       `validate:"nin=true"`,
						},

						{
							FieldName: "FieldNinStringMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "string", Size: ""},
							Tag:       `validate:"nin=a b c"`,
						},

						{
							FieldName: "FieldNinIntMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinInt8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int8", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinInt16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int16", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinInt32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int32", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinInt64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "int64", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUintMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUint8MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUint16MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUint32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUint64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinFloat32MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float32", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinFloat64MapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "float64", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinBoolMapPointer",
							Type:      common.FieldType{ComposedType: "*map", BaseType: "bool", Size: ""},
							Tag:       `validate:"nin=false"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=a b c`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=false`)},
					},
				},
			},
			want: `func ninStructValidate(obj *ninStruct) []error {
var errs []error
if !((obj.FieldNinStringPointer != nil && *obj.FieldNinStringPointer != "ab") && (obj.FieldNinStringPointer != nil && *obj.FieldNinStringPointer != "cd") && (obj.FieldNinStringPointer != nil && *obj.FieldNinStringPointer != "ef")) {
errs = append(errs, types.NewValidationError("FieldNinStringPointer must not be one of 'ab' 'cd' 'ef'"))
}
if !((obj.FieldNinIntPointer != nil && *obj.FieldNinIntPointer != 12) && (obj.FieldNinIntPointer != nil && *obj.FieldNinIntPointer != 34) && (obj.FieldNinIntPointer != nil && *obj.FieldNinIntPointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinIntPointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinInt8Pointer != nil && *obj.FieldNinInt8Pointer != 12) && (obj.FieldNinInt8Pointer != nil && *obj.FieldNinInt8Pointer != 34) && (obj.FieldNinInt8Pointer != nil && *obj.FieldNinInt8Pointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinInt8Pointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinInt16Pointer != nil && *obj.FieldNinInt16Pointer != 12) && (obj.FieldNinInt16Pointer != nil && *obj.FieldNinInt16Pointer != 34) && (obj.FieldNinInt16Pointer != nil && *obj.FieldNinInt16Pointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinInt16Pointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinInt32Pointer != nil && *obj.FieldNinInt32Pointer != 12) && (obj.FieldNinInt32Pointer != nil && *obj.FieldNinInt32Pointer != 34) && (obj.FieldNinInt32Pointer != nil && *obj.FieldNinInt32Pointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinInt32Pointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinInt64Pointer != nil && *obj.FieldNinInt64Pointer != 12) && (obj.FieldNinInt64Pointer != nil && *obj.FieldNinInt64Pointer != 34) && (obj.FieldNinInt64Pointer != nil && *obj.FieldNinInt64Pointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinInt64Pointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinUintPointer != nil && *obj.FieldNinUintPointer != 12) && (obj.FieldNinUintPointer != nil && *obj.FieldNinUintPointer != 34) && (obj.FieldNinUintPointer != nil && *obj.FieldNinUintPointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinUintPointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinUint8Pointer != nil && *obj.FieldNinUint8Pointer != 12) && (obj.FieldNinUint8Pointer != nil && *obj.FieldNinUint8Pointer != 34) && (obj.FieldNinUint8Pointer != nil && *obj.FieldNinUint8Pointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinUint8Pointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinUint16Pointer != nil && *obj.FieldNinUint16Pointer != 12) && (obj.FieldNinUint16Pointer != nil && *obj.FieldNinUint16Pointer != 34) && (obj.FieldNinUint16Pointer != nil && *obj.FieldNinUint16Pointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinUint16Pointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinUint32Pointer != nil && *obj.FieldNinUint32Pointer != 12) && (obj.FieldNinUint32Pointer != nil && *obj.FieldNinUint32Pointer != 34) && (obj.FieldNinUint32Pointer != nil && *obj.FieldNinUint32Pointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinUint32Pointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinUint64Pointer != nil && *obj.FieldNinUint64Pointer != 12) && (obj.FieldNinUint64Pointer != nil && *obj.FieldNinUint64Pointer != 34) && (obj.FieldNinUint64Pointer != nil && *obj.FieldNinUint64Pointer != 56)) {
errs = append(errs, types.NewValidationError("FieldNinUint64Pointer must not be one of '12' '34' '56'"))
}
if !((obj.FieldNinFloat32Pointer != nil && *obj.FieldNinFloat32Pointer != 11.11) && (obj.FieldNinFloat32Pointer != nil && *obj.FieldNinFloat32Pointer != 22.22) && (obj.FieldNinFloat32Pointer != nil && *obj.FieldNinFloat32Pointer != 33.33)) {
errs = append(errs, types.NewValidationError("FieldNinFloat32Pointer must not be one of '11.11' '22.22' '33.33'"))
}
if !((obj.FieldNinFloat64Pointer != nil && *obj.FieldNinFloat64Pointer != 11.11) && (obj.FieldNinFloat64Pointer != nil && *obj.FieldNinFloat64Pointer != 22.22) && (obj.FieldNinFloat64Pointer != nil && *obj.FieldNinFloat64Pointer != 33.33)) {
errs = append(errs, types.NewValidationError("FieldNinFloat64Pointer must not be one of '11.11' '22.22' '33.33'"))
}
if !((obj.FieldNinBoolPointer != nil && *obj.FieldNinBoolPointer != true)) {
errs = append(errs, types.NewValidationError("FieldNinBoolPointer must not be one of 'true'"))
}
if !(obj.FieldNinStringSlicePointer != nil && types.SliceNotContains(*obj.FieldNinStringSlicePointer, []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldNinStringSlicePointer elements must not be one of 'ab' 'cd' 'ef'"))
}
if !(obj.FieldNinIntSlicePointer != nil && types.SliceNotContains(*obj.FieldNinIntSlicePointer, []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinIntSlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt8SlicePointer != nil && types.SliceNotContains(*obj.FieldNinInt8SlicePointer, []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt8SlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt16SlicePointer != nil && types.SliceNotContains(*obj.FieldNinInt16SlicePointer, []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt16SlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt32SlicePointer != nil && types.SliceNotContains(*obj.FieldNinInt32SlicePointer, []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt32SlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt64SlicePointer != nil && types.SliceNotContains(*obj.FieldNinInt64SlicePointer, []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt64SlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUintSlicePointer != nil && types.SliceNotContains(*obj.FieldNinUintSlicePointer, []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUintSlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint8SlicePointer != nil && types.SliceNotContains(*obj.FieldNinUint8SlicePointer, []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint8SlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint16SlicePointer != nil && types.SliceNotContains(*obj.FieldNinUint16SlicePointer, []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint16SlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint32SlicePointer != nil && types.SliceNotContains(*obj.FieldNinUint32SlicePointer, []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint32SlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint64SlicePointer != nil && types.SliceNotContains(*obj.FieldNinUint64SlicePointer, []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint64SlicePointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinFloat32SlicePointer != nil && types.SliceNotContains(*obj.FieldNinFloat32SlicePointer, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat32SlicePointer elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldNinFloat64SlicePointer != nil && types.SliceNotContains(*obj.FieldNinFloat64SlicePointer, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat64SlicePointer elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldNinBoolSlicePointer != nil && types.SliceNotContains(*obj.FieldNinBoolSlicePointer, []bool{true})) {
errs = append(errs, types.NewValidationError("FieldNinBoolSlicePointer elements must not be one of 'true'"))
}
if !(obj.FieldNinStringArrayPointer != nil && types.SliceNotContains(obj.FieldNinStringArrayPointer[:], []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldNinStringArrayPointer elements must not be one of 'ab' 'cd' 'ef'"))
}
if !(obj.FieldNinIntArrayPointer != nil && types.SliceNotContains(obj.FieldNinIntArrayPointer[:], []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinIntArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt8ArrayPointer != nil && types.SliceNotContains(obj.FieldNinInt8ArrayPointer[:], []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt8ArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt16ArrayPointer != nil && types.SliceNotContains(obj.FieldNinInt16ArrayPointer[:], []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt16ArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt32ArrayPointer != nil && types.SliceNotContains(obj.FieldNinInt32ArrayPointer[:], []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt32ArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt64ArrayPointer != nil && types.SliceNotContains(obj.FieldNinInt64ArrayPointer[:], []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt64ArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUintArrayPointer != nil && types.SliceNotContains(obj.FieldNinUintArrayPointer[:], []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUintArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint8ArrayPointer != nil && types.SliceNotContains(obj.FieldNinUint8ArrayPointer[:], []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint8ArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint16ArrayPointer != nil && types.SliceNotContains(obj.FieldNinUint16ArrayPointer[:], []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint16ArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint32ArrayPointer != nil && types.SliceNotContains(obj.FieldNinUint32ArrayPointer[:], []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint32ArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint64ArrayPointer != nil && types.SliceNotContains(obj.FieldNinUint64ArrayPointer[:], []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint64ArrayPointer elements must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinFloat32ArrayPointer != nil && types.SliceNotContains(obj.FieldNinFloat32ArrayPointer[:], []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat32ArrayPointer elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldNinFloat64ArrayPointer != nil && types.SliceNotContains(obj.FieldNinFloat64ArrayPointer[:], []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat64ArrayPointer elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldNinBoolArrayPointer != nil && types.SliceNotContains(obj.FieldNinBoolArrayPointer[:], []bool{true})) {
errs = append(errs, types.NewValidationError("FieldNinBoolArrayPointer elements must not be one of 'true'"))
}
if !(obj.FieldNinStringMapPointer != nil && types.MapNotContains(*obj.FieldNinStringMapPointer, []string{"a", "b", "c"})) {
errs = append(errs, types.NewValidationError("FieldNinStringMapPointer elements must not be one of 'a' 'b' 'c'"))
}
if !(obj.FieldNinIntMapPointer != nil && types.MapNotContains(*obj.FieldNinIntMapPointer, []int{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinIntMapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinInt8MapPointer != nil && types.MapNotContains(*obj.FieldNinInt8MapPointer, []int8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt8MapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinInt16MapPointer != nil && types.MapNotContains(*obj.FieldNinInt16MapPointer, []int16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt16MapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinInt32MapPointer != nil && types.MapNotContains(*obj.FieldNinInt32MapPointer, []int32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt32MapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinInt64MapPointer != nil && types.MapNotContains(*obj.FieldNinInt64MapPointer, []int64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt64MapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinUintMapPointer != nil && types.MapNotContains(*obj.FieldNinUintMapPointer, []uint{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUintMapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinUint8MapPointer != nil && types.MapNotContains(*obj.FieldNinUint8MapPointer, []uint8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint8MapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinUint16MapPointer != nil && types.MapNotContains(*obj.FieldNinUint16MapPointer, []uint16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint16MapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinUint32MapPointer != nil && types.MapNotContains(*obj.FieldNinUint32MapPointer, []uint32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint32MapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinUint64MapPointer != nil && types.MapNotContains(*obj.FieldNinUint64MapPointer, []uint64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint64MapPointer elements must not be one of '1' '2' '3'"))
}
if !(obj.FieldNinFloat32MapPointer != nil && types.MapNotContains(*obj.FieldNinFloat32MapPointer, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat32MapPointer elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldNinFloat64MapPointer != nil && types.MapNotContains(*obj.FieldNinFloat64MapPointer, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat64MapPointer elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldNinBoolMapPointer != nil && types.MapNotContains(*obj.FieldNinBoolMapPointer, []bool{false})) {
errs = append(errs, types.NewValidationError("FieldNinBoolMapPointer elements must not be one of 'false'"))
}
return errs
}
`,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gv := GenValidations{
				Struct: tt.structInfo,
			}
			got, err := gv.BuildFuncValidatorCode()
			if err != nil {
				t.Errorf("FileValidator.GenerateValidator() error = %v, wantErr %v", err, nil)
				return
			}
			if got != tt.want {
				t.Errorf("FileValidator.GenerateValidator() = %v, want %v", got, tt.want)
				dmp := diffmatchpatch.New()
				diffs := dmp.DiffMain(tt.want, got, false)
				if len(diffs) > 1 {
					t.Errorf("FileValidator.GenerateValidator() diff = \n%v", dmp.DiffPrettyText(diffs))
				}
			}
		})
	}
}
