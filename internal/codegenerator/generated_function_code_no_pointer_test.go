// Code generated by TestGen. DO NOT EDIT.

package codegenerator

import (
	"testing"

	"github.com/opencodeco/validgen/internal/analyzer"
	"github.com/opencodeco/validgen/internal/common"
	"github.com/opencodeco/validgen/internal/parser"
	"github.com/sergi/go-diff/diffmatchpatch"
)

func TestBuildFunctionCode(t *testing.T) {
	tests := []struct {
		name       string
		structInfo *analyzer.Struct
		want       string
	}{
		{
			name: "emailStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "emailStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldEmailString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"email"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `email`)},
					},
				},
			},
			want: `func emailStructValidate(obj *emailStruct) []error {
var errs []error
if !(types.IsValidEmail(obj.FieldEmailString)) {
errs = append(errs, types.NewValidationError("FieldEmailString must be a valid email"))
}
return errs
}
`,
		},
		{
			name: "requiredStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "requiredStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldRequiredString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt",
							Type:      common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt8",
							Type:      common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt16",
							Type:      common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt32",
							Type:      common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt64",
							Type:      common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint8",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint16",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint32",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint64",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat32",
							Type:      common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat64",
							Type:      common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredBool",
							Type:      common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredStringSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredIntSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUintSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredBoolSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredStringMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredIntMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredInt64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUintMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredUint64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredFloat64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
							Tag:       `validate:"required"`,
						},

						{
							FieldName: "FieldRequiredBoolMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
							Tag:       `validate:"required"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `required`)},
					},
				},
			},
			want: `func requiredStructValidate(obj *requiredStruct) []error {
var errs []error
if !(obj.FieldRequiredString != "") {
errs = append(errs, types.NewValidationError("FieldRequiredString is required"))
}
if !(obj.FieldRequiredInt != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt is required"))
}
if !(obj.FieldRequiredInt8 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8 is required"))
}
if !(obj.FieldRequiredInt16 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16 is required"))
}
if !(obj.FieldRequiredInt32 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32 is required"))
}
if !(obj.FieldRequiredInt64 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64 is required"))
}
if !(obj.FieldRequiredUint != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint is required"))
}
if !(obj.FieldRequiredUint8 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8 is required"))
}
if !(obj.FieldRequiredUint16 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16 is required"))
}
if !(obj.FieldRequiredUint32 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32 is required"))
}
if !(obj.FieldRequiredUint64 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64 is required"))
}
if !(obj.FieldRequiredFloat32 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32 is required"))
}
if !(obj.FieldRequiredFloat64 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64 is required"))
}
if !(obj.FieldRequiredBool != false) {
errs = append(errs, types.NewValidationError("FieldRequiredBool is required"))
}
if !(len(obj.FieldRequiredStringSlice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredStringSlice must not be empty"))
}
if !(len(obj.FieldRequiredIntSlice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredIntSlice must not be empty"))
}
if !(len(obj.FieldRequiredInt8Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8Slice must not be empty"))
}
if !(len(obj.FieldRequiredInt16Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16Slice must not be empty"))
}
if !(len(obj.FieldRequiredInt32Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32Slice must not be empty"))
}
if !(len(obj.FieldRequiredInt64Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64Slice must not be empty"))
}
if !(len(obj.FieldRequiredUintSlice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUintSlice must not be empty"))
}
if !(len(obj.FieldRequiredUint8Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8Slice must not be empty"))
}
if !(len(obj.FieldRequiredUint16Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16Slice must not be empty"))
}
if !(len(obj.FieldRequiredUint32Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32Slice must not be empty"))
}
if !(len(obj.FieldRequiredUint64Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64Slice must not be empty"))
}
if !(len(obj.FieldRequiredFloat32Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32Slice must not be empty"))
}
if !(len(obj.FieldRequiredFloat64Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64Slice must not be empty"))
}
if !(len(obj.FieldRequiredBoolSlice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredBoolSlice must not be empty"))
}
if !(len(obj.FieldRequiredStringMap) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredStringMap must not be empty"))
}
if !(len(obj.FieldRequiredIntMap) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredIntMap must not be empty"))
}
if !(len(obj.FieldRequiredInt8Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8Map must not be empty"))
}
if !(len(obj.FieldRequiredInt16Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16Map must not be empty"))
}
if !(len(obj.FieldRequiredInt32Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32Map must not be empty"))
}
if !(len(obj.FieldRequiredInt64Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64Map must not be empty"))
}
if !(len(obj.FieldRequiredUintMap) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUintMap must not be empty"))
}
if !(len(obj.FieldRequiredUint8Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8Map must not be empty"))
}
if !(len(obj.FieldRequiredUint16Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16Map must not be empty"))
}
if !(len(obj.FieldRequiredUint32Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32Map must not be empty"))
}
if !(len(obj.FieldRequiredUint64Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64Map must not be empty"))
}
if !(len(obj.FieldRequiredFloat32Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32Map must not be empty"))
}
if !(len(obj.FieldRequiredFloat64Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64Map must not be empty"))
}
if !(len(obj.FieldRequiredBoolMap) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredBoolMap must not be empty"))
}
return errs
}
`,
		},
		{
			name: "eqStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "eqStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldEqString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"eq=abcde"`,
						},

						{
							FieldName: "FieldEqInt",
							Type:      common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqInt8",
							Type:      common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqInt16",
							Type:      common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqInt32",
							Type:      common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqInt64",
							Type:      common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUint",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUint8",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUint16",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUint32",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqUint64",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
							Tag:       `validate:"eq=32"`,
						},

						{
							FieldName: "FieldEqFloat32",
							Type:      common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
							Tag:       `validate:"eq=12.34"`,
						},

						{
							FieldName: "FieldEqFloat64",
							Type:      common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
							Tag:       `validate:"eq=12.34"`,
						},

						{
							FieldName: "FieldEqBool",
							Type:      common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
							Tag:       `validate:"eq=true"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=abcde`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq=true`)},
					},
				},
			},
			want: `func eqStructValidate(obj *eqStruct) []error {
var errs []error
if !(obj.FieldEqString == "abcde") {
errs = append(errs, types.NewValidationError("FieldEqString must be equal to 'abcde'"))
}
if !(obj.FieldEqInt == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt must be equal to 32"))
}
if !(obj.FieldEqInt8 == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt8 must be equal to 32"))
}
if !(obj.FieldEqInt16 == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt16 must be equal to 32"))
}
if !(obj.FieldEqInt32 == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt32 must be equal to 32"))
}
if !(obj.FieldEqInt64 == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt64 must be equal to 32"))
}
if !(obj.FieldEqUint == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint must be equal to 32"))
}
if !(obj.FieldEqUint8 == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint8 must be equal to 32"))
}
if !(obj.FieldEqUint16 == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint16 must be equal to 32"))
}
if !(obj.FieldEqUint32 == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint32 must be equal to 32"))
}
if !(obj.FieldEqUint64 == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint64 must be equal to 32"))
}
if !(obj.FieldEqFloat32 == 12.34) {
errs = append(errs, types.NewValidationError("FieldEqFloat32 must be equal to 12.34"))
}
if !(obj.FieldEqFloat64 == 12.34) {
errs = append(errs, types.NewValidationError("FieldEqFloat64 must be equal to 12.34"))
}
if !(obj.FieldEqBool == true) {
errs = append(errs, types.NewValidationError("FieldEqBool must be equal to true"))
}
return errs
}
`,
		},
		{
			name: "neqStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "neqStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldNeqString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"neq=abcde"`,
						},

						{
							FieldName: "FieldNeqInt",
							Type:      common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqInt8",
							Type:      common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqInt16",
							Type:      common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqInt32",
							Type:      common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqInt64",
							Type:      common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUint",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUint8",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUint16",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUint32",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqUint64",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
							Tag:       `validate:"neq=32"`,
						},

						{
							FieldName: "FieldNeqFloat32",
							Type:      common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
							Tag:       `validate:"neq=12.34"`,
						},

						{
							FieldName: "FieldNeqFloat64",
							Type:      common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
							Tag:       `validate:"neq=12.34"`,
						},

						{
							FieldName: "FieldNeqBool",
							Type:      common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
							Tag:       `validate:"neq=true"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=abcde`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq=true`)},
					},
				},
			},
			want: `func neqStructValidate(obj *neqStruct) []error {
var errs []error
if !(obj.FieldNeqString != "abcde") {
errs = append(errs, types.NewValidationError("FieldNeqString must not be equal to 'abcde'"))
}
if !(obj.FieldNeqInt != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt must not be equal to 32"))
}
if !(obj.FieldNeqInt8 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt8 must not be equal to 32"))
}
if !(obj.FieldNeqInt16 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt16 must not be equal to 32"))
}
if !(obj.FieldNeqInt32 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt32 must not be equal to 32"))
}
if !(obj.FieldNeqInt64 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt64 must not be equal to 32"))
}
if !(obj.FieldNeqUint != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint must not be equal to 32"))
}
if !(obj.FieldNeqUint8 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint8 must not be equal to 32"))
}
if !(obj.FieldNeqUint16 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint16 must not be equal to 32"))
}
if !(obj.FieldNeqUint32 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint32 must not be equal to 32"))
}
if !(obj.FieldNeqUint64 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint64 must not be equal to 32"))
}
if !(obj.FieldNeqFloat32 != 12.34) {
errs = append(errs, types.NewValidationError("FieldNeqFloat32 must not be equal to 12.34"))
}
if !(obj.FieldNeqFloat64 != 12.34) {
errs = append(errs, types.NewValidationError("FieldNeqFloat64 must not be equal to 12.34"))
}
if !(obj.FieldNeqBool != true) {
errs = append(errs, types.NewValidationError("FieldNeqBool must not be equal to true"))
}
return errs
}
`,
		},
		{
			name: "gtStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "gtStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldGtInt",
							Type:      common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtInt8",
							Type:      common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtInt16",
							Type:      common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtInt32",
							Type:      common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtInt64",
							Type:      common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUint",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUint8",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUint16",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUint32",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtUint64",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
							Tag:       `validate:"gt=32"`,
						},

						{
							FieldName: "FieldGtFloat32",
							Type:      common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
							Tag:       `validate:"gt=12.34"`,
						},

						{
							FieldName: "FieldGtFloat64",
							Type:      common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
							Tag:       `validate:"gt=12.34"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gt=12.34`)},
					},
				},
			},
			want: `func gtStructValidate(obj *gtStruct) []error {
var errs []error
if !(obj.FieldGtInt > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt must be > 32"))
}
if !(obj.FieldGtInt8 > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt8 must be > 32"))
}
if !(obj.FieldGtInt16 > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt16 must be > 32"))
}
if !(obj.FieldGtInt32 > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt32 must be > 32"))
}
if !(obj.FieldGtInt64 > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt64 must be > 32"))
}
if !(obj.FieldGtUint > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint must be > 32"))
}
if !(obj.FieldGtUint8 > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint8 must be > 32"))
}
if !(obj.FieldGtUint16 > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint16 must be > 32"))
}
if !(obj.FieldGtUint32 > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint32 must be > 32"))
}
if !(obj.FieldGtUint64 > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint64 must be > 32"))
}
if !(obj.FieldGtFloat32 > 12.34) {
errs = append(errs, types.NewValidationError("FieldGtFloat32 must be > 12.34"))
}
if !(obj.FieldGtFloat64 > 12.34) {
errs = append(errs, types.NewValidationError("FieldGtFloat64 must be > 12.34"))
}
return errs
}
`,
		},
		{
			name: "gteStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "gteStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldGteInt",
							Type:      common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteInt8",
							Type:      common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteInt16",
							Type:      common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteInt32",
							Type:      common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteInt64",
							Type:      common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUint",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUint8",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUint16",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUint32",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteUint64",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
							Tag:       `validate:"gte=32"`,
						},

						{
							FieldName: "FieldGteFloat32",
							Type:      common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
							Tag:       `validate:"gte=12.34"`,
						},

						{
							FieldName: "FieldGteFloat64",
							Type:      common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
							Tag:       `validate:"gte=12.34"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `gte=12.34`)},
					},
				},
			},
			want: `func gteStructValidate(obj *gteStruct) []error {
var errs []error
if !(obj.FieldGteInt >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt must be >= 32"))
}
if !(obj.FieldGteInt8 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt8 must be >= 32"))
}
if !(obj.FieldGteInt16 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt16 must be >= 32"))
}
if !(obj.FieldGteInt32 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt32 must be >= 32"))
}
if !(obj.FieldGteInt64 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt64 must be >= 32"))
}
if !(obj.FieldGteUint >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint must be >= 32"))
}
if !(obj.FieldGteUint8 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint8 must be >= 32"))
}
if !(obj.FieldGteUint16 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint16 must be >= 32"))
}
if !(obj.FieldGteUint32 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint32 must be >= 32"))
}
if !(obj.FieldGteUint64 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint64 must be >= 32"))
}
if !(obj.FieldGteFloat32 >= 12.34) {
errs = append(errs, types.NewValidationError("FieldGteFloat32 must be >= 12.34"))
}
if !(obj.FieldGteFloat64 >= 12.34) {
errs = append(errs, types.NewValidationError("FieldGteFloat64 must be >= 12.34"))
}
return errs
}
`,
		},
		{
			name: "ltStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "ltStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldLtInt",
							Type:      common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtInt8",
							Type:      common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtInt16",
							Type:      common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtInt32",
							Type:      common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtInt64",
							Type:      common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUint",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUint8",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUint16",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUint32",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtUint64",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
							Tag:       `validate:"lt=32"`,
						},

						{
							FieldName: "FieldLtFloat32",
							Type:      common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
							Tag:       `validate:"lt=12.34"`,
						},

						{
							FieldName: "FieldLtFloat64",
							Type:      common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
							Tag:       `validate:"lt=12.34"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lt=12.34`)},
					},
				},
			},
			want: `func ltStructValidate(obj *ltStruct) []error {
var errs []error
if !(obj.FieldLtInt < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt must be < 32"))
}
if !(obj.FieldLtInt8 < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt8 must be < 32"))
}
if !(obj.FieldLtInt16 < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt16 must be < 32"))
}
if !(obj.FieldLtInt32 < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt32 must be < 32"))
}
if !(obj.FieldLtInt64 < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt64 must be < 32"))
}
if !(obj.FieldLtUint < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint must be < 32"))
}
if !(obj.FieldLtUint8 < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint8 must be < 32"))
}
if !(obj.FieldLtUint16 < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint16 must be < 32"))
}
if !(obj.FieldLtUint32 < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint32 must be < 32"))
}
if !(obj.FieldLtUint64 < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint64 must be < 32"))
}
if !(obj.FieldLtFloat32 < 12.34) {
errs = append(errs, types.NewValidationError("FieldLtFloat32 must be < 12.34"))
}
if !(obj.FieldLtFloat64 < 12.34) {
errs = append(errs, types.NewValidationError("FieldLtFloat64 must be < 12.34"))
}
return errs
}
`,
		},
		{
			name: "lteStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "lteStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldLteInt",
							Type:      common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteInt8",
							Type:      common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteInt16",
							Type:      common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteInt32",
							Type:      common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteInt64",
							Type:      common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUint",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUint8",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUint16",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUint32",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteUint64",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
							Tag:       `validate:"lte=32"`,
						},

						{
							FieldName: "FieldLteFloat32",
							Type:      common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
							Tag:       `validate:"lte=12.34"`,
						},

						{
							FieldName: "FieldLteFloat64",
							Type:      common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
							Tag:       `validate:"lte=12.34"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=32`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=12.34`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `lte=12.34`)},
					},
				},
			},
			want: `func lteStructValidate(obj *lteStruct) []error {
var errs []error
if !(obj.FieldLteInt <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt must be <= 32"))
}
if !(obj.FieldLteInt8 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt8 must be <= 32"))
}
if !(obj.FieldLteInt16 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt16 must be <= 32"))
}
if !(obj.FieldLteInt32 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt32 must be <= 32"))
}
if !(obj.FieldLteInt64 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt64 must be <= 32"))
}
if !(obj.FieldLteUint <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint must be <= 32"))
}
if !(obj.FieldLteUint8 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint8 must be <= 32"))
}
if !(obj.FieldLteUint16 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint16 must be <= 32"))
}
if !(obj.FieldLteUint32 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint32 must be <= 32"))
}
if !(obj.FieldLteUint64 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint64 must be <= 32"))
}
if !(obj.FieldLteFloat32 <= 12.34) {
errs = append(errs, types.NewValidationError("FieldLteFloat32 must be <= 12.34"))
}
if !(obj.FieldLteFloat64 <= 12.34) {
errs = append(errs, types.NewValidationError("FieldLteFloat64 must be <= 12.34"))
}
return errs
}
`,
		},
		{
			name: "minStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "minStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldMinString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"min=5"`,
						},

						{
							FieldName: "FieldMinStringSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinIntSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUintSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinFloat32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinFloat64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinBoolSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinStringMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinIntMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinInt64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUintMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinUint64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinFloat32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinFloat64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
							Tag:       `validate:"min=2"`,
						},

						{
							FieldName: "FieldMinBoolMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
							Tag:       `validate:"min=2"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=5`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `min=2`)},
					},
				},
			},
			want: `func minStructValidate(obj *minStruct) []error {
var errs []error
if !(len(obj.FieldMinString) >= 5) {
errs = append(errs, types.NewValidationError("FieldMinString length must be >= 5"))
}
if !(len(obj.FieldMinStringSlice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinStringSlice must have at least 2 elements"))
}
if !(len(obj.FieldMinIntSlice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinIntSlice must have at least 2 elements"))
}
if !(len(obj.FieldMinInt8Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt8Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinInt16Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt16Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinInt32Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt32Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinInt64Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt64Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinUintSlice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUintSlice must have at least 2 elements"))
}
if !(len(obj.FieldMinUint8Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint8Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinUint16Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint16Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinUint32Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint32Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinUint64Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint64Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinFloat32Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat32Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinFloat64Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat64Slice must have at least 2 elements"))
}
if !(len(obj.FieldMinBoolSlice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinBoolSlice must have at least 2 elements"))
}
if !(len(obj.FieldMinStringMap) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinStringMap must have at least 2 elements"))
}
if !(len(obj.FieldMinIntMap) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinIntMap must have at least 2 elements"))
}
if !(len(obj.FieldMinInt8Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt8Map must have at least 2 elements"))
}
if !(len(obj.FieldMinInt16Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt16Map must have at least 2 elements"))
}
if !(len(obj.FieldMinInt32Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt32Map must have at least 2 elements"))
}
if !(len(obj.FieldMinInt64Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt64Map must have at least 2 elements"))
}
if !(len(obj.FieldMinUintMap) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUintMap must have at least 2 elements"))
}
if !(len(obj.FieldMinUint8Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint8Map must have at least 2 elements"))
}
if !(len(obj.FieldMinUint16Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint16Map must have at least 2 elements"))
}
if !(len(obj.FieldMinUint32Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint32Map must have at least 2 elements"))
}
if !(len(obj.FieldMinUint64Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint64Map must have at least 2 elements"))
}
if !(len(obj.FieldMinFloat32Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat32Map must have at least 2 elements"))
}
if !(len(obj.FieldMinFloat64Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat64Map must have at least 2 elements"))
}
if !(len(obj.FieldMinBoolMap) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinBoolMap must have at least 2 elements"))
}
return errs
}
`,
		},
		{
			name: "maxStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "maxStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldMaxString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"max=3"`,
						},

						{
							FieldName: "FieldMaxStringSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxIntSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUintSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxFloat32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxFloat64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxBoolSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxStringMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxIntMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxInt64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUintMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxUint64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxFloat32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxFloat64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
							Tag:       `validate:"max=2"`,
						},

						{
							FieldName: "FieldMaxBoolMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
							Tag:       `validate:"max=1"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `max=1`)},
					},
				},
			},
			want: `func maxStructValidate(obj *maxStruct) []error {
var errs []error
if !(len(obj.FieldMaxString) <= 3) {
errs = append(errs, types.NewValidationError("FieldMaxString length must be <= 3"))
}
if !(len(obj.FieldMaxStringSlice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxStringSlice must have at most 2 elements"))
}
if !(len(obj.FieldMaxIntSlice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxIntSlice must have at most 2 elements"))
}
if !(len(obj.FieldMaxInt8Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt8Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxInt16Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt16Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxInt32Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt32Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxInt64Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt64Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxUintSlice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUintSlice must have at most 2 elements"))
}
if !(len(obj.FieldMaxUint8Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint8Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxUint16Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint16Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxUint32Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint32Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxUint64Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint64Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxFloat32Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat32Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxFloat64Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat64Slice must have at most 2 elements"))
}
if !(len(obj.FieldMaxBoolSlice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxBoolSlice must have at most 2 elements"))
}
if !(len(obj.FieldMaxStringMap) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxStringMap must have at most 2 elements"))
}
if !(len(obj.FieldMaxIntMap) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxIntMap must have at most 2 elements"))
}
if !(len(obj.FieldMaxInt8Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt8Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxInt16Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt16Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxInt32Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt32Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxInt64Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt64Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxUintMap) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUintMap must have at most 2 elements"))
}
if !(len(obj.FieldMaxUint8Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint8Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxUint16Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint16Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxUint32Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint32Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxUint64Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint64Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxFloat32Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat32Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxFloat64Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat64Map must have at most 2 elements"))
}
if !(len(obj.FieldMaxBoolMap) <= 1) {
errs = append(errs, types.NewValidationError("FieldMaxBoolMap must have at most 1 elements"))
}
return errs
}
`,
		},
		{
			name: "eq_ignore_caseStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "eq_ignore_caseStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldEq_ignore_caseString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"eq_ignore_case=abcde"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `eq_ignore_case=abcde`)},
					},
				},
			},
			want: `func eq_ignore_caseStructValidate(obj *eq_ignore_caseStruct) []error {
var errs []error
if !(types.EqualFold(obj.FieldEq_ignore_caseString, "abcde")) {
errs = append(errs, types.NewValidationError("FieldEq_ignore_caseString must be equal to 'abcde'"))
}
return errs
}
`,
		},
		{
			name: "neq_ignore_caseStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "neq_ignore_caseStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldNeq_ignore_caseString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"neq_ignore_case=abcde"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `neq_ignore_case=abcde`)},
					},
				},
			},
			want: `func neq_ignore_caseStructValidate(obj *neq_ignore_caseStruct) []error {
var errs []error
if !(!types.EqualFold(obj.FieldNeq_ignore_caseString, "abcde")) {
errs = append(errs, types.NewValidationError("FieldNeq_ignore_caseString must not be equal to 'abcde'"))
}
return errs
}
`,
		},
		{
			name: "lenStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "lenStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldLenString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenStringSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenIntSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUintSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenFloat32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenFloat64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenBoolSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenStringMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenIntMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenInt64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUintMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenUint64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenFloat32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenFloat64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
							Tag:       `validate:"len=2"`,
						},

						{
							FieldName: "FieldLenBoolMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
							Tag:       `validate:"len=2"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `len=2`)},
					},
				},
			},
			want: `func lenStructValidate(obj *lenStruct) []error {
var errs []error
if !(len(obj.FieldLenString) == 2) {
errs = append(errs, types.NewValidationError("FieldLenString length must be 2"))
}
if !(len(obj.FieldLenStringSlice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenStringSlice must have exactly 2 elements"))
}
if !(len(obj.FieldLenIntSlice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenIntSlice must have exactly 2 elements"))
}
if !(len(obj.FieldLenInt8Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt8Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenInt16Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt16Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenInt32Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt32Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenInt64Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt64Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenUintSlice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUintSlice must have exactly 2 elements"))
}
if !(len(obj.FieldLenUint8Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint8Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenUint16Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint16Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenUint32Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint32Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenUint64Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint64Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenFloat32Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat32Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenFloat64Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat64Slice must have exactly 2 elements"))
}
if !(len(obj.FieldLenBoolSlice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenBoolSlice must have exactly 2 elements"))
}
if !(len(obj.FieldLenStringMap) == 2) {
errs = append(errs, types.NewValidationError("FieldLenStringMap must have exactly 2 elements"))
}
if !(len(obj.FieldLenIntMap) == 2) {
errs = append(errs, types.NewValidationError("FieldLenIntMap must have exactly 2 elements"))
}
if !(len(obj.FieldLenInt8Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt8Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenInt16Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt16Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenInt32Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt32Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenInt64Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt64Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenUintMap) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUintMap must have exactly 2 elements"))
}
if !(len(obj.FieldLenUint8Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint8Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenUint16Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint16Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenUint32Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint32Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenUint64Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint64Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenFloat32Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat32Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenFloat64Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat64Map must have exactly 2 elements"))
}
if !(len(obj.FieldLenBoolMap) == 2) {
errs = append(errs, types.NewValidationError("FieldLenBoolMap must have exactly 2 elements"))
}
return errs
}
`,
		},
		{
			name: "inStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "inStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldInString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"in=ab cd ef"`,
						},

						{
							FieldName: "FieldInInt",
							Type:      common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt8",
							Type:      common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt16",
							Type:      common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt32",
							Type:      common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt64",
							Type:      common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint8",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint16",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint32",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint64",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInFloat32",
							Type:      common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInFloat64",
							Type:      common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInBool",
							Type:      common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
							Tag:       `validate:"in=true"`,
						},

						{
							FieldName: "FieldInStringSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
							Tag:       `validate:"in=ab cd ef"`,
						},

						{
							FieldName: "FieldInIntSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUintSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInFloat32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInFloat64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInBoolSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"in=true"`,
						},

						{
							FieldName: "FieldInStringArray",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "string", Size: "3"},
							Tag:       `validate:"in=ab cd ef"`,
						},

						{
							FieldName: "FieldInIntArray",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt8Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int8", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt16Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int16", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt32Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int32", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInInt64Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int64", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUintArray",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint8Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint8", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint16Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint16", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint32Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint32", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInUint64Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint64", Size: "3"},
							Tag:       `validate:"in=12 34 56"`,
						},

						{
							FieldName: "FieldInFloat32Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "float32", Size: "3"},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInFloat64Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "float64", Size: "3"},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInBoolArray",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "bool", Size: "3"},
							Tag:       `validate:"in=true"`,
						},

						{
							FieldName: "FieldInStringMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
							Tag:       `validate:"in=a b c"`,
						},

						{
							FieldName: "FieldInIntMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInInt8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInInt16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInInt32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInInt64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUintMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUint8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUint16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUint32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInUint64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"in=1 2 3"`,
						},

						{
							FieldName: "FieldInFloat32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInFloat64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
							Tag:       `validate:"in=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldInBoolMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
							Tag:       `validate:"in=false"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=a b c`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `in=false`)},
					},
				},
			},
			want: `func inStructValidate(obj *inStruct) []error {
var errs []error
if !(obj.FieldInString == "ab" || obj.FieldInString == "cd" || obj.FieldInString == "ef") {
errs = append(errs, types.NewValidationError("FieldInString must be one of 'ab' 'cd' 'ef'"))
}
if !(obj.FieldInInt == 12 || obj.FieldInInt == 34 || obj.FieldInInt == 56) {
errs = append(errs, types.NewValidationError("FieldInInt must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt8 == 12 || obj.FieldInInt8 == 34 || obj.FieldInInt8 == 56) {
errs = append(errs, types.NewValidationError("FieldInInt8 must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt16 == 12 || obj.FieldInInt16 == 34 || obj.FieldInInt16 == 56) {
errs = append(errs, types.NewValidationError("FieldInInt16 must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt32 == 12 || obj.FieldInInt32 == 34 || obj.FieldInInt32 == 56) {
errs = append(errs, types.NewValidationError("FieldInInt32 must be one of '12' '34' '56'"))
}
if !(obj.FieldInInt64 == 12 || obj.FieldInInt64 == 34 || obj.FieldInInt64 == 56) {
errs = append(errs, types.NewValidationError("FieldInInt64 must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint == 12 || obj.FieldInUint == 34 || obj.FieldInUint == 56) {
errs = append(errs, types.NewValidationError("FieldInUint must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint8 == 12 || obj.FieldInUint8 == 34 || obj.FieldInUint8 == 56) {
errs = append(errs, types.NewValidationError("FieldInUint8 must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint16 == 12 || obj.FieldInUint16 == 34 || obj.FieldInUint16 == 56) {
errs = append(errs, types.NewValidationError("FieldInUint16 must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint32 == 12 || obj.FieldInUint32 == 34 || obj.FieldInUint32 == 56) {
errs = append(errs, types.NewValidationError("FieldInUint32 must be one of '12' '34' '56'"))
}
if !(obj.FieldInUint64 == 12 || obj.FieldInUint64 == 34 || obj.FieldInUint64 == 56) {
errs = append(errs, types.NewValidationError("FieldInUint64 must be one of '12' '34' '56'"))
}
if !(obj.FieldInFloat32 == 11.11 || obj.FieldInFloat32 == 22.22 || obj.FieldInFloat32 == 33.33) {
errs = append(errs, types.NewValidationError("FieldInFloat32 must be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldInFloat64 == 11.11 || obj.FieldInFloat64 == 22.22 || obj.FieldInFloat64 == 33.33) {
errs = append(errs, types.NewValidationError("FieldInFloat64 must be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldInBool == true) {
errs = append(errs, types.NewValidationError("FieldInBool must be one of 'true'"))
}
if !(types.SliceOnlyContains(obj.FieldInStringSlice, []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldInStringSlice elements must be one of 'ab' 'cd' 'ef'"))
}
if !(types.SliceOnlyContains(obj.FieldInIntSlice, []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInIntSlice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInInt8Slice, []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt8Slice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInInt16Slice, []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt16Slice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInInt32Slice, []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt32Slice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInInt64Slice, []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt64Slice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUintSlice, []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUintSlice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUint8Slice, []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint8Slice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUint16Slice, []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint16Slice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUint32Slice, []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint32Slice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUint64Slice, []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint64Slice elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInFloat32Slice, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat32Slice elements must be one of '11.11' '22.22' '33.33'"))
}
if !(types.SliceOnlyContains(obj.FieldInFloat64Slice, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat64Slice elements must be one of '11.11' '22.22' '33.33'"))
}
if !(types.SliceOnlyContains(obj.FieldInBoolSlice, []bool{true})) {
errs = append(errs, types.NewValidationError("FieldInBoolSlice elements must be one of 'true'"))
}
if !(types.SliceOnlyContains(obj.FieldInStringArray[:], []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldInStringArray elements must be one of 'ab' 'cd' 'ef'"))
}
if !(types.SliceOnlyContains(obj.FieldInIntArray[:], []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInIntArray elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInInt8Array[:], []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt8Array elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInInt16Array[:], []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt16Array elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInInt32Array[:], []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt32Array elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInInt64Array[:], []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt64Array elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUintArray[:], []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUintArray elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUint8Array[:], []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint8Array elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUint16Array[:], []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint16Array elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUint32Array[:], []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint32Array elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInUint64Array[:], []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint64Array elements must be one of '12' '34' '56'"))
}
if !(types.SliceOnlyContains(obj.FieldInFloat32Array[:], []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat32Array elements must be one of '11.11' '22.22' '33.33'"))
}
if !(types.SliceOnlyContains(obj.FieldInFloat64Array[:], []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat64Array elements must be one of '11.11' '22.22' '33.33'"))
}
if !(types.SliceOnlyContains(obj.FieldInBoolArray[:], []bool{true})) {
errs = append(errs, types.NewValidationError("FieldInBoolArray elements must be one of 'true'"))
}
if !(types.MapOnlyContains(obj.FieldInStringMap, []string{"a", "b", "c"})) {
errs = append(errs, types.NewValidationError("FieldInStringMap elements must be one of 'a' 'b' 'c'"))
}
if !(types.MapOnlyContains(obj.FieldInIntMap, []int{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInIntMap elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInInt8Map, []int8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt8Map elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInInt16Map, []int16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt16Map elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInInt32Map, []int32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt32Map elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInInt64Map, []int64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt64Map elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInUintMap, []uint{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUintMap elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInUint8Map, []uint8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint8Map elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInUint16Map, []uint16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint16Map elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInUint32Map, []uint32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint32Map elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInUint64Map, []uint64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint64Map elements must be one of '1' '2' '3'"))
}
if !(types.MapOnlyContains(obj.FieldInFloat32Map, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat32Map elements must be one of '11.11' '22.22' '33.33'"))
}
if !(types.MapOnlyContains(obj.FieldInFloat64Map, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat64Map elements must be one of '11.11' '22.22' '33.33'"))
}
if !(types.MapOnlyContains(obj.FieldInBoolMap, []bool{false})) {
errs = append(errs, types.NewValidationError("FieldInBoolMap elements must be one of 'false'"))
}
return errs
}
`,
		},
		{
			name: "ninStruct",
			structInfo: &analyzer.Struct{
				Struct: parser.Struct{
					PackageName: "main",
					StructName:  "ninStruct",
					Fields: []parser.Field{

						{
							FieldName: "FieldNinString",
							Type:      common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
							Tag:       `validate:"nin=ab cd ef"`,
						},

						{
							FieldName: "FieldNinInt",
							Type:      common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt8",
							Type:      common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt16",
							Type:      common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt32",
							Type:      common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt64",
							Type:      common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint8",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint16",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint32",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint64",
							Type:      common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinFloat32",
							Type:      common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinFloat64",
							Type:      common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinBool",
							Type:      common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
							Tag:       `validate:"nin=true"`,
						},

						{
							FieldName: "FieldNinStringSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
							Tag:       `validate:"nin=ab cd ef"`,
						},

						{
							FieldName: "FieldNinIntSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUintSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint8Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint16Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinFloat32Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinFloat64Slice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinBoolSlice",
							Type:      common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
							Tag:       `validate:"nin=true"`,
						},

						{
							FieldName: "FieldNinStringArray",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "string", Size: "3"},
							Tag:       `validate:"nin=ab cd ef"`,
						},

						{
							FieldName: "FieldNinIntArray",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt8Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int8", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt16Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int16", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt32Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int32", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinInt64Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "int64", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUintArray",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint8Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint8", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint16Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint16", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint32Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint32", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinUint64Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "uint64", Size: "3"},
							Tag:       `validate:"nin=12 34 56"`,
						},

						{
							FieldName: "FieldNinFloat32Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "float32", Size: "3"},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinFloat64Array",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "float64", Size: "3"},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinBoolArray",
							Type:      common.FieldType{ComposedType: "[N]", BaseType: "bool", Size: "3"},
							Tag:       `validate:"nin=true"`,
						},

						{
							FieldName: "FieldNinStringMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
							Tag:       `validate:"nin=a b c"`,
						},

						{
							FieldName: "FieldNinIntMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinInt8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinInt16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinInt32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinInt64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUintMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUint8Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUint16Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUint32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinUint64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
							Tag:       `validate:"nin=1 2 3"`,
						},

						{
							FieldName: "FieldNinFloat32Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinFloat64Map",
							Type:      common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
							Tag:       `validate:"nin=11.11 22.22 33.33"`,
						},

						{
							FieldName: "FieldNinBoolMap",
							Type:      common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
							Tag:       `validate:"nin=false"`,
						},
					},
				},
				FieldsValidations: []analyzer.FieldValidations{

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=ab cd ef`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=12 34 56`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=true`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=a b c`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=1 2 3`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=11.11 22.22 33.33`)},
					},

					{
						Validations: []*analyzer.Validation{AssertParserValidation(t, `nin=false`)},
					},
				},
			},
			want: `func ninStructValidate(obj *ninStruct) []error {
var errs []error
if !(obj.FieldNinString != "ab" && obj.FieldNinString != "cd" && obj.FieldNinString != "ef") {
errs = append(errs, types.NewValidationError("FieldNinString must not be one of 'ab' 'cd' 'ef'"))
}
if !(obj.FieldNinInt != 12 && obj.FieldNinInt != 34 && obj.FieldNinInt != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt8 != 12 && obj.FieldNinInt8 != 34 && obj.FieldNinInt8 != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt8 must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt16 != 12 && obj.FieldNinInt16 != 34 && obj.FieldNinInt16 != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt16 must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt32 != 12 && obj.FieldNinInt32 != 34 && obj.FieldNinInt32 != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt32 must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinInt64 != 12 && obj.FieldNinInt64 != 34 && obj.FieldNinInt64 != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt64 must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint != 12 && obj.FieldNinUint != 34 && obj.FieldNinUint != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint8 != 12 && obj.FieldNinUint8 != 34 && obj.FieldNinUint8 != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint8 must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint16 != 12 && obj.FieldNinUint16 != 34 && obj.FieldNinUint16 != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint16 must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint32 != 12 && obj.FieldNinUint32 != 34 && obj.FieldNinUint32 != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint32 must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinUint64 != 12 && obj.FieldNinUint64 != 34 && obj.FieldNinUint64 != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint64 must not be one of '12' '34' '56'"))
}
if !(obj.FieldNinFloat32 != 11.11 && obj.FieldNinFloat32 != 22.22 && obj.FieldNinFloat32 != 33.33) {
errs = append(errs, types.NewValidationError("FieldNinFloat32 must not be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldNinFloat64 != 11.11 && obj.FieldNinFloat64 != 22.22 && obj.FieldNinFloat64 != 33.33) {
errs = append(errs, types.NewValidationError("FieldNinFloat64 must not be one of '11.11' '22.22' '33.33'"))
}
if !(obj.FieldNinBool != true) {
errs = append(errs, types.NewValidationError("FieldNinBool must not be one of 'true'"))
}
if !(types.SliceNotContains(obj.FieldNinStringSlice, []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldNinStringSlice elements must not be one of 'ab' 'cd' 'ef'"))
}
if !(types.SliceNotContains(obj.FieldNinIntSlice, []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinIntSlice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinInt8Slice, []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt8Slice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinInt16Slice, []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt16Slice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinInt32Slice, []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt32Slice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinInt64Slice, []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt64Slice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUintSlice, []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUintSlice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUint8Slice, []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint8Slice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUint16Slice, []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint16Slice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUint32Slice, []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint32Slice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUint64Slice, []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint64Slice elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinFloat32Slice, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat32Slice elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(types.SliceNotContains(obj.FieldNinFloat64Slice, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat64Slice elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(types.SliceNotContains(obj.FieldNinBoolSlice, []bool{true})) {
errs = append(errs, types.NewValidationError("FieldNinBoolSlice elements must not be one of 'true'"))
}
if !(types.SliceNotContains(obj.FieldNinStringArray[:], []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldNinStringArray elements must not be one of 'ab' 'cd' 'ef'"))
}
if !(types.SliceNotContains(obj.FieldNinIntArray[:], []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinIntArray elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinInt8Array[:], []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt8Array elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinInt16Array[:], []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt16Array elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinInt32Array[:], []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt32Array elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinInt64Array[:], []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt64Array elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUintArray[:], []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUintArray elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUint8Array[:], []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint8Array elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUint16Array[:], []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint16Array elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUint32Array[:], []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint32Array elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinUint64Array[:], []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint64Array elements must not be one of '12' '34' '56'"))
}
if !(types.SliceNotContains(obj.FieldNinFloat32Array[:], []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat32Array elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(types.SliceNotContains(obj.FieldNinFloat64Array[:], []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat64Array elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(types.SliceNotContains(obj.FieldNinBoolArray[:], []bool{true})) {
errs = append(errs, types.NewValidationError("FieldNinBoolArray elements must not be one of 'true'"))
}
if !(types.MapNotContains(obj.FieldNinStringMap, []string{"a", "b", "c"})) {
errs = append(errs, types.NewValidationError("FieldNinStringMap elements must not be one of 'a' 'b' 'c'"))
}
if !(types.MapNotContains(obj.FieldNinIntMap, []int{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinIntMap elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinInt8Map, []int8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt8Map elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinInt16Map, []int16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt16Map elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinInt32Map, []int32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt32Map elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinInt64Map, []int64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt64Map elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinUintMap, []uint{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUintMap elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinUint8Map, []uint8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint8Map elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinUint16Map, []uint16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint16Map elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinUint32Map, []uint32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint32Map elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinUint64Map, []uint64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint64Map elements must not be one of '1' '2' '3'"))
}
if !(types.MapNotContains(obj.FieldNinFloat32Map, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat32Map elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(types.MapNotContains(obj.FieldNinFloat64Map, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat64Map elements must not be one of '11.11' '22.22' '33.33'"))
}
if !(types.MapNotContains(obj.FieldNinBoolMap, []bool{false})) {
errs = append(errs, types.NewValidationError("FieldNinBoolMap elements must not be one of 'false'"))
}
return errs
}
`,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gv := GenValidations{
				Struct: tt.structInfo,
			}
			got, err := gv.BuildFuncValidatorCode()
			if err != nil {
				t.Errorf("FileValidator.GenerateValidator() error = %v, wantErr %v", err, nil)
				return
			}
			if got != tt.want {
				t.Errorf("FileValidator.GenerateValidator() = %v, want %v", got, tt.want)
				dmp := diffmatchpatch.New()
				diffs := dmp.DiffMain(tt.want, got, false)
				if len(diffs) > 1 {
					t.Errorf("FileValidator.GenerateValidator() diff = \n%v", dmp.DiffPrettyText(diffs))
				}
			}
		})
	}
}
