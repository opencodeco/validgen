package codegenerator

import (
	"bytes"
	"fmt"
	"os"
	"strings"
	"text/template"

	"github.com/opencodeco/validgen/internal/parser"
)

var structValidatorTpl = `// Code generated by ValidGen. DO NOT EDIT.

package {{.PackageName}}

import (
	"github.com/opencodeco/validgen/types"
)

func {{.StructName}}Validate(obj *{{.StructName}}) []error {
	var errs []error
{{range .Fields}}{{buildValidationCode .FieldName .Type .Validations}}{{end}}
	return errs
}
`

func BuildValidatorCode(st *parser.Struct) (string, error) {
	funcMap := template.FuncMap{
		"buildValidationCode": BuildValidationCode,
	}

	tmpl, err := template.New("FileValidator").Funcs(funcMap).Parse(structValidatorTpl)
	if err != nil {
		return "", err
	}

	code := new(bytes.Buffer)
	if err := tmpl.Execute(code, st); err != nil {
		return "", err
	}

	return code.String(), nil
}

func GenerateFileValidator(st *parser.Struct) error {
	fmt.Printf("Generating struct %s validations code\n", st.StructName)

	code, err := BuildValidatorCode(st)
	if err != nil {
		return err
	}

	if err := os.WriteFile(st.Path+"/"+strings.ToLower(st.StructName)+"_validator.go", []byte(code), 0644); err != nil {
		return err
	}

	return nil
}

func BuildValidationCode(fieldName, fieldType string, fieldValidations []string) (string, error) {

	tests := ""
	for _, fieldValidation := range fieldValidations {
		var testCode = ""
		var err error

		testCode, err = ifCode(fieldName, fieldType, fieldValidation)
		if err != nil {
			return "", err
		}

		tests += testCode
	}

	return tests, nil
}

func ifCode(fieldName, fieldType, fieldValidation string) (string, error) {
	testElements, err := DefineTestElements(fieldName, fieldType, fieldValidation)
	if err != nil {
		return "", fmt.Errorf("field %s: %w", fieldName, err)
	}

	booleanCondition := ""
	for _, roperand := range testElements.rightOperands {
		if booleanCondition != "" {
			booleanCondition += " " + testElements.concatOperator + " "
		}

		booleanCondition += fmt.Sprintf("%s %s %s", testElements.leftOperand, testElements.operator, roperand)
	}

	return fmt.Sprintf(
		`
	if !(%s) {
		errs = append(errs, types.NewValidationError("%s"))
	}
`, booleanCondition, testElements.errorMessage), nil
}
