// Code generated by TestGen. DO NOT EDIT.

package codegenerator

import (
	"testing"

	"github.com/opencodeco/validgen/internal/analyzer"
	"github.com/opencodeco/validgen/internal/common"
)

func TestBuildValidationCode(t *testing.T) {
	type args struct {
		fieldName       string
		fieldType       common.FieldType
		fieldValidation string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "email_string_email",
			args: args{
				fieldName:       "FieldEmailString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "email",
			},
			want: `if !(types.IsValidEmail(obj.FieldEmailString)) {
errs = append(errs, types.NewValidationError("FieldEmailString must be a valid email"))
}
`,
		},
		{
			name: "required_string_required",
			args: args{
				fieldName:       "FieldRequiredString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredString != "") {
errs = append(errs, types.NewValidationError("FieldRequiredString is required"))
}
`,
		},
		{
			name: "required_int_required",
			args: args{
				fieldName:       "FieldRequiredInt",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredInt != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt is required"))
}
`,
		},
		{
			name: "required_int8_required",
			args: args{
				fieldName:       "FieldRequiredInt8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredInt8 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8 is required"))
}
`,
		},
		{
			name: "required_int16_required",
			args: args{
				fieldName:       "FieldRequiredInt16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredInt16 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16 is required"))
}
`,
		},
		{
			name: "required_int32_required",
			args: args{
				fieldName:       "FieldRequiredInt32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredInt32 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32 is required"))
}
`,
		},
		{
			name: "required_int64_required",
			args: args{
				fieldName:       "FieldRequiredInt64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredInt64 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64 is required"))
}
`,
		},
		{
			name: "required_uint_required",
			args: args{
				fieldName:       "FieldRequiredUint",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredUint != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint is required"))
}
`,
		},
		{
			name: "required_uint8_required",
			args: args{
				fieldName:       "FieldRequiredUint8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredUint8 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8 is required"))
}
`,
		},
		{
			name: "required_uint16_required",
			args: args{
				fieldName:       "FieldRequiredUint16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredUint16 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16 is required"))
}
`,
		},
		{
			name: "required_uint32_required",
			args: args{
				fieldName:       "FieldRequiredUint32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredUint32 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32 is required"))
}
`,
		},
		{
			name: "required_uint64_required",
			args: args{
				fieldName:       "FieldRequiredUint64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredUint64 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64 is required"))
}
`,
		},
		{
			name: "required_float32_required",
			args: args{
				fieldName:       "FieldRequiredFloat32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredFloat32 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32 is required"))
}
`,
		},
		{
			name: "required_float64_required",
			args: args{
				fieldName:       "FieldRequiredFloat64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredFloat64 != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64 is required"))
}
`,
		},
		{
			name: "required_bool_required",
			args: args{
				fieldName:       "FieldRequiredBool",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(obj.FieldRequiredBool != false) {
errs = append(errs, types.NewValidationError("FieldRequiredBool is required"))
}
`,
		},
		{
			name: "required_stringslice_required",
			args: args{
				fieldName:       "FieldRequiredStringSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredStringSlice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredStringSlice must not be empty"))
}
`,
		},
		{
			name: "required_intslice_required",
			args: args{
				fieldName:       "FieldRequiredIntSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredIntSlice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredIntSlice must not be empty"))
}
`,
		},
		{
			name: "required_int8slice_required",
			args: args{
				fieldName:       "FieldRequiredInt8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredInt8Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8Slice must not be empty"))
}
`,
		},
		{
			name: "required_int16slice_required",
			args: args{
				fieldName:       "FieldRequiredInt16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredInt16Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16Slice must not be empty"))
}
`,
		},
		{
			name: "required_int32slice_required",
			args: args{
				fieldName:       "FieldRequiredInt32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredInt32Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32Slice must not be empty"))
}
`,
		},
		{
			name: "required_int64slice_required",
			args: args{
				fieldName:       "FieldRequiredInt64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredInt64Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64Slice must not be empty"))
}
`,
		},
		{
			name: "required_uintslice_required",
			args: args{
				fieldName:       "FieldRequiredUintSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUintSlice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUintSlice must not be empty"))
}
`,
		},
		{
			name: "required_uint8slice_required",
			args: args{
				fieldName:       "FieldRequiredUint8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUint8Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8Slice must not be empty"))
}
`,
		},
		{
			name: "required_uint16slice_required",
			args: args{
				fieldName:       "FieldRequiredUint16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUint16Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16Slice must not be empty"))
}
`,
		},
		{
			name: "required_uint32slice_required",
			args: args{
				fieldName:       "FieldRequiredUint32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUint32Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32Slice must not be empty"))
}
`,
		},
		{
			name: "required_uint64slice_required",
			args: args{
				fieldName:       "FieldRequiredUint64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUint64Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64Slice must not be empty"))
}
`,
		},
		{
			name: "required_float32slice_required",
			args: args{
				fieldName:       "FieldRequiredFloat32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredFloat32Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32Slice must not be empty"))
}
`,
		},
		{
			name: "required_float64slice_required",
			args: args{
				fieldName:       "FieldRequiredFloat64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredFloat64Slice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64Slice must not be empty"))
}
`,
		},
		{
			name: "required_boolslice_required",
			args: args{
				fieldName:       "FieldRequiredBoolSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredBoolSlice) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredBoolSlice must not be empty"))
}
`,
		},
		{
			name: "required_stringmap_required",
			args: args{
				fieldName:       "FieldRequiredStringMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredStringMap) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredStringMap must not be empty"))
}
`,
		},
		{
			name: "required_intmap_required",
			args: args{
				fieldName:       "FieldRequiredIntMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredIntMap) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredIntMap must not be empty"))
}
`,
		},
		{
			name: "required_int8map_required",
			args: args{
				fieldName:       "FieldRequiredInt8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredInt8Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt8Map must not be empty"))
}
`,
		},
		{
			name: "required_int16map_required",
			args: args{
				fieldName:       "FieldRequiredInt16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredInt16Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt16Map must not be empty"))
}
`,
		},
		{
			name: "required_int32map_required",
			args: args{
				fieldName:       "FieldRequiredInt32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredInt32Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt32Map must not be empty"))
}
`,
		},
		{
			name: "required_int64map_required",
			args: args{
				fieldName:       "FieldRequiredInt64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredInt64Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredInt64Map must not be empty"))
}
`,
		},
		{
			name: "required_uintmap_required",
			args: args{
				fieldName:       "FieldRequiredUintMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUintMap) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUintMap must not be empty"))
}
`,
		},
		{
			name: "required_uint8map_required",
			args: args{
				fieldName:       "FieldRequiredUint8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUint8Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint8Map must not be empty"))
}
`,
		},
		{
			name: "required_uint16map_required",
			args: args{
				fieldName:       "FieldRequiredUint16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUint16Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint16Map must not be empty"))
}
`,
		},
		{
			name: "required_uint32map_required",
			args: args{
				fieldName:       "FieldRequiredUint32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUint32Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint32Map must not be empty"))
}
`,
		},
		{
			name: "required_uint64map_required",
			args: args{
				fieldName:       "FieldRequiredUint64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredUint64Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredUint64Map must not be empty"))
}
`,
		},
		{
			name: "required_float32map_required",
			args: args{
				fieldName:       "FieldRequiredFloat32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredFloat32Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat32Map must not be empty"))
}
`,
		},
		{
			name: "required_float64map_required",
			args: args{
				fieldName:       "FieldRequiredFloat64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredFloat64Map) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredFloat64Map must not be empty"))
}
`,
		},
		{
			name: "required_boolmap_required",
			args: args{
				fieldName:       "FieldRequiredBoolMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
				fieldValidation: "required",
			},
			want: `if !(len(obj.FieldRequiredBoolMap) != 0) {
errs = append(errs, types.NewValidationError("FieldRequiredBoolMap must not be empty"))
}
`,
		},
		{
			name: "eq_string_eq=abcde",
			args: args{
				fieldName:       "FieldEqString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "eq=abcde",
			},
			want: `if !(obj.FieldEqString == "abcde") {
errs = append(errs, types.NewValidationError("FieldEqString must be equal to 'abcde'"))
}
`,
		},
		{
			name: "eq_int_eq=32",
			args: args{
				fieldName:       "FieldEqInt",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqInt == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt must be equal to 32"))
}
`,
		},
		{
			name: "eq_int8_eq=32",
			args: args{
				fieldName:       "FieldEqInt8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqInt8 == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt8 must be equal to 32"))
}
`,
		},
		{
			name: "eq_int16_eq=32",
			args: args{
				fieldName:       "FieldEqInt16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqInt16 == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt16 must be equal to 32"))
}
`,
		},
		{
			name: "eq_int32_eq=32",
			args: args{
				fieldName:       "FieldEqInt32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqInt32 == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt32 must be equal to 32"))
}
`,
		},
		{
			name: "eq_int64_eq=32",
			args: args{
				fieldName:       "FieldEqInt64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqInt64 == 32) {
errs = append(errs, types.NewValidationError("FieldEqInt64 must be equal to 32"))
}
`,
		},
		{
			name: "eq_uint_eq=32",
			args: args{
				fieldName:       "FieldEqUint",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqUint == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint must be equal to 32"))
}
`,
		},
		{
			name: "eq_uint8_eq=32",
			args: args{
				fieldName:       "FieldEqUint8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqUint8 == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint8 must be equal to 32"))
}
`,
		},
		{
			name: "eq_uint16_eq=32",
			args: args{
				fieldName:       "FieldEqUint16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqUint16 == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint16 must be equal to 32"))
}
`,
		},
		{
			name: "eq_uint32_eq=32",
			args: args{
				fieldName:       "FieldEqUint32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqUint32 == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint32 must be equal to 32"))
}
`,
		},
		{
			name: "eq_uint64_eq=32",
			args: args{
				fieldName:       "FieldEqUint64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
				fieldValidation: "eq=32",
			},
			want: `if !(obj.FieldEqUint64 == 32) {
errs = append(errs, types.NewValidationError("FieldEqUint64 must be equal to 32"))
}
`,
		},
		{
			name: "eq_float32_eq=12.34",
			args: args{
				fieldName:       "FieldEqFloat32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
				fieldValidation: "eq=12.34",
			},
			want: `if !(obj.FieldEqFloat32 == 12.34) {
errs = append(errs, types.NewValidationError("FieldEqFloat32 must be equal to 12.34"))
}
`,
		},
		{
			name: "eq_float64_eq=12.34",
			args: args{
				fieldName:       "FieldEqFloat64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
				fieldValidation: "eq=12.34",
			},
			want: `if !(obj.FieldEqFloat64 == 12.34) {
errs = append(errs, types.NewValidationError("FieldEqFloat64 must be equal to 12.34"))
}
`,
		},
		{
			name: "eq_bool_eq=true",
			args: args{
				fieldName:       "FieldEqBool",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
				fieldValidation: "eq=true",
			},
			want: `if !(obj.FieldEqBool == true) {
errs = append(errs, types.NewValidationError("FieldEqBool must be equal to true"))
}
`,
		},
		{
			name: "neq_string_neq=abcde",
			args: args{
				fieldName:       "FieldNeqString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "neq=abcde",
			},
			want: `if !(obj.FieldNeqString != "abcde") {
errs = append(errs, types.NewValidationError("FieldNeqString must not be equal to 'abcde'"))
}
`,
		},
		{
			name: "neq_int_neq=32",
			args: args{
				fieldName:       "FieldNeqInt",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqInt != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt must not be equal to 32"))
}
`,
		},
		{
			name: "neq_int8_neq=32",
			args: args{
				fieldName:       "FieldNeqInt8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqInt8 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt8 must not be equal to 32"))
}
`,
		},
		{
			name: "neq_int16_neq=32",
			args: args{
				fieldName:       "FieldNeqInt16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqInt16 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt16 must not be equal to 32"))
}
`,
		},
		{
			name: "neq_int32_neq=32",
			args: args{
				fieldName:       "FieldNeqInt32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqInt32 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt32 must not be equal to 32"))
}
`,
		},
		{
			name: "neq_int64_neq=32",
			args: args{
				fieldName:       "FieldNeqInt64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqInt64 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqInt64 must not be equal to 32"))
}
`,
		},
		{
			name: "neq_uint_neq=32",
			args: args{
				fieldName:       "FieldNeqUint",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqUint != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint must not be equal to 32"))
}
`,
		},
		{
			name: "neq_uint8_neq=32",
			args: args{
				fieldName:       "FieldNeqUint8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqUint8 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint8 must not be equal to 32"))
}
`,
		},
		{
			name: "neq_uint16_neq=32",
			args: args{
				fieldName:       "FieldNeqUint16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqUint16 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint16 must not be equal to 32"))
}
`,
		},
		{
			name: "neq_uint32_neq=32",
			args: args{
				fieldName:       "FieldNeqUint32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqUint32 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint32 must not be equal to 32"))
}
`,
		},
		{
			name: "neq_uint64_neq=32",
			args: args{
				fieldName:       "FieldNeqUint64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
				fieldValidation: "neq=32",
			},
			want: `if !(obj.FieldNeqUint64 != 32) {
errs = append(errs, types.NewValidationError("FieldNeqUint64 must not be equal to 32"))
}
`,
		},
		{
			name: "neq_float32_neq=12.34",
			args: args{
				fieldName:       "FieldNeqFloat32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
				fieldValidation: "neq=12.34",
			},
			want: `if !(obj.FieldNeqFloat32 != 12.34) {
errs = append(errs, types.NewValidationError("FieldNeqFloat32 must not be equal to 12.34"))
}
`,
		},
		{
			name: "neq_float64_neq=12.34",
			args: args{
				fieldName:       "FieldNeqFloat64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
				fieldValidation: "neq=12.34",
			},
			want: `if !(obj.FieldNeqFloat64 != 12.34) {
errs = append(errs, types.NewValidationError("FieldNeqFloat64 must not be equal to 12.34"))
}
`,
		},
		{
			name: "neq_bool_neq=true",
			args: args{
				fieldName:       "FieldNeqBool",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
				fieldValidation: "neq=true",
			},
			want: `if !(obj.FieldNeqBool != true) {
errs = append(errs, types.NewValidationError("FieldNeqBool must not be equal to true"))
}
`,
		},
		{
			name: "gt_int_gt=32",
			args: args{
				fieldName:       "FieldGtInt",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtInt > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt must be > 32"))
}
`,
		},
		{
			name: "gt_int8_gt=32",
			args: args{
				fieldName:       "FieldGtInt8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtInt8 > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt8 must be > 32"))
}
`,
		},
		{
			name: "gt_int16_gt=32",
			args: args{
				fieldName:       "FieldGtInt16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtInt16 > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt16 must be > 32"))
}
`,
		},
		{
			name: "gt_int32_gt=32",
			args: args{
				fieldName:       "FieldGtInt32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtInt32 > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt32 must be > 32"))
}
`,
		},
		{
			name: "gt_int64_gt=32",
			args: args{
				fieldName:       "FieldGtInt64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtInt64 > 32) {
errs = append(errs, types.NewValidationError("FieldGtInt64 must be > 32"))
}
`,
		},
		{
			name: "gt_uint_gt=32",
			args: args{
				fieldName:       "FieldGtUint",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtUint > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint must be > 32"))
}
`,
		},
		{
			name: "gt_uint8_gt=32",
			args: args{
				fieldName:       "FieldGtUint8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtUint8 > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint8 must be > 32"))
}
`,
		},
		{
			name: "gt_uint16_gt=32",
			args: args{
				fieldName:       "FieldGtUint16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtUint16 > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint16 must be > 32"))
}
`,
		},
		{
			name: "gt_uint32_gt=32",
			args: args{
				fieldName:       "FieldGtUint32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtUint32 > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint32 must be > 32"))
}
`,
		},
		{
			name: "gt_uint64_gt=32",
			args: args{
				fieldName:       "FieldGtUint64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
				fieldValidation: "gt=32",
			},
			want: `if !(obj.FieldGtUint64 > 32) {
errs = append(errs, types.NewValidationError("FieldGtUint64 must be > 32"))
}
`,
		},
		{
			name: "gt_float32_gt=12.34",
			args: args{
				fieldName:       "FieldGtFloat32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
				fieldValidation: "gt=12.34",
			},
			want: `if !(obj.FieldGtFloat32 > 12.34) {
errs = append(errs, types.NewValidationError("FieldGtFloat32 must be > 12.34"))
}
`,
		},
		{
			name: "gt_float64_gt=12.34",
			args: args{
				fieldName:       "FieldGtFloat64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
				fieldValidation: "gt=12.34",
			},
			want: `if !(obj.FieldGtFloat64 > 12.34) {
errs = append(errs, types.NewValidationError("FieldGtFloat64 must be > 12.34"))
}
`,
		},
		{
			name: "gte_int_gte=32",
			args: args{
				fieldName:       "FieldGteInt",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteInt >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt must be >= 32"))
}
`,
		},
		{
			name: "gte_int8_gte=32",
			args: args{
				fieldName:       "FieldGteInt8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteInt8 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt8 must be >= 32"))
}
`,
		},
		{
			name: "gte_int16_gte=32",
			args: args{
				fieldName:       "FieldGteInt16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteInt16 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt16 must be >= 32"))
}
`,
		},
		{
			name: "gte_int32_gte=32",
			args: args{
				fieldName:       "FieldGteInt32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteInt32 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt32 must be >= 32"))
}
`,
		},
		{
			name: "gte_int64_gte=32",
			args: args{
				fieldName:       "FieldGteInt64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteInt64 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteInt64 must be >= 32"))
}
`,
		},
		{
			name: "gte_uint_gte=32",
			args: args{
				fieldName:       "FieldGteUint",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteUint >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint must be >= 32"))
}
`,
		},
		{
			name: "gte_uint8_gte=32",
			args: args{
				fieldName:       "FieldGteUint8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteUint8 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint8 must be >= 32"))
}
`,
		},
		{
			name: "gte_uint16_gte=32",
			args: args{
				fieldName:       "FieldGteUint16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteUint16 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint16 must be >= 32"))
}
`,
		},
		{
			name: "gte_uint32_gte=32",
			args: args{
				fieldName:       "FieldGteUint32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteUint32 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint32 must be >= 32"))
}
`,
		},
		{
			name: "gte_uint64_gte=32",
			args: args{
				fieldName:       "FieldGteUint64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
				fieldValidation: "gte=32",
			},
			want: `if !(obj.FieldGteUint64 >= 32) {
errs = append(errs, types.NewValidationError("FieldGteUint64 must be >= 32"))
}
`,
		},
		{
			name: "gte_float32_gte=12.34",
			args: args{
				fieldName:       "FieldGteFloat32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
				fieldValidation: "gte=12.34",
			},
			want: `if !(obj.FieldGteFloat32 >= 12.34) {
errs = append(errs, types.NewValidationError("FieldGteFloat32 must be >= 12.34"))
}
`,
		},
		{
			name: "gte_float64_gte=12.34",
			args: args{
				fieldName:       "FieldGteFloat64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
				fieldValidation: "gte=12.34",
			},
			want: `if !(obj.FieldGteFloat64 >= 12.34) {
errs = append(errs, types.NewValidationError("FieldGteFloat64 must be >= 12.34"))
}
`,
		},
		{
			name: "lt_int_lt=32",
			args: args{
				fieldName:       "FieldLtInt",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtInt < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt must be < 32"))
}
`,
		},
		{
			name: "lt_int8_lt=32",
			args: args{
				fieldName:       "FieldLtInt8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtInt8 < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt8 must be < 32"))
}
`,
		},
		{
			name: "lt_int16_lt=32",
			args: args{
				fieldName:       "FieldLtInt16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtInt16 < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt16 must be < 32"))
}
`,
		},
		{
			name: "lt_int32_lt=32",
			args: args{
				fieldName:       "FieldLtInt32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtInt32 < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt32 must be < 32"))
}
`,
		},
		{
			name: "lt_int64_lt=32",
			args: args{
				fieldName:       "FieldLtInt64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtInt64 < 32) {
errs = append(errs, types.NewValidationError("FieldLtInt64 must be < 32"))
}
`,
		},
		{
			name: "lt_uint_lt=32",
			args: args{
				fieldName:       "FieldLtUint",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtUint < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint must be < 32"))
}
`,
		},
		{
			name: "lt_uint8_lt=32",
			args: args{
				fieldName:       "FieldLtUint8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtUint8 < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint8 must be < 32"))
}
`,
		},
		{
			name: "lt_uint16_lt=32",
			args: args{
				fieldName:       "FieldLtUint16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtUint16 < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint16 must be < 32"))
}
`,
		},
		{
			name: "lt_uint32_lt=32",
			args: args{
				fieldName:       "FieldLtUint32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtUint32 < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint32 must be < 32"))
}
`,
		},
		{
			name: "lt_uint64_lt=32",
			args: args{
				fieldName:       "FieldLtUint64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
				fieldValidation: "lt=32",
			},
			want: `if !(obj.FieldLtUint64 < 32) {
errs = append(errs, types.NewValidationError("FieldLtUint64 must be < 32"))
}
`,
		},
		{
			name: "lt_float32_lt=12.34",
			args: args{
				fieldName:       "FieldLtFloat32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
				fieldValidation: "lt=12.34",
			},
			want: `if !(obj.FieldLtFloat32 < 12.34) {
errs = append(errs, types.NewValidationError("FieldLtFloat32 must be < 12.34"))
}
`,
		},
		{
			name: "lt_float64_lt=12.34",
			args: args{
				fieldName:       "FieldLtFloat64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
				fieldValidation: "lt=12.34",
			},
			want: `if !(obj.FieldLtFloat64 < 12.34) {
errs = append(errs, types.NewValidationError("FieldLtFloat64 must be < 12.34"))
}
`,
		},
		{
			name: "lte_int_lte=32",
			args: args{
				fieldName:       "FieldLteInt",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteInt <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt must be <= 32"))
}
`,
		},
		{
			name: "lte_int8_lte=32",
			args: args{
				fieldName:       "FieldLteInt8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteInt8 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt8 must be <= 32"))
}
`,
		},
		{
			name: "lte_int16_lte=32",
			args: args{
				fieldName:       "FieldLteInt16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteInt16 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt16 must be <= 32"))
}
`,
		},
		{
			name: "lte_int32_lte=32",
			args: args{
				fieldName:       "FieldLteInt32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteInt32 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt32 must be <= 32"))
}
`,
		},
		{
			name: "lte_int64_lte=32",
			args: args{
				fieldName:       "FieldLteInt64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteInt64 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteInt64 must be <= 32"))
}
`,
		},
		{
			name: "lte_uint_lte=32",
			args: args{
				fieldName:       "FieldLteUint",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteUint <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint must be <= 32"))
}
`,
		},
		{
			name: "lte_uint8_lte=32",
			args: args{
				fieldName:       "FieldLteUint8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteUint8 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint8 must be <= 32"))
}
`,
		},
		{
			name: "lte_uint16_lte=32",
			args: args{
				fieldName:       "FieldLteUint16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteUint16 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint16 must be <= 32"))
}
`,
		},
		{
			name: "lte_uint32_lte=32",
			args: args{
				fieldName:       "FieldLteUint32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteUint32 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint32 must be <= 32"))
}
`,
		},
		{
			name: "lte_uint64_lte=32",
			args: args{
				fieldName:       "FieldLteUint64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
				fieldValidation: "lte=32",
			},
			want: `if !(obj.FieldLteUint64 <= 32) {
errs = append(errs, types.NewValidationError("FieldLteUint64 must be <= 32"))
}
`,
		},
		{
			name: "lte_float32_lte=12.34",
			args: args{
				fieldName:       "FieldLteFloat32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
				fieldValidation: "lte=12.34",
			},
			want: `if !(obj.FieldLteFloat32 <= 12.34) {
errs = append(errs, types.NewValidationError("FieldLteFloat32 must be <= 12.34"))
}
`,
		},
		{
			name: "lte_float64_lte=12.34",
			args: args{
				fieldName:       "FieldLteFloat64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
				fieldValidation: "lte=12.34",
			},
			want: `if !(obj.FieldLteFloat64 <= 12.34) {
errs = append(errs, types.NewValidationError("FieldLteFloat64 must be <= 12.34"))
}
`,
		},
		{
			name: "min_string_min=5",
			args: args{
				fieldName:       "FieldMinString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "min=5",
			},
			want: `if !(len(obj.FieldMinString) >= 5) {
errs = append(errs, types.NewValidationError("FieldMinString length must be >= 5"))
}
`,
		},
		{
			name: "min_stringslice_min=2",
			args: args{
				fieldName:       "FieldMinStringSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinStringSlice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinStringSlice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_intslice_min=2",
			args: args{
				fieldName:       "FieldMinIntSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinIntSlice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinIntSlice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_int8slice_min=2",
			args: args{
				fieldName:       "FieldMinInt8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinInt8Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt8Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_int16slice_min=2",
			args: args{
				fieldName:       "FieldMinInt16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinInt16Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt16Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_int32slice_min=2",
			args: args{
				fieldName:       "FieldMinInt32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinInt32Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt32Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_int64slice_min=2",
			args: args{
				fieldName:       "FieldMinInt64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinInt64Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt64Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uintslice_min=2",
			args: args{
				fieldName:       "FieldMinUintSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUintSlice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUintSlice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uint8slice_min=2",
			args: args{
				fieldName:       "FieldMinUint8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUint8Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint8Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uint16slice_min=2",
			args: args{
				fieldName:       "FieldMinUint16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUint16Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint16Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uint32slice_min=2",
			args: args{
				fieldName:       "FieldMinUint32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUint32Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint32Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uint64slice_min=2",
			args: args{
				fieldName:       "FieldMinUint64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUint64Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint64Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_float32slice_min=2",
			args: args{
				fieldName:       "FieldMinFloat32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinFloat32Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat32Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_float64slice_min=2",
			args: args{
				fieldName:       "FieldMinFloat64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinFloat64Slice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat64Slice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_boolslice_min=2",
			args: args{
				fieldName:       "FieldMinBoolSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinBoolSlice) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinBoolSlice must have at least 2 elements"))
}
`,
		},
		{
			name: "min_stringmap_min=2",
			args: args{
				fieldName:       "FieldMinStringMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinStringMap) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinStringMap must have at least 2 elements"))
}
`,
		},
		{
			name: "min_intmap_min=2",
			args: args{
				fieldName:       "FieldMinIntMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinIntMap) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinIntMap must have at least 2 elements"))
}
`,
		},
		{
			name: "min_int8map_min=2",
			args: args{
				fieldName:       "FieldMinInt8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinInt8Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt8Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_int16map_min=2",
			args: args{
				fieldName:       "FieldMinInt16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinInt16Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt16Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_int32map_min=2",
			args: args{
				fieldName:       "FieldMinInt32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinInt32Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt32Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_int64map_min=2",
			args: args{
				fieldName:       "FieldMinInt64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinInt64Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinInt64Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uintmap_min=2",
			args: args{
				fieldName:       "FieldMinUintMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUintMap) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUintMap must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uint8map_min=2",
			args: args{
				fieldName:       "FieldMinUint8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUint8Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint8Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uint16map_min=2",
			args: args{
				fieldName:       "FieldMinUint16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUint16Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint16Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uint32map_min=2",
			args: args{
				fieldName:       "FieldMinUint32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUint32Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint32Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_uint64map_min=2",
			args: args{
				fieldName:       "FieldMinUint64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinUint64Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinUint64Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_float32map_min=2",
			args: args{
				fieldName:       "FieldMinFloat32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinFloat32Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat32Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_float64map_min=2",
			args: args{
				fieldName:       "FieldMinFloat64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinFloat64Map) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinFloat64Map must have at least 2 elements"))
}
`,
		},
		{
			name: "min_boolmap_min=2",
			args: args{
				fieldName:       "FieldMinBoolMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
				fieldValidation: "min=2",
			},
			want: `if !(len(obj.FieldMinBoolMap) >= 2) {
errs = append(errs, types.NewValidationError("FieldMinBoolMap must have at least 2 elements"))
}
`,
		},
		{
			name: "max_string_max=3",
			args: args{
				fieldName:       "FieldMaxString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "max=3",
			},
			want: `if !(len(obj.FieldMaxString) <= 3) {
errs = append(errs, types.NewValidationError("FieldMaxString length must be <= 3"))
}
`,
		},
		{
			name: "max_stringslice_max=2",
			args: args{
				fieldName:       "FieldMaxStringSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxStringSlice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxStringSlice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_intslice_max=2",
			args: args{
				fieldName:       "FieldMaxIntSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxIntSlice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxIntSlice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_int8slice_max=2",
			args: args{
				fieldName:       "FieldMaxInt8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxInt8Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt8Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_int16slice_max=2",
			args: args{
				fieldName:       "FieldMaxInt16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxInt16Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt16Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_int32slice_max=2",
			args: args{
				fieldName:       "FieldMaxInt32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxInt32Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt32Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_int64slice_max=2",
			args: args{
				fieldName:       "FieldMaxInt64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxInt64Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt64Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uintslice_max=2",
			args: args{
				fieldName:       "FieldMaxUintSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUintSlice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUintSlice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uint8slice_max=2",
			args: args{
				fieldName:       "FieldMaxUint8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUint8Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint8Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uint16slice_max=2",
			args: args{
				fieldName:       "FieldMaxUint16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUint16Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint16Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uint32slice_max=2",
			args: args{
				fieldName:       "FieldMaxUint32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUint32Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint32Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uint64slice_max=2",
			args: args{
				fieldName:       "FieldMaxUint64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUint64Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint64Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_float32slice_max=2",
			args: args{
				fieldName:       "FieldMaxFloat32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxFloat32Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat32Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_float64slice_max=2",
			args: args{
				fieldName:       "FieldMaxFloat64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxFloat64Slice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat64Slice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_boolslice_max=2",
			args: args{
				fieldName:       "FieldMaxBoolSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxBoolSlice) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxBoolSlice must have at most 2 elements"))
}
`,
		},
		{
			name: "max_stringmap_max=2",
			args: args{
				fieldName:       "FieldMaxStringMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxStringMap) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxStringMap must have at most 2 elements"))
}
`,
		},
		{
			name: "max_intmap_max=2",
			args: args{
				fieldName:       "FieldMaxIntMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxIntMap) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxIntMap must have at most 2 elements"))
}
`,
		},
		{
			name: "max_int8map_max=2",
			args: args{
				fieldName:       "FieldMaxInt8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxInt8Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt8Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_int16map_max=2",
			args: args{
				fieldName:       "FieldMaxInt16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxInt16Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt16Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_int32map_max=2",
			args: args{
				fieldName:       "FieldMaxInt32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxInt32Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt32Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_int64map_max=2",
			args: args{
				fieldName:       "FieldMaxInt64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxInt64Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxInt64Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uintmap_max=2",
			args: args{
				fieldName:       "FieldMaxUintMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUintMap) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUintMap must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uint8map_max=2",
			args: args{
				fieldName:       "FieldMaxUint8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUint8Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint8Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uint16map_max=2",
			args: args{
				fieldName:       "FieldMaxUint16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUint16Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint16Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uint32map_max=2",
			args: args{
				fieldName:       "FieldMaxUint32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUint32Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint32Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_uint64map_max=2",
			args: args{
				fieldName:       "FieldMaxUint64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxUint64Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxUint64Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_float32map_max=2",
			args: args{
				fieldName:       "FieldMaxFloat32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxFloat32Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat32Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_float64map_max=2",
			args: args{
				fieldName:       "FieldMaxFloat64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
				fieldValidation: "max=2",
			},
			want: `if !(len(obj.FieldMaxFloat64Map) <= 2) {
errs = append(errs, types.NewValidationError("FieldMaxFloat64Map must have at most 2 elements"))
}
`,
		},
		{
			name: "max_boolmap_max=1",
			args: args{
				fieldName:       "FieldMaxBoolMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
				fieldValidation: "max=1",
			},
			want: `if !(len(obj.FieldMaxBoolMap) <= 1) {
errs = append(errs, types.NewValidationError("FieldMaxBoolMap must have at most 1 elements"))
}
`,
		},
		{
			name: "eq_ignore_case_string_eq_ignore_case=abcde",
			args: args{
				fieldName:       "FieldEq_ignore_caseString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "eq_ignore_case=abcde",
			},
			want: `if !(types.EqualFold(obj.FieldEq_ignore_caseString, "abcde")) {
errs = append(errs, types.NewValidationError("FieldEq_ignore_caseString must be equal to 'abcde'"))
}
`,
		},
		{
			name: "neq_ignore_case_string_neq_ignore_case=abcde",
			args: args{
				fieldName:       "FieldNeq_ignore_caseString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "neq_ignore_case=abcde",
			},
			want: `if !(!types.EqualFold(obj.FieldNeq_ignore_caseString, "abcde")) {
errs = append(errs, types.NewValidationError("FieldNeq_ignore_caseString must not be equal to 'abcde'"))
}
`,
		},
		{
			name: "len_string_len=2",
			args: args{
				fieldName:       "FieldLenString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenString) == 2) {
errs = append(errs, types.NewValidationError("FieldLenString length must be 2"))
}
`,
		},
		{
			name: "len_stringslice_len=2",
			args: args{
				fieldName:       "FieldLenStringSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenStringSlice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenStringSlice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_intslice_len=2",
			args: args{
				fieldName:       "FieldLenIntSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenIntSlice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenIntSlice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_int8slice_len=2",
			args: args{
				fieldName:       "FieldLenInt8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenInt8Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt8Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_int16slice_len=2",
			args: args{
				fieldName:       "FieldLenInt16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenInt16Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt16Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_int32slice_len=2",
			args: args{
				fieldName:       "FieldLenInt32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenInt32Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt32Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_int64slice_len=2",
			args: args{
				fieldName:       "FieldLenInt64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenInt64Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt64Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uintslice_len=2",
			args: args{
				fieldName:       "FieldLenUintSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUintSlice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUintSlice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uint8slice_len=2",
			args: args{
				fieldName:       "FieldLenUint8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUint8Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint8Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uint16slice_len=2",
			args: args{
				fieldName:       "FieldLenUint16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUint16Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint16Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uint32slice_len=2",
			args: args{
				fieldName:       "FieldLenUint32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUint32Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint32Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uint64slice_len=2",
			args: args{
				fieldName:       "FieldLenUint64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUint64Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint64Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_float32slice_len=2",
			args: args{
				fieldName:       "FieldLenFloat32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenFloat32Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat32Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_float64slice_len=2",
			args: args{
				fieldName:       "FieldLenFloat64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenFloat64Slice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat64Slice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_boolslice_len=2",
			args: args{
				fieldName:       "FieldLenBoolSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenBoolSlice) == 2) {
errs = append(errs, types.NewValidationError("FieldLenBoolSlice must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_stringmap_len=2",
			args: args{
				fieldName:       "FieldLenStringMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenStringMap) == 2) {
errs = append(errs, types.NewValidationError("FieldLenStringMap must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_intmap_len=2",
			args: args{
				fieldName:       "FieldLenIntMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenIntMap) == 2) {
errs = append(errs, types.NewValidationError("FieldLenIntMap must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_int8map_len=2",
			args: args{
				fieldName:       "FieldLenInt8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenInt8Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt8Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_int16map_len=2",
			args: args{
				fieldName:       "FieldLenInt16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenInt16Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt16Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_int32map_len=2",
			args: args{
				fieldName:       "FieldLenInt32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenInt32Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt32Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_int64map_len=2",
			args: args{
				fieldName:       "FieldLenInt64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenInt64Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenInt64Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uintmap_len=2",
			args: args{
				fieldName:       "FieldLenUintMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUintMap) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUintMap must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uint8map_len=2",
			args: args{
				fieldName:       "FieldLenUint8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUint8Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint8Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uint16map_len=2",
			args: args{
				fieldName:       "FieldLenUint16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUint16Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint16Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uint32map_len=2",
			args: args{
				fieldName:       "FieldLenUint32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUint32Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint32Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_uint64map_len=2",
			args: args{
				fieldName:       "FieldLenUint64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenUint64Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenUint64Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_float32map_len=2",
			args: args{
				fieldName:       "FieldLenFloat32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenFloat32Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat32Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_float64map_len=2",
			args: args{
				fieldName:       "FieldLenFloat64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenFloat64Map) == 2) {
errs = append(errs, types.NewValidationError("FieldLenFloat64Map must have exactly 2 elements"))
}
`,
		},
		{
			name: "len_boolmap_len=2",
			args: args{
				fieldName:       "FieldLenBoolMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
				fieldValidation: "len=2",
			},
			want: `if !(len(obj.FieldLenBoolMap) == 2) {
errs = append(errs, types.NewValidationError("FieldLenBoolMap must have exactly 2 elements"))
}
`,
		},
		{
			name: "in_string_in=ab cd ef",
			args: args{
				fieldName:       "FieldInString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "in=ab cd ef",
			},
			want: `if !(obj.FieldInString == "ab" || obj.FieldInString == "cd" || obj.FieldInString == "ef") {
errs = append(errs, types.NewValidationError("FieldInString must be one of 'ab' 'cd' 'ef'"))
}
`,
		},
		{
			name: "in_int_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInInt == 12 || obj.FieldInInt == 34 || obj.FieldInInt == 56) {
errs = append(errs, types.NewValidationError("FieldInInt must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int8_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInInt8 == 12 || obj.FieldInInt8 == 34 || obj.FieldInInt8 == 56) {
errs = append(errs, types.NewValidationError("FieldInInt8 must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int16_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInInt16 == 12 || obj.FieldInInt16 == 34 || obj.FieldInInt16 == 56) {
errs = append(errs, types.NewValidationError("FieldInInt16 must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int32_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInInt32 == 12 || obj.FieldInInt32 == 34 || obj.FieldInInt32 == 56) {
errs = append(errs, types.NewValidationError("FieldInInt32 must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int64_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInInt64 == 12 || obj.FieldInInt64 == 34 || obj.FieldInInt64 == 56) {
errs = append(errs, types.NewValidationError("FieldInInt64 must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInUint == 12 || obj.FieldInUint == 34 || obj.FieldInUint == 56) {
errs = append(errs, types.NewValidationError("FieldInUint must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint8_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInUint8 == 12 || obj.FieldInUint8 == 34 || obj.FieldInUint8 == 56) {
errs = append(errs, types.NewValidationError("FieldInUint8 must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint16_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInUint16 == 12 || obj.FieldInUint16 == 34 || obj.FieldInUint16 == 56) {
errs = append(errs, types.NewValidationError("FieldInUint16 must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint32_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInUint32 == 12 || obj.FieldInUint32 == 34 || obj.FieldInUint32 == 56) {
errs = append(errs, types.NewValidationError("FieldInUint32 must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint64_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(obj.FieldInUint64 == 12 || obj.FieldInUint64 == 34 || obj.FieldInUint64 == 56) {
errs = append(errs, types.NewValidationError("FieldInUint64 must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_float32_in=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldInFloat32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
				fieldValidation: "in=11.11 22.22 33.33",
			},
			want: `if !(obj.FieldInFloat32 == 11.11 || obj.FieldInFloat32 == 22.22 || obj.FieldInFloat32 == 33.33) {
errs = append(errs, types.NewValidationError("FieldInFloat32 must be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "in_float64_in=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldInFloat64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
				fieldValidation: "in=11.11 22.22 33.33",
			},
			want: `if !(obj.FieldInFloat64 == 11.11 || obj.FieldInFloat64 == 22.22 || obj.FieldInFloat64 == 33.33) {
errs = append(errs, types.NewValidationError("FieldInFloat64 must be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "in_bool_in=true",
			args: args{
				fieldName:       "FieldInBool",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
				fieldValidation: "in=true",
			},
			want: `if !(obj.FieldInBool == true) {
errs = append(errs, types.NewValidationError("FieldInBool must be one of 'true'"))
}
`,
		},
		{
			name: "in_stringslice_in=ab cd ef",
			args: args{
				fieldName:       "FieldInStringSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
				fieldValidation: "in=ab cd ef",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInStringSlice, []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldInStringSlice elements must be one of 'ab' 'cd' 'ef'"))
}
`,
		},
		{
			name: "in_intslice_in=12 34 56",
			args: args{
				fieldName:       "FieldInIntSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInIntSlice, []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInIntSlice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int8slice_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInInt8Slice, []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt8Slice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int16slice_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInInt16Slice, []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt16Slice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int32slice_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInInt32Slice, []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt32Slice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int64slice_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInInt64Slice, []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt64Slice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uintslice_in=12 34 56",
			args: args{
				fieldName:       "FieldInUintSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUintSlice, []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUintSlice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint8slice_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUint8Slice, []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint8Slice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint16slice_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUint16Slice, []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint16Slice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint32slice_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUint32Slice, []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint32Slice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint64slice_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUint64Slice, []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint64Slice elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_float32slice_in=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldInFloat32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
				fieldValidation: "in=11.11 22.22 33.33",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInFloat32Slice, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat32Slice elements must be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "in_float64slice_in=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldInFloat64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
				fieldValidation: "in=11.11 22.22 33.33",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInFloat64Slice, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat64Slice elements must be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "in_boolslice_in=true",
			args: args{
				fieldName:       "FieldInBoolSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
				fieldValidation: "in=true",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInBoolSlice, []bool{true})) {
errs = append(errs, types.NewValidationError("FieldInBoolSlice elements must be one of 'true'"))
}
`,
		},
		{
			name: "in_stringarray_in=ab cd ef",
			args: args{
				fieldName:       "FieldInStringArray",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "string", Size: "3"},
				fieldValidation: "in=ab cd ef",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInStringArray[:], []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldInStringArray elements must be one of 'ab' 'cd' 'ef'"))
}
`,
		},
		{
			name: "in_intarray_in=12 34 56",
			args: args{
				fieldName:       "FieldInIntArray",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInIntArray[:], []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInIntArray elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int8array_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt8Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int8", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInInt8Array[:], []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt8Array elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int16array_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt16Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int16", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInInt16Array[:], []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt16Array elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int32array_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt32Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int32", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInInt32Array[:], []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt32Array elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_int64array_in=12 34 56",
			args: args{
				fieldName:       "FieldInInt64Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int64", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInInt64Array[:], []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInInt64Array elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uintarray_in=12 34 56",
			args: args{
				fieldName:       "FieldInUintArray",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUintArray[:], []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUintArray elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint8array_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint8Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint8", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUint8Array[:], []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint8Array elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint16array_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint16Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint16", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUint16Array[:], []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint16Array elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint32array_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint32Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint32", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUint32Array[:], []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint32Array elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_uint64array_in=12 34 56",
			args: args{
				fieldName:       "FieldInUint64Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint64", Size: "3"},
				fieldValidation: "in=12 34 56",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInUint64Array[:], []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldInUint64Array elements must be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "in_float32array_in=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldInFloat32Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "float32", Size: "3"},
				fieldValidation: "in=11.11 22.22 33.33",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInFloat32Array[:], []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat32Array elements must be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "in_float64array_in=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldInFloat64Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "float64", Size: "3"},
				fieldValidation: "in=11.11 22.22 33.33",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInFloat64Array[:], []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat64Array elements must be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "in_boolarray_in=true",
			args: args{
				fieldName:       "FieldInBoolArray",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "bool", Size: "3"},
				fieldValidation: "in=true",
			},
			want: `if !(types.SliceOnlyContains(obj.FieldInBoolArray[:], []bool{true})) {
errs = append(errs, types.NewValidationError("FieldInBoolArray elements must be one of 'true'"))
}
`,
		},
		{
			name: "in_stringmap_in=a b c",
			args: args{
				fieldName:       "FieldInStringMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
				fieldValidation: "in=a b c",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInStringMap, []string{"a", "b", "c"})) {
errs = append(errs, types.NewValidationError("FieldInStringMap elements must be one of 'a' 'b' 'c'"))
}
`,
		},
		{
			name: "in_intmap_in=1 2 3",
			args: args{
				fieldName:       "FieldInIntMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInIntMap, []int{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInIntMap elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_int8map_in=1 2 3",
			args: args{
				fieldName:       "FieldInInt8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInInt8Map, []int8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt8Map elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_int16map_in=1 2 3",
			args: args{
				fieldName:       "FieldInInt16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInInt16Map, []int16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt16Map elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_int32map_in=1 2 3",
			args: args{
				fieldName:       "FieldInInt32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInInt32Map, []int32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt32Map elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_int64map_in=1 2 3",
			args: args{
				fieldName:       "FieldInInt64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInInt64Map, []int64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInInt64Map elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_uintmap_in=1 2 3",
			args: args{
				fieldName:       "FieldInUintMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInUintMap, []uint{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUintMap elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_uint8map_in=1 2 3",
			args: args{
				fieldName:       "FieldInUint8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInUint8Map, []uint8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint8Map elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_uint16map_in=1 2 3",
			args: args{
				fieldName:       "FieldInUint16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInUint16Map, []uint16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint16Map elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_uint32map_in=1 2 3",
			args: args{
				fieldName:       "FieldInUint32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInUint32Map, []uint32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint32Map elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_uint64map_in=1 2 3",
			args: args{
				fieldName:       "FieldInUint64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
				fieldValidation: "in=1 2 3",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInUint64Map, []uint64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldInUint64Map elements must be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "in_float32map_in=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldInFloat32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
				fieldValidation: "in=11.11 22.22 33.33",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInFloat32Map, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat32Map elements must be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "in_float64map_in=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldInFloat64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
				fieldValidation: "in=11.11 22.22 33.33",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInFloat64Map, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldInFloat64Map elements must be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "in_boolmap_in=false",
			args: args{
				fieldName:       "FieldInBoolMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
				fieldValidation: "in=false",
			},
			want: `if !(types.MapOnlyContains(obj.FieldInBoolMap, []bool{false})) {
errs = append(errs, types.NewValidationError("FieldInBoolMap elements must be one of 'false'"))
}
`,
		},
		{
			name: "nin_string_nin=ab cd ef",
			args: args{
				fieldName:       "FieldNinString",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "string", Size: ""},
				fieldValidation: "nin=ab cd ef",
			},
			want: `if !(obj.FieldNinString != "ab" && obj.FieldNinString != "cd" && obj.FieldNinString != "ef") {
errs = append(errs, types.NewValidationError("FieldNinString must not be one of 'ab' 'cd' 'ef'"))
}
`,
		},
		{
			name: "nin_int_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinInt != 12 && obj.FieldNinInt != 34 && obj.FieldNinInt != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int8_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int8", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinInt8 != 12 && obj.FieldNinInt8 != 34 && obj.FieldNinInt8 != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt8 must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int16_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int16", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinInt16 != 12 && obj.FieldNinInt16 != 34 && obj.FieldNinInt16 != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt16 must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int32_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int32", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinInt32 != 12 && obj.FieldNinInt32 != 34 && obj.FieldNinInt32 != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt32 must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int64_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "int64", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinInt64 != 12 && obj.FieldNinInt64 != 34 && obj.FieldNinInt64 != 56) {
errs = append(errs, types.NewValidationError("FieldNinInt64 must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinUint != 12 && obj.FieldNinUint != 34 && obj.FieldNinUint != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint8_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint8",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint8", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinUint8 != 12 && obj.FieldNinUint8 != 34 && obj.FieldNinUint8 != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint8 must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint16_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint16",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint16", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinUint16 != 12 && obj.FieldNinUint16 != 34 && obj.FieldNinUint16 != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint16 must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint32_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint32", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinUint32 != 12 && obj.FieldNinUint32 != 34 && obj.FieldNinUint32 != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint32 must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint64_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "uint64", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(obj.FieldNinUint64 != 12 && obj.FieldNinUint64 != 34 && obj.FieldNinUint64 != 56) {
errs = append(errs, types.NewValidationError("FieldNinUint64 must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_float32_nin=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldNinFloat32",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float32", Size: ""},
				fieldValidation: "nin=11.11 22.22 33.33",
			},
			want: `if !(obj.FieldNinFloat32 != 11.11 && obj.FieldNinFloat32 != 22.22 && obj.FieldNinFloat32 != 33.33) {
errs = append(errs, types.NewValidationError("FieldNinFloat32 must not be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "nin_float64_nin=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldNinFloat64",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "float64", Size: ""},
				fieldValidation: "nin=11.11 22.22 33.33",
			},
			want: `if !(obj.FieldNinFloat64 != 11.11 && obj.FieldNinFloat64 != 22.22 && obj.FieldNinFloat64 != 33.33) {
errs = append(errs, types.NewValidationError("FieldNinFloat64 must not be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "nin_bool_nin=true",
			args: args{
				fieldName:       "FieldNinBool",
				fieldType:       common.FieldType{ComposedType: "", BaseType: "bool", Size: ""},
				fieldValidation: "nin=true",
			},
			want: `if !(obj.FieldNinBool != true) {
errs = append(errs, types.NewValidationError("FieldNinBool must not be one of 'true'"))
}
`,
		},
		{
			name: "nin_stringslice_nin=ab cd ef",
			args: args{
				fieldName:       "FieldNinStringSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "string", Size: ""},
				fieldValidation: "nin=ab cd ef",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinStringSlice, []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldNinStringSlice elements must not be one of 'ab' 'cd' 'ef'"))
}
`,
		},
		{
			name: "nin_intslice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinIntSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinIntSlice, []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinIntSlice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int8slice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int8", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinInt8Slice, []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt8Slice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int16slice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int16", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinInt16Slice, []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt16Slice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int32slice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int32", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinInt32Slice, []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt32Slice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int64slice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "int64", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinInt64Slice, []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt64Slice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uintslice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUintSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUintSlice, []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUintSlice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint8slice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint8Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint8", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUint8Slice, []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint8Slice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint16slice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint16Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint16", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUint16Slice, []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint16Slice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint32slice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint32", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUint32Slice, []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint32Slice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint64slice_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "uint64", Size: ""},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUint64Slice, []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint64Slice elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_float32slice_nin=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldNinFloat32Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float32", Size: ""},
				fieldValidation: "nin=11.11 22.22 33.33",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinFloat32Slice, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat32Slice elements must not be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "nin_float64slice_nin=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldNinFloat64Slice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "float64", Size: ""},
				fieldValidation: "nin=11.11 22.22 33.33",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinFloat64Slice, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat64Slice elements must not be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "nin_boolslice_nin=true",
			args: args{
				fieldName:       "FieldNinBoolSlice",
				fieldType:       common.FieldType{ComposedType: "[]", BaseType: "bool", Size: ""},
				fieldValidation: "nin=true",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinBoolSlice, []bool{true})) {
errs = append(errs, types.NewValidationError("FieldNinBoolSlice elements must not be one of 'true'"))
}
`,
		},
		{
			name: "nin_stringarray_nin=ab cd ef",
			args: args{
				fieldName:       "FieldNinStringArray",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "string", Size: "3"},
				fieldValidation: "nin=ab cd ef",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinStringArray[:], []string{"ab", "cd", "ef"})) {
errs = append(errs, types.NewValidationError("FieldNinStringArray elements must not be one of 'ab' 'cd' 'ef'"))
}
`,
		},
		{
			name: "nin_intarray_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinIntArray",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinIntArray[:], []int{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinIntArray elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int8array_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt8Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int8", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinInt8Array[:], []int8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt8Array elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int16array_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt16Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int16", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinInt16Array[:], []int16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt16Array elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int32array_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt32Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int32", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinInt32Array[:], []int32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt32Array elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_int64array_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinInt64Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "int64", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinInt64Array[:], []int64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinInt64Array elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uintarray_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUintArray",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUintArray[:], []uint{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUintArray elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint8array_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint8Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint8", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUint8Array[:], []uint8{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint8Array elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint16array_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint16Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint16", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUint16Array[:], []uint16{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint16Array elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint32array_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint32Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint32", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUint32Array[:], []uint32{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint32Array elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_uint64array_nin=12 34 56",
			args: args{
				fieldName:       "FieldNinUint64Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "uint64", Size: "3"},
				fieldValidation: "nin=12 34 56",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinUint64Array[:], []uint64{12, 34, 56})) {
errs = append(errs, types.NewValidationError("FieldNinUint64Array elements must not be one of '12' '34' '56'"))
}
`,
		},
		{
			name: "nin_float32array_nin=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldNinFloat32Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "float32", Size: "3"},
				fieldValidation: "nin=11.11 22.22 33.33",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinFloat32Array[:], []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat32Array elements must not be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "nin_float64array_nin=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldNinFloat64Array",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "float64", Size: "3"},
				fieldValidation: "nin=11.11 22.22 33.33",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinFloat64Array[:], []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat64Array elements must not be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "nin_boolarray_nin=true",
			args: args{
				fieldName:       "FieldNinBoolArray",
				fieldType:       common.FieldType{ComposedType: "[N]", BaseType: "bool", Size: "3"},
				fieldValidation: "nin=true",
			},
			want: `if !(types.SliceNotContains(obj.FieldNinBoolArray[:], []bool{true})) {
errs = append(errs, types.NewValidationError("FieldNinBoolArray elements must not be one of 'true'"))
}
`,
		},
		{
			name: "nin_stringmap_nin=a b c",
			args: args{
				fieldName:       "FieldNinStringMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "string", Size: ""},
				fieldValidation: "nin=a b c",
			},
			want: `if !(types.MapNotContains(obj.FieldNinStringMap, []string{"a", "b", "c"})) {
errs = append(errs, types.NewValidationError("FieldNinStringMap elements must not be one of 'a' 'b' 'c'"))
}
`,
		},
		{
			name: "nin_intmap_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinIntMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinIntMap, []int{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinIntMap elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_int8map_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinInt8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int8", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinInt8Map, []int8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt8Map elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_int16map_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinInt16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int16", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinInt16Map, []int16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt16Map elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_int32map_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinInt32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int32", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinInt32Map, []int32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt32Map elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_int64map_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinInt64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "int64", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinInt64Map, []int64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinInt64Map elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_uintmap_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinUintMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinUintMap, []uint{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUintMap elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_uint8map_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinUint8Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint8", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinUint8Map, []uint8{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint8Map elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_uint16map_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinUint16Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint16", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinUint16Map, []uint16{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint16Map elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_uint32map_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinUint32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint32", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinUint32Map, []uint32{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint32Map elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_uint64map_nin=1 2 3",
			args: args{
				fieldName:       "FieldNinUint64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "uint64", Size: ""},
				fieldValidation: "nin=1 2 3",
			},
			want: `if !(types.MapNotContains(obj.FieldNinUint64Map, []uint64{1, 2, 3})) {
errs = append(errs, types.NewValidationError("FieldNinUint64Map elements must not be one of '1' '2' '3'"))
}
`,
		},
		{
			name: "nin_float32map_nin=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldNinFloat32Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float32", Size: ""},
				fieldValidation: "nin=11.11 22.22 33.33",
			},
			want: `if !(types.MapNotContains(obj.FieldNinFloat32Map, []float32{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat32Map elements must not be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "nin_float64map_nin=11.11 22.22 33.33",
			args: args{
				fieldName:       "FieldNinFloat64Map",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "float64", Size: ""},
				fieldValidation: "nin=11.11 22.22 33.33",
			},
			want: `if !(types.MapNotContains(obj.FieldNinFloat64Map, []float64{11.11, 22.22, 33.33})) {
errs = append(errs, types.NewValidationError("FieldNinFloat64Map elements must not be one of '11.11' '22.22' '33.33'"))
}
`,
		},
		{
			name: "nin_boolmap_nin=false",
			args: args{
				fieldName:       "FieldNinBoolMap",
				fieldType:       common.FieldType{ComposedType: "map", BaseType: "bool", Size: ""},
				fieldValidation: "nin=false",
			},
			want: `if !(types.MapNotContains(obj.FieldNinBoolMap, []bool{false})) {
errs = append(errs, types.NewValidationError("FieldNinBoolMap elements must not be one of 'false'"))
}
`,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gv := GenValidations{}
			validation := AssertParserValidation(t, tt.args.fieldValidation)
			got, err := gv.BuildValidationCode(tt.args.fieldName, tt.args.fieldType, []*analyzer.Validation{validation})
			if err != nil {
				t.Errorf("BuildValidationCode() error = %v, wantErr %v", err, nil)
				return
			}
			if got != tt.want {
				t.Errorf("BuildValidationCode() = %v, want %v", got, tt.want)
			}
		})
	}
}
