// Code generated by NumericTestGenerator. DO NOT EDIT.

package main

import "log"

func numericFloatTypeTests() {
	log.Println("starting numeric float tests")

	numericFloat32Tests()
	numericFloat64Tests()
	
	log.Println("numeric float tests ok")
}

type NumericTypeFloat32 struct {
	FieldReq   float32 `valid:"required"`
	FieldEq    float32 `valid:"eq=5.9"`
	FieldNeq   float32 `valid:"neq=5.9"`
	FieldGt    float32 `valid:"gt=10.1"`
	FieldGte   float32 `valid:"gte=10.1"`
	FieldLt    float32 `valid:"lt=9.9"`
	FieldLte   float32 `valid:"lte=9.9"`
	FieldIn    float32 `valid:"in=5.1 6.2 7.3"`
	FieldNotIn float32 `valid:"nin=8.5 9.6 10.7"`
}

func numericFloat32Tests() {
	log.Println("starting numeric float32 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeFloat32{
		FieldReq:   0,
		FieldEq:    1.2,
		FieldNeq:   5.9,
		FieldGt:    8.1,
		FieldGte:   8.1,
		FieldLt:    12.2,
		FieldLte:   12.2,
		FieldIn:    3.123,
		FieldNotIn: 9.6,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5.9",
		"FieldNeq must not be equal to 5.9",
		"FieldGt must be > 10.1",
		"FieldGte must be >= 10.1",
		"FieldLt must be < 9.9",
		"FieldLte must be <= 9.9",
		"FieldIn must be one of '5.1' '6.2' '7.3'",
		"FieldNotIn must not be one of '8.5' '9.6' '10.7'",
	}
	errs = NumericTypeFloat32Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeFloat32{
		FieldReq:   123,
		FieldEq:    5.9,
		FieldNeq:   2.4,
		FieldGt:    11.1,
		FieldGte:   12.1,
		FieldLt:    9.1,
		FieldLte:   8.1,
		FieldIn:    6.2,
		FieldNotIn: 12.4,
	}
	expectedMsgErrors = nil
	errs = NumericTypeFloat32Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric float32 tests ok")
}

type NumericTypeFloat64 struct {
	FieldReq   float64 `valid:"required"`
	FieldEq    float64 `valid:"eq=5.9"`
	FieldNeq   float64 `valid:"neq=5.9"`
	FieldGt    float64 `valid:"gt=10.1"`
	FieldGte   float64 `valid:"gte=10.1"`
	FieldLt    float64 `valid:"lt=9.9"`
	FieldLte   float64 `valid:"lte=9.9"`
	FieldIn    float64 `valid:"in=5.1 6.2 7.3"`
	FieldNotIn float64 `valid:"nin=8.5 9.6 10.7"`
}

func numericFloat64Tests() {
	log.Println("starting numeric float64 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeFloat64{
		FieldReq:   0,
		FieldEq:    1.2,
		FieldNeq:   5.9,
		FieldGt:    8.1,
		FieldGte:   8.1,
		FieldLt:    12.2,
		FieldLte:   12.2,
		FieldIn:    3.123,
		FieldNotIn: 9.6,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5.9",
		"FieldNeq must not be equal to 5.9",
		"FieldGt must be > 10.1",
		"FieldGte must be >= 10.1",
		"FieldLt must be < 9.9",
		"FieldLte must be <= 9.9",
		"FieldIn must be one of '5.1' '6.2' '7.3'",
		"FieldNotIn must not be one of '8.5' '9.6' '10.7'",
	}
	errs = NumericTypeFloat64Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeFloat64{
		FieldReq:   123,
		FieldEq:    5.9,
		FieldNeq:   2.4,
		FieldGt:    11.1,
		FieldGte:   12.1,
		FieldLt:    9.1,
		FieldLte:   8.1,
		FieldIn:    6.2,
		FieldNotIn: 12.4,
	}
	expectedMsgErrors = nil
	errs = NumericTypeFloat64Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric float64 tests ok")
}
