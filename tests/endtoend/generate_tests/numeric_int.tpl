// Code generated by NumericTestGenerator. DO NOT EDIT.

package main

import "log"

func numericTests() {
	log.Println("starting numeric tests")

	{{range .FieldTypes}}numeric{{. | title }}Tests()
	{{end}}
	log.Println("numeric tests ok")
}

{{range .FieldTypes}}
type NumericType{{. | title }} struct {
	FieldReq   {{.}} `valid:"required"`
	FieldEq    {{.}} `valid:"eq=5"`
	FieldNeq   {{.}} `valid:"neq=5"`
	FieldGt    {{.}} `valid:"gt=10"`
	FieldGte   {{.}} `valid:"gte=10"`
	FieldLt    {{.}} `valid:"lt=10"`
	FieldLte   {{.}} `valid:"lte=10"`
	FieldIn    {{.}} `valid:"in=5 6 7"`
	FieldNotIn {{.}} `valid:"nin=8 9 10"`
}

func numeric{{. | title }}Tests() {
	log.Println("starting numeric {{.}} tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericType{{. | title }}{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericType{{. | title }}Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericType{{. | title }}{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericType{{. | title }}Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric {{.}} tests ok")
}
{{end}}