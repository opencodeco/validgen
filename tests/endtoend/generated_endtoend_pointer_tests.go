// Code generated by TestGenerator. DO NOT EDIT.

package main

import (
	"log"
)

func pointerTests() {
	emailStructFieldsPointerTests()
	requiredStructFieldsPointerTests()
	eqStructFieldsPointerTests()
	neqStructFieldsPointerTests()
	gtStructFieldsPointerTests()
	gteStructFieldsPointerTests()
	ltStructFieldsPointerTests()
	lteStructFieldsPointerTests()
	minStructFieldsPointerTests()
	maxStructFieldsPointerTests()
	eq_ignore_caseStructFieldsPointerTests()
	neq_ignore_caseStructFieldsPointerTests()
	lenStructFieldsPointerTests()
	inStructFieldsPointerTests()
	ninStructFieldsPointerTests()

}

type emailStructFieldsPointer struct {
	FieldEmailStringPointer *string `valid:"email"`
}

func emailStructFieldsPointerTests() {
	log.Println("starting emailStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &emailStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldEmailStringPointer must be a valid email",
	}
	errs = emailStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldEmailStringPointer string = "abcde@example"

	v = &emailStructFieldsPointer{}
	v.FieldEmailStringPointer = &InvalidFieldEmailStringPointer

	errs = emailStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldEmailStringPointer string = "abcde@example.com"

	v = &emailStructFieldsPointer{}
	v.FieldEmailStringPointer = &ValidFieldEmailStringPointer

	expectedMsgErrors = nil
	errs = emailStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("emailStructFieldsPointer types tests ok")
}

type requiredStructFieldsPointer struct {
	FieldRequiredStringPointer       *string              `valid:"required"`
	FieldRequiredIntPointer          *int                 `valid:"required"`
	FieldRequiredInt8Pointer         *int8                `valid:"required"`
	FieldRequiredInt16Pointer        *int16               `valid:"required"`
	FieldRequiredInt32Pointer        *int32               `valid:"required"`
	FieldRequiredInt64Pointer        *int64               `valid:"required"`
	FieldRequiredUintPointer         *uint                `valid:"required"`
	FieldRequiredUint8Pointer        *uint8               `valid:"required"`
	FieldRequiredUint16Pointer       *uint16              `valid:"required"`
	FieldRequiredUint32Pointer       *uint32              `valid:"required"`
	FieldRequiredUint64Pointer       *uint64              `valid:"required"`
	FieldRequiredFloat32Pointer      *float32             `valid:"required"`
	FieldRequiredFloat64Pointer      *float64             `valid:"required"`
	FieldRequiredBoolPointer         *bool                `valid:"required"`
	FieldRequiredStringSlicePointer  *[]string            `valid:"required"`
	FieldRequiredIntSlicePointer     *[]int               `valid:"required"`
	FieldRequiredInt8SlicePointer    *[]int8              `valid:"required"`
	FieldRequiredInt16SlicePointer   *[]int16             `valid:"required"`
	FieldRequiredInt32SlicePointer   *[]int32             `valid:"required"`
	FieldRequiredInt64SlicePointer   *[]int64             `valid:"required"`
	FieldRequiredUintSlicePointer    *[]uint              `valid:"required"`
	FieldRequiredUint8SlicePointer   *[]uint8             `valid:"required"`
	FieldRequiredUint16SlicePointer  *[]uint16            `valid:"required"`
	FieldRequiredUint32SlicePointer  *[]uint32            `valid:"required"`
	FieldRequiredUint64SlicePointer  *[]uint64            `valid:"required"`
	FieldRequiredFloat32SlicePointer *[]float32           `valid:"required"`
	FieldRequiredFloat64SlicePointer *[]float64           `valid:"required"`
	FieldRequiredBoolSlicePointer    *[]bool              `valid:"required"`
	FieldRequiredStringArrayPointer  *[3]string           `valid:"required"`
	FieldRequiredIntArrayPointer     *[3]int              `valid:"required"`
	FieldRequiredInt8ArrayPointer    *[3]int8             `valid:"required"`
	FieldRequiredInt16ArrayPointer   *[3]int16            `valid:"required"`
	FieldRequiredInt32ArrayPointer   *[3]int32            `valid:"required"`
	FieldRequiredInt64ArrayPointer   *[3]int64            `valid:"required"`
	FieldRequiredUintArrayPointer    *[3]uint             `valid:"required"`
	FieldRequiredUint8ArrayPointer   *[3]uint8            `valid:"required"`
	FieldRequiredUint16ArrayPointer  *[3]uint16           `valid:"required"`
	FieldRequiredUint32ArrayPointer  *[3]uint32           `valid:"required"`
	FieldRequiredUint64ArrayPointer  *[3]uint64           `valid:"required"`
	FieldRequiredFloat32ArrayPointer *[3]float32          `valid:"required"`
	FieldRequiredFloat64ArrayPointer *[3]float64          `valid:"required"`
	FieldRequiredBoolArrayPointer    *[3]bool             `valid:"required"`
	FieldRequiredStringMapPointer    *map[string]string   `valid:"required"`
	FieldRequiredIntMapPointer       *map[int]int         `valid:"required"`
	FieldRequiredInt8MapPointer      *map[int8]int8       `valid:"required"`
	FieldRequiredInt16MapPointer     *map[int16]int16     `valid:"required"`
	FieldRequiredInt32MapPointer     *map[int32]int32     `valid:"required"`
	FieldRequiredInt64MapPointer     *map[int64]int64     `valid:"required"`
	FieldRequiredUintMapPointer      *map[uint]uint       `valid:"required"`
	FieldRequiredUint8MapPointer     *map[uint8]uint8     `valid:"required"`
	FieldRequiredUint16MapPointer    *map[uint16]uint16   `valid:"required"`
	FieldRequiredUint32MapPointer    *map[uint32]uint32   `valid:"required"`
	FieldRequiredUint64MapPointer    *map[uint64]uint64   `valid:"required"`
	FieldRequiredFloat32MapPointer   *map[float32]float32 `valid:"required"`
	FieldRequiredFloat64MapPointer   *map[float64]float64 `valid:"required"`
	FieldRequiredBoolMapPointer      *map[bool]bool       `valid:"required"`
}

func requiredStructFieldsPointerTests() {
	log.Println("starting requiredStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &requiredStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldRequiredStringPointer is required",
		"FieldRequiredIntPointer is required",
		"FieldRequiredInt8Pointer is required",
		"FieldRequiredInt16Pointer is required",
		"FieldRequiredInt32Pointer is required",
		"FieldRequiredInt64Pointer is required",
		"FieldRequiredUintPointer is required",
		"FieldRequiredUint8Pointer is required",
		"FieldRequiredUint16Pointer is required",
		"FieldRequiredUint32Pointer is required",
		"FieldRequiredUint64Pointer is required",
		"FieldRequiredFloat32Pointer is required",
		"FieldRequiredFloat64Pointer is required",
		"FieldRequiredBoolPointer is required",
		"FieldRequiredStringSlicePointer must not be empty",
		"FieldRequiredIntSlicePointer must not be empty",
		"FieldRequiredInt8SlicePointer must not be empty",
		"FieldRequiredInt16SlicePointer must not be empty",
		"FieldRequiredInt32SlicePointer must not be empty",
		"FieldRequiredInt64SlicePointer must not be empty",
		"FieldRequiredUintSlicePointer must not be empty",
		"FieldRequiredUint8SlicePointer must not be empty",
		"FieldRequiredUint16SlicePointer must not be empty",
		"FieldRequiredUint32SlicePointer must not be empty",
		"FieldRequiredUint64SlicePointer must not be empty",
		"FieldRequiredFloat32SlicePointer must not be empty",
		"FieldRequiredFloat64SlicePointer must not be empty",
		"FieldRequiredBoolSlicePointer must not be empty",
		"FieldRequiredStringArrayPointer must not be empty",
		"FieldRequiredIntArrayPointer must not be empty",
		"FieldRequiredInt8ArrayPointer must not be empty",
		"FieldRequiredInt16ArrayPointer must not be empty",
		"FieldRequiredInt32ArrayPointer must not be empty",
		"FieldRequiredInt64ArrayPointer must not be empty",
		"FieldRequiredUintArrayPointer must not be empty",
		"FieldRequiredUint8ArrayPointer must not be empty",
		"FieldRequiredUint16ArrayPointer must not be empty",
		"FieldRequiredUint32ArrayPointer must not be empty",
		"FieldRequiredUint64ArrayPointer must not be empty",
		"FieldRequiredFloat32ArrayPointer must not be empty",
		"FieldRequiredFloat64ArrayPointer must not be empty",
		"FieldRequiredBoolArrayPointer must not be empty",
		"FieldRequiredStringMapPointer must not be empty",
		"FieldRequiredIntMapPointer must not be empty",
		"FieldRequiredInt8MapPointer must not be empty",
		"FieldRequiredInt16MapPointer must not be empty",
		"FieldRequiredInt32MapPointer must not be empty",
		"FieldRequiredInt64MapPointer must not be empty",
		"FieldRequiredUintMapPointer must not be empty",
		"FieldRequiredUint8MapPointer must not be empty",
		"FieldRequiredUint16MapPointer must not be empty",
		"FieldRequiredUint32MapPointer must not be empty",
		"FieldRequiredUint64MapPointer must not be empty",
		"FieldRequiredFloat32MapPointer must not be empty",
		"FieldRequiredFloat64MapPointer must not be empty",
		"FieldRequiredBoolMapPointer must not be empty",
	}
	errs = requiredStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldRequiredStringPointer string = ""
	var InvalidFieldRequiredIntPointer int = 0
	var InvalidFieldRequiredInt8Pointer int8 = 0
	var InvalidFieldRequiredInt16Pointer int16 = 0
	var InvalidFieldRequiredInt32Pointer int32 = 0
	var InvalidFieldRequiredInt64Pointer int64 = 0
	var InvalidFieldRequiredUintPointer uint = 0
	var InvalidFieldRequiredUint8Pointer uint8 = 0
	var InvalidFieldRequiredUint16Pointer uint16 = 0
	var InvalidFieldRequiredUint32Pointer uint32 = 0
	var InvalidFieldRequiredUint64Pointer uint64 = 0
	var InvalidFieldRequiredFloat32Pointer float32 = 0
	var InvalidFieldRequiredFloat64Pointer float64 = 0
	var InvalidFieldRequiredBoolPointer bool = false
	var InvalidFieldRequiredStringSlicePointer []string = []string{}
	var InvalidFieldRequiredIntSlicePointer []int = []int{}
	var InvalidFieldRequiredInt8SlicePointer []int8 = []int8{}
	var InvalidFieldRequiredInt16SlicePointer []int16 = []int16{}
	var InvalidFieldRequiredInt32SlicePointer []int32 = []int32{}
	var InvalidFieldRequiredInt64SlicePointer []int64 = []int64{}
	var InvalidFieldRequiredUintSlicePointer []uint = []uint{}
	var InvalidFieldRequiredUint8SlicePointer []uint8 = []uint8{}
	var InvalidFieldRequiredUint16SlicePointer []uint16 = []uint16{}
	var InvalidFieldRequiredUint32SlicePointer []uint32 = []uint32{}
	var InvalidFieldRequiredUint64SlicePointer []uint64 = []uint64{}
	var InvalidFieldRequiredFloat32SlicePointer []float32 = []float32{}
	var InvalidFieldRequiredFloat64SlicePointer []float64 = []float64{}
	var InvalidFieldRequiredBoolSlicePointer []bool = []bool{}

	var InvalidFieldRequiredStringMapPointer map[string]string = map[string]string{}
	var InvalidFieldRequiredIntMapPointer map[int]int = map[int]int{}
	var InvalidFieldRequiredInt8MapPointer map[int8]int8 = map[int8]int8{}
	var InvalidFieldRequiredInt16MapPointer map[int16]int16 = map[int16]int16{}
	var InvalidFieldRequiredInt32MapPointer map[int32]int32 = map[int32]int32{}
	var InvalidFieldRequiredInt64MapPointer map[int64]int64 = map[int64]int64{}
	var InvalidFieldRequiredUintMapPointer map[uint]uint = map[uint]uint{}
	var InvalidFieldRequiredUint8MapPointer map[uint8]uint8 = map[uint8]uint8{}
	var InvalidFieldRequiredUint16MapPointer map[uint16]uint16 = map[uint16]uint16{}
	var InvalidFieldRequiredUint32MapPointer map[uint32]uint32 = map[uint32]uint32{}
	var InvalidFieldRequiredUint64MapPointer map[uint64]uint64 = map[uint64]uint64{}
	var InvalidFieldRequiredFloat32MapPointer map[float32]float32 = map[float32]float32{}
	var InvalidFieldRequiredFloat64MapPointer map[float64]float64 = map[float64]float64{}
	var InvalidFieldRequiredBoolMapPointer map[bool]bool = map[bool]bool{}

	v = &requiredStructFieldsPointer{}
	v.FieldRequiredStringPointer = &InvalidFieldRequiredStringPointer
	v.FieldRequiredIntPointer = &InvalidFieldRequiredIntPointer
	v.FieldRequiredInt8Pointer = &InvalidFieldRequiredInt8Pointer
	v.FieldRequiredInt16Pointer = &InvalidFieldRequiredInt16Pointer
	v.FieldRequiredInt32Pointer = &InvalidFieldRequiredInt32Pointer
	v.FieldRequiredInt64Pointer = &InvalidFieldRequiredInt64Pointer
	v.FieldRequiredUintPointer = &InvalidFieldRequiredUintPointer
	v.FieldRequiredUint8Pointer = &InvalidFieldRequiredUint8Pointer
	v.FieldRequiredUint16Pointer = &InvalidFieldRequiredUint16Pointer
	v.FieldRequiredUint32Pointer = &InvalidFieldRequiredUint32Pointer
	v.FieldRequiredUint64Pointer = &InvalidFieldRequiredUint64Pointer
	v.FieldRequiredFloat32Pointer = &InvalidFieldRequiredFloat32Pointer
	v.FieldRequiredFloat64Pointer = &InvalidFieldRequiredFloat64Pointer
	v.FieldRequiredBoolPointer = &InvalidFieldRequiredBoolPointer
	v.FieldRequiredStringSlicePointer = &InvalidFieldRequiredStringSlicePointer
	v.FieldRequiredIntSlicePointer = &InvalidFieldRequiredIntSlicePointer
	v.FieldRequiredInt8SlicePointer = &InvalidFieldRequiredInt8SlicePointer
	v.FieldRequiredInt16SlicePointer = &InvalidFieldRequiredInt16SlicePointer
	v.FieldRequiredInt32SlicePointer = &InvalidFieldRequiredInt32SlicePointer
	v.FieldRequiredInt64SlicePointer = &InvalidFieldRequiredInt64SlicePointer
	v.FieldRequiredUintSlicePointer = &InvalidFieldRequiredUintSlicePointer
	v.FieldRequiredUint8SlicePointer = &InvalidFieldRequiredUint8SlicePointer
	v.FieldRequiredUint16SlicePointer = &InvalidFieldRequiredUint16SlicePointer
	v.FieldRequiredUint32SlicePointer = &InvalidFieldRequiredUint32SlicePointer
	v.FieldRequiredUint64SlicePointer = &InvalidFieldRequiredUint64SlicePointer
	v.FieldRequiredFloat32SlicePointer = &InvalidFieldRequiredFloat32SlicePointer
	v.FieldRequiredFloat64SlicePointer = &InvalidFieldRequiredFloat64SlicePointer
	v.FieldRequiredBoolSlicePointer = &InvalidFieldRequiredBoolSlicePointer

	v.FieldRequiredStringMapPointer = &InvalidFieldRequiredStringMapPointer
	v.FieldRequiredIntMapPointer = &InvalidFieldRequiredIntMapPointer
	v.FieldRequiredInt8MapPointer = &InvalidFieldRequiredInt8MapPointer
	v.FieldRequiredInt16MapPointer = &InvalidFieldRequiredInt16MapPointer
	v.FieldRequiredInt32MapPointer = &InvalidFieldRequiredInt32MapPointer
	v.FieldRequiredInt64MapPointer = &InvalidFieldRequiredInt64MapPointer
	v.FieldRequiredUintMapPointer = &InvalidFieldRequiredUintMapPointer
	v.FieldRequiredUint8MapPointer = &InvalidFieldRequiredUint8MapPointer
	v.FieldRequiredUint16MapPointer = &InvalidFieldRequiredUint16MapPointer
	v.FieldRequiredUint32MapPointer = &InvalidFieldRequiredUint32MapPointer
	v.FieldRequiredUint64MapPointer = &InvalidFieldRequiredUint64MapPointer
	v.FieldRequiredFloat32MapPointer = &InvalidFieldRequiredFloat32MapPointer
	v.FieldRequiredFloat64MapPointer = &InvalidFieldRequiredFloat64MapPointer
	v.FieldRequiredBoolMapPointer = &InvalidFieldRequiredBoolMapPointer

	errs = requiredStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldRequiredStringPointer string = "abcde"
	var ValidFieldRequiredIntPointer int = 32
	var ValidFieldRequiredInt8Pointer int8 = 32
	var ValidFieldRequiredInt16Pointer int16 = 32
	var ValidFieldRequiredInt32Pointer int32 = 32
	var ValidFieldRequiredInt64Pointer int64 = 32
	var ValidFieldRequiredUintPointer uint = 32
	var ValidFieldRequiredUint8Pointer uint8 = 32
	var ValidFieldRequiredUint16Pointer uint16 = 32
	var ValidFieldRequiredUint32Pointer uint32 = 32
	var ValidFieldRequiredUint64Pointer uint64 = 32
	var ValidFieldRequiredFloat32Pointer float32 = 12.34
	var ValidFieldRequiredFloat64Pointer float64 = 12.34
	var ValidFieldRequiredBoolPointer bool = true
	var ValidFieldRequiredStringSlicePointer []string = []string{"abcde"}
	var ValidFieldRequiredIntSlicePointer []int = []int{32}
	var ValidFieldRequiredInt8SlicePointer []int8 = []int8{32}
	var ValidFieldRequiredInt16SlicePointer []int16 = []int16{32}
	var ValidFieldRequiredInt32SlicePointer []int32 = []int32{32}
	var ValidFieldRequiredInt64SlicePointer []int64 = []int64{32}
	var ValidFieldRequiredUintSlicePointer []uint = []uint{32}
	var ValidFieldRequiredUint8SlicePointer []uint8 = []uint8{32}
	var ValidFieldRequiredUint16SlicePointer []uint16 = []uint16{32}
	var ValidFieldRequiredUint32SlicePointer []uint32 = []uint32{32}
	var ValidFieldRequiredUint64SlicePointer []uint64 = []uint64{32}
	var ValidFieldRequiredFloat32SlicePointer []float32 = []float32{12.34}
	var ValidFieldRequiredFloat64SlicePointer []float64 = []float64{12.34}
	var ValidFieldRequiredBoolSlicePointer []bool = []bool{true}
	var ValidFieldRequiredStringArrayPointer [3]string = [3]string{"abcde"}
	var ValidFieldRequiredIntArrayPointer [3]int = [3]int{32}
	var ValidFieldRequiredInt8ArrayPointer [3]int8 = [3]int8{32}
	var ValidFieldRequiredInt16ArrayPointer [3]int16 = [3]int16{32}
	var ValidFieldRequiredInt32ArrayPointer [3]int32 = [3]int32{32}
	var ValidFieldRequiredInt64ArrayPointer [3]int64 = [3]int64{32}
	var ValidFieldRequiredUintArrayPointer [3]uint = [3]uint{32}
	var ValidFieldRequiredUint8ArrayPointer [3]uint8 = [3]uint8{32}
	var ValidFieldRequiredUint16ArrayPointer [3]uint16 = [3]uint16{32}
	var ValidFieldRequiredUint32ArrayPointer [3]uint32 = [3]uint32{32}
	var ValidFieldRequiredUint64ArrayPointer [3]uint64 = [3]uint64{32}
	var ValidFieldRequiredFloat32ArrayPointer [3]float32 = [3]float32{12.34}
	var ValidFieldRequiredFloat64ArrayPointer [3]float64 = [3]float64{12.34}
	var ValidFieldRequiredBoolArrayPointer [3]bool = [3]bool{true}
	var ValidFieldRequiredStringMapPointer map[string]string = map[string]string{"abcde": "value"}
	var ValidFieldRequiredIntMapPointer map[int]int = map[int]int{32: 64}
	var ValidFieldRequiredInt8MapPointer map[int8]int8 = map[int8]int8{32: 64}
	var ValidFieldRequiredInt16MapPointer map[int16]int16 = map[int16]int16{32: 64}
	var ValidFieldRequiredInt32MapPointer map[int32]int32 = map[int32]int32{32: 64}
	var ValidFieldRequiredInt64MapPointer map[int64]int64 = map[int64]int64{32: 64}
	var ValidFieldRequiredUintMapPointer map[uint]uint = map[uint]uint{32: 64}
	var ValidFieldRequiredUint8MapPointer map[uint8]uint8 = map[uint8]uint8{32: 64}
	var ValidFieldRequiredUint16MapPointer map[uint16]uint16 = map[uint16]uint16{32: 64}
	var ValidFieldRequiredUint32MapPointer map[uint32]uint32 = map[uint32]uint32{32: 64}
	var ValidFieldRequiredUint64MapPointer map[uint64]uint64 = map[uint64]uint64{32: 64}
	var ValidFieldRequiredFloat32MapPointer map[float32]float32 = map[float32]float32{12.34: 56.78}
	var ValidFieldRequiredFloat64MapPointer map[float64]float64 = map[float64]float64{12.34: 56.78}
	var ValidFieldRequiredBoolMapPointer map[bool]bool = map[bool]bool{true: true}

	v = &requiredStructFieldsPointer{}
	v.FieldRequiredStringPointer = &ValidFieldRequiredStringPointer
	v.FieldRequiredIntPointer = &ValidFieldRequiredIntPointer
	v.FieldRequiredInt8Pointer = &ValidFieldRequiredInt8Pointer
	v.FieldRequiredInt16Pointer = &ValidFieldRequiredInt16Pointer
	v.FieldRequiredInt32Pointer = &ValidFieldRequiredInt32Pointer
	v.FieldRequiredInt64Pointer = &ValidFieldRequiredInt64Pointer
	v.FieldRequiredUintPointer = &ValidFieldRequiredUintPointer
	v.FieldRequiredUint8Pointer = &ValidFieldRequiredUint8Pointer
	v.FieldRequiredUint16Pointer = &ValidFieldRequiredUint16Pointer
	v.FieldRequiredUint32Pointer = &ValidFieldRequiredUint32Pointer
	v.FieldRequiredUint64Pointer = &ValidFieldRequiredUint64Pointer
	v.FieldRequiredFloat32Pointer = &ValidFieldRequiredFloat32Pointer
	v.FieldRequiredFloat64Pointer = &ValidFieldRequiredFloat64Pointer
	v.FieldRequiredBoolPointer = &ValidFieldRequiredBoolPointer
	v.FieldRequiredStringSlicePointer = &ValidFieldRequiredStringSlicePointer
	v.FieldRequiredIntSlicePointer = &ValidFieldRequiredIntSlicePointer
	v.FieldRequiredInt8SlicePointer = &ValidFieldRequiredInt8SlicePointer
	v.FieldRequiredInt16SlicePointer = &ValidFieldRequiredInt16SlicePointer
	v.FieldRequiredInt32SlicePointer = &ValidFieldRequiredInt32SlicePointer
	v.FieldRequiredInt64SlicePointer = &ValidFieldRequiredInt64SlicePointer
	v.FieldRequiredUintSlicePointer = &ValidFieldRequiredUintSlicePointer
	v.FieldRequiredUint8SlicePointer = &ValidFieldRequiredUint8SlicePointer
	v.FieldRequiredUint16SlicePointer = &ValidFieldRequiredUint16SlicePointer
	v.FieldRequiredUint32SlicePointer = &ValidFieldRequiredUint32SlicePointer
	v.FieldRequiredUint64SlicePointer = &ValidFieldRequiredUint64SlicePointer
	v.FieldRequiredFloat32SlicePointer = &ValidFieldRequiredFloat32SlicePointer
	v.FieldRequiredFloat64SlicePointer = &ValidFieldRequiredFloat64SlicePointer
	v.FieldRequiredBoolSlicePointer = &ValidFieldRequiredBoolSlicePointer
	v.FieldRequiredStringArrayPointer = &ValidFieldRequiredStringArrayPointer
	v.FieldRequiredIntArrayPointer = &ValidFieldRequiredIntArrayPointer
	v.FieldRequiredInt8ArrayPointer = &ValidFieldRequiredInt8ArrayPointer
	v.FieldRequiredInt16ArrayPointer = &ValidFieldRequiredInt16ArrayPointer
	v.FieldRequiredInt32ArrayPointer = &ValidFieldRequiredInt32ArrayPointer
	v.FieldRequiredInt64ArrayPointer = &ValidFieldRequiredInt64ArrayPointer
	v.FieldRequiredUintArrayPointer = &ValidFieldRequiredUintArrayPointer
	v.FieldRequiredUint8ArrayPointer = &ValidFieldRequiredUint8ArrayPointer
	v.FieldRequiredUint16ArrayPointer = &ValidFieldRequiredUint16ArrayPointer
	v.FieldRequiredUint32ArrayPointer = &ValidFieldRequiredUint32ArrayPointer
	v.FieldRequiredUint64ArrayPointer = &ValidFieldRequiredUint64ArrayPointer
	v.FieldRequiredFloat32ArrayPointer = &ValidFieldRequiredFloat32ArrayPointer
	v.FieldRequiredFloat64ArrayPointer = &ValidFieldRequiredFloat64ArrayPointer
	v.FieldRequiredBoolArrayPointer = &ValidFieldRequiredBoolArrayPointer
	v.FieldRequiredStringMapPointer = &ValidFieldRequiredStringMapPointer
	v.FieldRequiredIntMapPointer = &ValidFieldRequiredIntMapPointer
	v.FieldRequiredInt8MapPointer = &ValidFieldRequiredInt8MapPointer
	v.FieldRequiredInt16MapPointer = &ValidFieldRequiredInt16MapPointer
	v.FieldRequiredInt32MapPointer = &ValidFieldRequiredInt32MapPointer
	v.FieldRequiredInt64MapPointer = &ValidFieldRequiredInt64MapPointer
	v.FieldRequiredUintMapPointer = &ValidFieldRequiredUintMapPointer
	v.FieldRequiredUint8MapPointer = &ValidFieldRequiredUint8MapPointer
	v.FieldRequiredUint16MapPointer = &ValidFieldRequiredUint16MapPointer
	v.FieldRequiredUint32MapPointer = &ValidFieldRequiredUint32MapPointer
	v.FieldRequiredUint64MapPointer = &ValidFieldRequiredUint64MapPointer
	v.FieldRequiredFloat32MapPointer = &ValidFieldRequiredFloat32MapPointer
	v.FieldRequiredFloat64MapPointer = &ValidFieldRequiredFloat64MapPointer
	v.FieldRequiredBoolMapPointer = &ValidFieldRequiredBoolMapPointer

	expectedMsgErrors = nil
	errs = requiredStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("requiredStructFieldsPointer types tests ok")
}

type eqStructFieldsPointer struct {
	FieldEqStringPointer  *string  `valid:"eq=abcde"`
	FieldEqIntPointer     *int     `valid:"eq=32"`
	FieldEqInt8Pointer    *int8    `valid:"eq=32"`
	FieldEqInt16Pointer   *int16   `valid:"eq=32"`
	FieldEqInt32Pointer   *int32   `valid:"eq=32"`
	FieldEqInt64Pointer   *int64   `valid:"eq=32"`
	FieldEqUintPointer    *uint    `valid:"eq=32"`
	FieldEqUint8Pointer   *uint8   `valid:"eq=32"`
	FieldEqUint16Pointer  *uint16  `valid:"eq=32"`
	FieldEqUint32Pointer  *uint32  `valid:"eq=32"`
	FieldEqUint64Pointer  *uint64  `valid:"eq=32"`
	FieldEqFloat32Pointer *float32 `valid:"eq=12.34"`
	FieldEqFloat64Pointer *float64 `valid:"eq=12.34"`
	FieldEqBoolPointer    *bool    `valid:"eq=true"`
}

func eqStructFieldsPointerTests() {
	log.Println("starting eqStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &eqStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldEqStringPointer must be equal to 'abcde'",
		"FieldEqIntPointer must be equal to 32",
		"FieldEqInt8Pointer must be equal to 32",
		"FieldEqInt16Pointer must be equal to 32",
		"FieldEqInt32Pointer must be equal to 32",
		"FieldEqInt64Pointer must be equal to 32",
		"FieldEqUintPointer must be equal to 32",
		"FieldEqUint8Pointer must be equal to 32",
		"FieldEqUint16Pointer must be equal to 32",
		"FieldEqUint32Pointer must be equal to 32",
		"FieldEqUint64Pointer must be equal to 32",
		"FieldEqFloat32Pointer must be equal to 12.34",
		"FieldEqFloat64Pointer must be equal to 12.34",
		"FieldEqBoolPointer must be equal to true",
	}
	errs = eqStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldEqStringPointer string = "fghij"
	var InvalidFieldEqIntPointer int = 64
	var InvalidFieldEqInt8Pointer int8 = 64
	var InvalidFieldEqInt16Pointer int16 = 64
	var InvalidFieldEqInt32Pointer int32 = 64
	var InvalidFieldEqInt64Pointer int64 = 64
	var InvalidFieldEqUintPointer uint = 64
	var InvalidFieldEqUint8Pointer uint8 = 64
	var InvalidFieldEqUint16Pointer uint16 = 64
	var InvalidFieldEqUint32Pointer uint32 = 64
	var InvalidFieldEqUint64Pointer uint64 = 64
	var InvalidFieldEqFloat32Pointer float32 = 34.56
	var InvalidFieldEqFloat64Pointer float64 = 34.56
	var InvalidFieldEqBoolPointer bool = false

	v = &eqStructFieldsPointer{}
	v.FieldEqStringPointer = &InvalidFieldEqStringPointer
	v.FieldEqIntPointer = &InvalidFieldEqIntPointer
	v.FieldEqInt8Pointer = &InvalidFieldEqInt8Pointer
	v.FieldEqInt16Pointer = &InvalidFieldEqInt16Pointer
	v.FieldEqInt32Pointer = &InvalidFieldEqInt32Pointer
	v.FieldEqInt64Pointer = &InvalidFieldEqInt64Pointer
	v.FieldEqUintPointer = &InvalidFieldEqUintPointer
	v.FieldEqUint8Pointer = &InvalidFieldEqUint8Pointer
	v.FieldEqUint16Pointer = &InvalidFieldEqUint16Pointer
	v.FieldEqUint32Pointer = &InvalidFieldEqUint32Pointer
	v.FieldEqUint64Pointer = &InvalidFieldEqUint64Pointer
	v.FieldEqFloat32Pointer = &InvalidFieldEqFloat32Pointer
	v.FieldEqFloat64Pointer = &InvalidFieldEqFloat64Pointer
	v.FieldEqBoolPointer = &InvalidFieldEqBoolPointer

	errs = eqStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldEqStringPointer string = "abcde"
	var ValidFieldEqIntPointer int = 32
	var ValidFieldEqInt8Pointer int8 = 32
	var ValidFieldEqInt16Pointer int16 = 32
	var ValidFieldEqInt32Pointer int32 = 32
	var ValidFieldEqInt64Pointer int64 = 32
	var ValidFieldEqUintPointer uint = 32
	var ValidFieldEqUint8Pointer uint8 = 32
	var ValidFieldEqUint16Pointer uint16 = 32
	var ValidFieldEqUint32Pointer uint32 = 32
	var ValidFieldEqUint64Pointer uint64 = 32
	var ValidFieldEqFloat32Pointer float32 = 12.34
	var ValidFieldEqFloat64Pointer float64 = 12.34
	var ValidFieldEqBoolPointer bool = true

	v = &eqStructFieldsPointer{}
	v.FieldEqStringPointer = &ValidFieldEqStringPointer
	v.FieldEqIntPointer = &ValidFieldEqIntPointer
	v.FieldEqInt8Pointer = &ValidFieldEqInt8Pointer
	v.FieldEqInt16Pointer = &ValidFieldEqInt16Pointer
	v.FieldEqInt32Pointer = &ValidFieldEqInt32Pointer
	v.FieldEqInt64Pointer = &ValidFieldEqInt64Pointer
	v.FieldEqUintPointer = &ValidFieldEqUintPointer
	v.FieldEqUint8Pointer = &ValidFieldEqUint8Pointer
	v.FieldEqUint16Pointer = &ValidFieldEqUint16Pointer
	v.FieldEqUint32Pointer = &ValidFieldEqUint32Pointer
	v.FieldEqUint64Pointer = &ValidFieldEqUint64Pointer
	v.FieldEqFloat32Pointer = &ValidFieldEqFloat32Pointer
	v.FieldEqFloat64Pointer = &ValidFieldEqFloat64Pointer
	v.FieldEqBoolPointer = &ValidFieldEqBoolPointer

	expectedMsgErrors = nil
	errs = eqStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("eqStructFieldsPointer types tests ok")
}

type neqStructFieldsPointer struct {
	FieldNeqStringPointer  *string  `valid:"neq=abcde"`
	FieldNeqIntPointer     *int     `valid:"neq=32"`
	FieldNeqInt8Pointer    *int8    `valid:"neq=32"`
	FieldNeqInt16Pointer   *int16   `valid:"neq=32"`
	FieldNeqInt32Pointer   *int32   `valid:"neq=32"`
	FieldNeqInt64Pointer   *int64   `valid:"neq=32"`
	FieldNeqUintPointer    *uint    `valid:"neq=32"`
	FieldNeqUint8Pointer   *uint8   `valid:"neq=32"`
	FieldNeqUint16Pointer  *uint16  `valid:"neq=32"`
	FieldNeqUint32Pointer  *uint32  `valid:"neq=32"`
	FieldNeqUint64Pointer  *uint64  `valid:"neq=32"`
	FieldNeqFloat32Pointer *float32 `valid:"neq=12.34"`
	FieldNeqFloat64Pointer *float64 `valid:"neq=12.34"`
	FieldNeqBoolPointer    *bool    `valid:"neq=true"`
}

func neqStructFieldsPointerTests() {
	log.Println("starting neqStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &neqStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldNeqStringPointer must not be equal to 'abcde'",
		"FieldNeqIntPointer must not be equal to 32",
		"FieldNeqInt8Pointer must not be equal to 32",
		"FieldNeqInt16Pointer must not be equal to 32",
		"FieldNeqInt32Pointer must not be equal to 32",
		"FieldNeqInt64Pointer must not be equal to 32",
		"FieldNeqUintPointer must not be equal to 32",
		"FieldNeqUint8Pointer must not be equal to 32",
		"FieldNeqUint16Pointer must not be equal to 32",
		"FieldNeqUint32Pointer must not be equal to 32",
		"FieldNeqUint64Pointer must not be equal to 32",
		"FieldNeqFloat32Pointer must not be equal to 12.34",
		"FieldNeqFloat64Pointer must not be equal to 12.34",
		"FieldNeqBoolPointer must not be equal to true",
	}
	errs = neqStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldNeqStringPointer string = "abcde"
	var InvalidFieldNeqIntPointer int = 32
	var InvalidFieldNeqInt8Pointer int8 = 32
	var InvalidFieldNeqInt16Pointer int16 = 32
	var InvalidFieldNeqInt32Pointer int32 = 32
	var InvalidFieldNeqInt64Pointer int64 = 32
	var InvalidFieldNeqUintPointer uint = 32
	var InvalidFieldNeqUint8Pointer uint8 = 32
	var InvalidFieldNeqUint16Pointer uint16 = 32
	var InvalidFieldNeqUint32Pointer uint32 = 32
	var InvalidFieldNeqUint64Pointer uint64 = 32
	var InvalidFieldNeqFloat32Pointer float32 = 12.34
	var InvalidFieldNeqFloat64Pointer float64 = 12.34
	var InvalidFieldNeqBoolPointer bool = true

	v = &neqStructFieldsPointer{}
	v.FieldNeqStringPointer = &InvalidFieldNeqStringPointer
	v.FieldNeqIntPointer = &InvalidFieldNeqIntPointer
	v.FieldNeqInt8Pointer = &InvalidFieldNeqInt8Pointer
	v.FieldNeqInt16Pointer = &InvalidFieldNeqInt16Pointer
	v.FieldNeqInt32Pointer = &InvalidFieldNeqInt32Pointer
	v.FieldNeqInt64Pointer = &InvalidFieldNeqInt64Pointer
	v.FieldNeqUintPointer = &InvalidFieldNeqUintPointer
	v.FieldNeqUint8Pointer = &InvalidFieldNeqUint8Pointer
	v.FieldNeqUint16Pointer = &InvalidFieldNeqUint16Pointer
	v.FieldNeqUint32Pointer = &InvalidFieldNeqUint32Pointer
	v.FieldNeqUint64Pointer = &InvalidFieldNeqUint64Pointer
	v.FieldNeqFloat32Pointer = &InvalidFieldNeqFloat32Pointer
	v.FieldNeqFloat64Pointer = &InvalidFieldNeqFloat64Pointer
	v.FieldNeqBoolPointer = &InvalidFieldNeqBoolPointer

	errs = neqStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldNeqStringPointer string = "fghij"
	var ValidFieldNeqIntPointer int = 64
	var ValidFieldNeqInt8Pointer int8 = 64
	var ValidFieldNeqInt16Pointer int16 = 64
	var ValidFieldNeqInt32Pointer int32 = 64
	var ValidFieldNeqInt64Pointer int64 = 64
	var ValidFieldNeqUintPointer uint = 64
	var ValidFieldNeqUint8Pointer uint8 = 64
	var ValidFieldNeqUint16Pointer uint16 = 64
	var ValidFieldNeqUint32Pointer uint32 = 64
	var ValidFieldNeqUint64Pointer uint64 = 64
	var ValidFieldNeqFloat32Pointer float32 = 34.56
	var ValidFieldNeqFloat64Pointer float64 = 34.56
	var ValidFieldNeqBoolPointer bool = false

	v = &neqStructFieldsPointer{}
	v.FieldNeqStringPointer = &ValidFieldNeqStringPointer
	v.FieldNeqIntPointer = &ValidFieldNeqIntPointer
	v.FieldNeqInt8Pointer = &ValidFieldNeqInt8Pointer
	v.FieldNeqInt16Pointer = &ValidFieldNeqInt16Pointer
	v.FieldNeqInt32Pointer = &ValidFieldNeqInt32Pointer
	v.FieldNeqInt64Pointer = &ValidFieldNeqInt64Pointer
	v.FieldNeqUintPointer = &ValidFieldNeqUintPointer
	v.FieldNeqUint8Pointer = &ValidFieldNeqUint8Pointer
	v.FieldNeqUint16Pointer = &ValidFieldNeqUint16Pointer
	v.FieldNeqUint32Pointer = &ValidFieldNeqUint32Pointer
	v.FieldNeqUint64Pointer = &ValidFieldNeqUint64Pointer
	v.FieldNeqFloat32Pointer = &ValidFieldNeqFloat32Pointer
	v.FieldNeqFloat64Pointer = &ValidFieldNeqFloat64Pointer
	v.FieldNeqBoolPointer = &ValidFieldNeqBoolPointer

	expectedMsgErrors = nil
	errs = neqStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("neqStructFieldsPointer types tests ok")
}

type gtStructFieldsPointer struct {
	FieldGtIntPointer     *int     `valid:"gt=32"`
	FieldGtInt8Pointer    *int8    `valid:"gt=32"`
	FieldGtInt16Pointer   *int16   `valid:"gt=32"`
	FieldGtInt32Pointer   *int32   `valid:"gt=32"`
	FieldGtInt64Pointer   *int64   `valid:"gt=32"`
	FieldGtUintPointer    *uint    `valid:"gt=32"`
	FieldGtUint8Pointer   *uint8   `valid:"gt=32"`
	FieldGtUint16Pointer  *uint16  `valid:"gt=32"`
	FieldGtUint32Pointer  *uint32  `valid:"gt=32"`
	FieldGtUint64Pointer  *uint64  `valid:"gt=32"`
	FieldGtFloat32Pointer *float32 `valid:"gt=12.34"`
	FieldGtFloat64Pointer *float64 `valid:"gt=12.34"`
}

func gtStructFieldsPointerTests() {
	log.Println("starting gtStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &gtStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldGtIntPointer must be > 32",
		"FieldGtInt8Pointer must be > 32",
		"FieldGtInt16Pointer must be > 32",
		"FieldGtInt32Pointer must be > 32",
		"FieldGtInt64Pointer must be > 32",
		"FieldGtUintPointer must be > 32",
		"FieldGtUint8Pointer must be > 32",
		"FieldGtUint16Pointer must be > 32",
		"FieldGtUint32Pointer must be > 32",
		"FieldGtUint64Pointer must be > 32",
		"FieldGtFloat32Pointer must be > 12.34",
		"FieldGtFloat64Pointer must be > 12.34",
	}
	errs = gtStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldGtIntPointer int = 31
	var InvalidFieldGtInt8Pointer int8 = 31
	var InvalidFieldGtInt16Pointer int16 = 31
	var InvalidFieldGtInt32Pointer int32 = 31
	var InvalidFieldGtInt64Pointer int64 = 31
	var InvalidFieldGtUintPointer uint = 31
	var InvalidFieldGtUint8Pointer uint8 = 31
	var InvalidFieldGtUint16Pointer uint16 = 31
	var InvalidFieldGtUint32Pointer uint32 = 31
	var InvalidFieldGtUint64Pointer uint64 = 31
	var InvalidFieldGtFloat32Pointer float32 = 12.34
	var InvalidFieldGtFloat64Pointer float64 = 12.34

	v = &gtStructFieldsPointer{}
	v.FieldGtIntPointer = &InvalidFieldGtIntPointer
	v.FieldGtInt8Pointer = &InvalidFieldGtInt8Pointer
	v.FieldGtInt16Pointer = &InvalidFieldGtInt16Pointer
	v.FieldGtInt32Pointer = &InvalidFieldGtInt32Pointer
	v.FieldGtInt64Pointer = &InvalidFieldGtInt64Pointer
	v.FieldGtUintPointer = &InvalidFieldGtUintPointer
	v.FieldGtUint8Pointer = &InvalidFieldGtUint8Pointer
	v.FieldGtUint16Pointer = &InvalidFieldGtUint16Pointer
	v.FieldGtUint32Pointer = &InvalidFieldGtUint32Pointer
	v.FieldGtUint64Pointer = &InvalidFieldGtUint64Pointer
	v.FieldGtFloat32Pointer = &InvalidFieldGtFloat32Pointer
	v.FieldGtFloat64Pointer = &InvalidFieldGtFloat64Pointer

	errs = gtStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldGtIntPointer int = 33
	var ValidFieldGtInt8Pointer int8 = 33
	var ValidFieldGtInt16Pointer int16 = 33
	var ValidFieldGtInt32Pointer int32 = 33
	var ValidFieldGtInt64Pointer int64 = 33
	var ValidFieldGtUintPointer uint = 33
	var ValidFieldGtUint8Pointer uint8 = 33
	var ValidFieldGtUint16Pointer uint16 = 33
	var ValidFieldGtUint32Pointer uint32 = 33
	var ValidFieldGtUint64Pointer uint64 = 33
	var ValidFieldGtFloat32Pointer float32 = 12.35
	var ValidFieldGtFloat64Pointer float64 = 12.35

	v = &gtStructFieldsPointer{}
	v.FieldGtIntPointer = &ValidFieldGtIntPointer
	v.FieldGtInt8Pointer = &ValidFieldGtInt8Pointer
	v.FieldGtInt16Pointer = &ValidFieldGtInt16Pointer
	v.FieldGtInt32Pointer = &ValidFieldGtInt32Pointer
	v.FieldGtInt64Pointer = &ValidFieldGtInt64Pointer
	v.FieldGtUintPointer = &ValidFieldGtUintPointer
	v.FieldGtUint8Pointer = &ValidFieldGtUint8Pointer
	v.FieldGtUint16Pointer = &ValidFieldGtUint16Pointer
	v.FieldGtUint32Pointer = &ValidFieldGtUint32Pointer
	v.FieldGtUint64Pointer = &ValidFieldGtUint64Pointer
	v.FieldGtFloat32Pointer = &ValidFieldGtFloat32Pointer
	v.FieldGtFloat64Pointer = &ValidFieldGtFloat64Pointer

	expectedMsgErrors = nil
	errs = gtStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("gtStructFieldsPointer types tests ok")
}

type gteStructFieldsPointer struct {
	FieldGteIntPointer     *int     `valid:"gte=32"`
	FieldGteInt8Pointer    *int8    `valid:"gte=32"`
	FieldGteInt16Pointer   *int16   `valid:"gte=32"`
	FieldGteInt32Pointer   *int32   `valid:"gte=32"`
	FieldGteInt64Pointer   *int64   `valid:"gte=32"`
	FieldGteUintPointer    *uint    `valid:"gte=32"`
	FieldGteUint8Pointer   *uint8   `valid:"gte=32"`
	FieldGteUint16Pointer  *uint16  `valid:"gte=32"`
	FieldGteUint32Pointer  *uint32  `valid:"gte=32"`
	FieldGteUint64Pointer  *uint64  `valid:"gte=32"`
	FieldGteFloat32Pointer *float32 `valid:"gte=12.34"`
	FieldGteFloat64Pointer *float64 `valid:"gte=12.34"`
}

func gteStructFieldsPointerTests() {
	log.Println("starting gteStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &gteStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldGteIntPointer must be >= 32",
		"FieldGteInt8Pointer must be >= 32",
		"FieldGteInt16Pointer must be >= 32",
		"FieldGteInt32Pointer must be >= 32",
		"FieldGteInt64Pointer must be >= 32",
		"FieldGteUintPointer must be >= 32",
		"FieldGteUint8Pointer must be >= 32",
		"FieldGteUint16Pointer must be >= 32",
		"FieldGteUint32Pointer must be >= 32",
		"FieldGteUint64Pointer must be >= 32",
		"FieldGteFloat32Pointer must be >= 12.34",
		"FieldGteFloat64Pointer must be >= 12.34",
	}
	errs = gteStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldGteIntPointer int = 31
	var InvalidFieldGteInt8Pointer int8 = 31
	var InvalidFieldGteInt16Pointer int16 = 31
	var InvalidFieldGteInt32Pointer int32 = 31
	var InvalidFieldGteInt64Pointer int64 = 31
	var InvalidFieldGteUintPointer uint = 31
	var InvalidFieldGteUint8Pointer uint8 = 31
	var InvalidFieldGteUint16Pointer uint16 = 31
	var InvalidFieldGteUint32Pointer uint32 = 31
	var InvalidFieldGteUint64Pointer uint64 = 31
	var InvalidFieldGteFloat32Pointer float32 = 12.33
	var InvalidFieldGteFloat64Pointer float64 = 12.33

	v = &gteStructFieldsPointer{}
	v.FieldGteIntPointer = &InvalidFieldGteIntPointer
	v.FieldGteInt8Pointer = &InvalidFieldGteInt8Pointer
	v.FieldGteInt16Pointer = &InvalidFieldGteInt16Pointer
	v.FieldGteInt32Pointer = &InvalidFieldGteInt32Pointer
	v.FieldGteInt64Pointer = &InvalidFieldGteInt64Pointer
	v.FieldGteUintPointer = &InvalidFieldGteUintPointer
	v.FieldGteUint8Pointer = &InvalidFieldGteUint8Pointer
	v.FieldGteUint16Pointer = &InvalidFieldGteUint16Pointer
	v.FieldGteUint32Pointer = &InvalidFieldGteUint32Pointer
	v.FieldGteUint64Pointer = &InvalidFieldGteUint64Pointer
	v.FieldGteFloat32Pointer = &InvalidFieldGteFloat32Pointer
	v.FieldGteFloat64Pointer = &InvalidFieldGteFloat64Pointer

	errs = gteStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldGteIntPointer int = 32
	var ValidFieldGteInt8Pointer int8 = 32
	var ValidFieldGteInt16Pointer int16 = 32
	var ValidFieldGteInt32Pointer int32 = 32
	var ValidFieldGteInt64Pointer int64 = 32
	var ValidFieldGteUintPointer uint = 32
	var ValidFieldGteUint8Pointer uint8 = 32
	var ValidFieldGteUint16Pointer uint16 = 32
	var ValidFieldGteUint32Pointer uint32 = 32
	var ValidFieldGteUint64Pointer uint64 = 32
	var ValidFieldGteFloat32Pointer float32 = 12.34
	var ValidFieldGteFloat64Pointer float64 = 12.34

	v = &gteStructFieldsPointer{}
	v.FieldGteIntPointer = &ValidFieldGteIntPointer
	v.FieldGteInt8Pointer = &ValidFieldGteInt8Pointer
	v.FieldGteInt16Pointer = &ValidFieldGteInt16Pointer
	v.FieldGteInt32Pointer = &ValidFieldGteInt32Pointer
	v.FieldGteInt64Pointer = &ValidFieldGteInt64Pointer
	v.FieldGteUintPointer = &ValidFieldGteUintPointer
	v.FieldGteUint8Pointer = &ValidFieldGteUint8Pointer
	v.FieldGteUint16Pointer = &ValidFieldGteUint16Pointer
	v.FieldGteUint32Pointer = &ValidFieldGteUint32Pointer
	v.FieldGteUint64Pointer = &ValidFieldGteUint64Pointer
	v.FieldGteFloat32Pointer = &ValidFieldGteFloat32Pointer
	v.FieldGteFloat64Pointer = &ValidFieldGteFloat64Pointer

	expectedMsgErrors = nil
	errs = gteStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("gteStructFieldsPointer types tests ok")
}

type ltStructFieldsPointer struct {
	FieldLtIntPointer     *int     `valid:"lt=32"`
	FieldLtInt8Pointer    *int8    `valid:"lt=32"`
	FieldLtInt16Pointer   *int16   `valid:"lt=32"`
	FieldLtInt32Pointer   *int32   `valid:"lt=32"`
	FieldLtInt64Pointer   *int64   `valid:"lt=32"`
	FieldLtUintPointer    *uint    `valid:"lt=32"`
	FieldLtUint8Pointer   *uint8   `valid:"lt=32"`
	FieldLtUint16Pointer  *uint16  `valid:"lt=32"`
	FieldLtUint32Pointer  *uint32  `valid:"lt=32"`
	FieldLtUint64Pointer  *uint64  `valid:"lt=32"`
	FieldLtFloat32Pointer *float32 `valid:"lt=12.34"`
	FieldLtFloat64Pointer *float64 `valid:"lt=12.34"`
}

func ltStructFieldsPointerTests() {
	log.Println("starting ltStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &ltStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldLtIntPointer must be < 32",
		"FieldLtInt8Pointer must be < 32",
		"FieldLtInt16Pointer must be < 32",
		"FieldLtInt32Pointer must be < 32",
		"FieldLtInt64Pointer must be < 32",
		"FieldLtUintPointer must be < 32",
		"FieldLtUint8Pointer must be < 32",
		"FieldLtUint16Pointer must be < 32",
		"FieldLtUint32Pointer must be < 32",
		"FieldLtUint64Pointer must be < 32",
		"FieldLtFloat32Pointer must be < 12.34",
		"FieldLtFloat64Pointer must be < 12.34",
	}
	errs = ltStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldLtIntPointer int = 33
	var InvalidFieldLtInt8Pointer int8 = 33
	var InvalidFieldLtInt16Pointer int16 = 33
	var InvalidFieldLtInt32Pointer int32 = 33
	var InvalidFieldLtInt64Pointer int64 = 33
	var InvalidFieldLtUintPointer uint = 33
	var InvalidFieldLtUint8Pointer uint8 = 33
	var InvalidFieldLtUint16Pointer uint16 = 33
	var InvalidFieldLtUint32Pointer uint32 = 33
	var InvalidFieldLtUint64Pointer uint64 = 33
	var InvalidFieldLtFloat32Pointer float32 = 12.35
	var InvalidFieldLtFloat64Pointer float64 = 12.35

	v = &ltStructFieldsPointer{}
	v.FieldLtIntPointer = &InvalidFieldLtIntPointer
	v.FieldLtInt8Pointer = &InvalidFieldLtInt8Pointer
	v.FieldLtInt16Pointer = &InvalidFieldLtInt16Pointer
	v.FieldLtInt32Pointer = &InvalidFieldLtInt32Pointer
	v.FieldLtInt64Pointer = &InvalidFieldLtInt64Pointer
	v.FieldLtUintPointer = &InvalidFieldLtUintPointer
	v.FieldLtUint8Pointer = &InvalidFieldLtUint8Pointer
	v.FieldLtUint16Pointer = &InvalidFieldLtUint16Pointer
	v.FieldLtUint32Pointer = &InvalidFieldLtUint32Pointer
	v.FieldLtUint64Pointer = &InvalidFieldLtUint64Pointer
	v.FieldLtFloat32Pointer = &InvalidFieldLtFloat32Pointer
	v.FieldLtFloat64Pointer = &InvalidFieldLtFloat64Pointer

	errs = ltStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldLtIntPointer int = 31
	var ValidFieldLtInt8Pointer int8 = 31
	var ValidFieldLtInt16Pointer int16 = 31
	var ValidFieldLtInt32Pointer int32 = 31
	var ValidFieldLtInt64Pointer int64 = 31
	var ValidFieldLtUintPointer uint = 31
	var ValidFieldLtUint8Pointer uint8 = 31
	var ValidFieldLtUint16Pointer uint16 = 31
	var ValidFieldLtUint32Pointer uint32 = 31
	var ValidFieldLtUint64Pointer uint64 = 31
	var ValidFieldLtFloat32Pointer float32 = 12.33
	var ValidFieldLtFloat64Pointer float64 = 12.33

	v = &ltStructFieldsPointer{}
	v.FieldLtIntPointer = &ValidFieldLtIntPointer
	v.FieldLtInt8Pointer = &ValidFieldLtInt8Pointer
	v.FieldLtInt16Pointer = &ValidFieldLtInt16Pointer
	v.FieldLtInt32Pointer = &ValidFieldLtInt32Pointer
	v.FieldLtInt64Pointer = &ValidFieldLtInt64Pointer
	v.FieldLtUintPointer = &ValidFieldLtUintPointer
	v.FieldLtUint8Pointer = &ValidFieldLtUint8Pointer
	v.FieldLtUint16Pointer = &ValidFieldLtUint16Pointer
	v.FieldLtUint32Pointer = &ValidFieldLtUint32Pointer
	v.FieldLtUint64Pointer = &ValidFieldLtUint64Pointer
	v.FieldLtFloat32Pointer = &ValidFieldLtFloat32Pointer
	v.FieldLtFloat64Pointer = &ValidFieldLtFloat64Pointer

	expectedMsgErrors = nil
	errs = ltStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("ltStructFieldsPointer types tests ok")
}

type lteStructFieldsPointer struct {
	FieldLteIntPointer     *int     `valid:"lte=32"`
	FieldLteInt8Pointer    *int8    `valid:"lte=32"`
	FieldLteInt16Pointer   *int16   `valid:"lte=32"`
	FieldLteInt32Pointer   *int32   `valid:"lte=32"`
	FieldLteInt64Pointer   *int64   `valid:"lte=32"`
	FieldLteUintPointer    *uint    `valid:"lte=32"`
	FieldLteUint8Pointer   *uint8   `valid:"lte=32"`
	FieldLteUint16Pointer  *uint16  `valid:"lte=32"`
	FieldLteUint32Pointer  *uint32  `valid:"lte=32"`
	FieldLteUint64Pointer  *uint64  `valid:"lte=32"`
	FieldLteFloat32Pointer *float32 `valid:"lte=12.34"`
	FieldLteFloat64Pointer *float64 `valid:"lte=12.34"`
}

func lteStructFieldsPointerTests() {
	log.Println("starting lteStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &lteStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldLteIntPointer must be <= 32",
		"FieldLteInt8Pointer must be <= 32",
		"FieldLteInt16Pointer must be <= 32",
		"FieldLteInt32Pointer must be <= 32",
		"FieldLteInt64Pointer must be <= 32",
		"FieldLteUintPointer must be <= 32",
		"FieldLteUint8Pointer must be <= 32",
		"FieldLteUint16Pointer must be <= 32",
		"FieldLteUint32Pointer must be <= 32",
		"FieldLteUint64Pointer must be <= 32",
		"FieldLteFloat32Pointer must be <= 12.34",
		"FieldLteFloat64Pointer must be <= 12.34",
	}
	errs = lteStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldLteIntPointer int = 33
	var InvalidFieldLteInt8Pointer int8 = 33
	var InvalidFieldLteInt16Pointer int16 = 33
	var InvalidFieldLteInt32Pointer int32 = 33
	var InvalidFieldLteInt64Pointer int64 = 33
	var InvalidFieldLteUintPointer uint = 33
	var InvalidFieldLteUint8Pointer uint8 = 33
	var InvalidFieldLteUint16Pointer uint16 = 33
	var InvalidFieldLteUint32Pointer uint32 = 33
	var InvalidFieldLteUint64Pointer uint64 = 33
	var InvalidFieldLteFloat32Pointer float32 = 12.35
	var InvalidFieldLteFloat64Pointer float64 = 12.35

	v = &lteStructFieldsPointer{}
	v.FieldLteIntPointer = &InvalidFieldLteIntPointer
	v.FieldLteInt8Pointer = &InvalidFieldLteInt8Pointer
	v.FieldLteInt16Pointer = &InvalidFieldLteInt16Pointer
	v.FieldLteInt32Pointer = &InvalidFieldLteInt32Pointer
	v.FieldLteInt64Pointer = &InvalidFieldLteInt64Pointer
	v.FieldLteUintPointer = &InvalidFieldLteUintPointer
	v.FieldLteUint8Pointer = &InvalidFieldLteUint8Pointer
	v.FieldLteUint16Pointer = &InvalidFieldLteUint16Pointer
	v.FieldLteUint32Pointer = &InvalidFieldLteUint32Pointer
	v.FieldLteUint64Pointer = &InvalidFieldLteUint64Pointer
	v.FieldLteFloat32Pointer = &InvalidFieldLteFloat32Pointer
	v.FieldLteFloat64Pointer = &InvalidFieldLteFloat64Pointer

	errs = lteStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldLteIntPointer int = 32
	var ValidFieldLteInt8Pointer int8 = 32
	var ValidFieldLteInt16Pointer int16 = 32
	var ValidFieldLteInt32Pointer int32 = 32
	var ValidFieldLteInt64Pointer int64 = 32
	var ValidFieldLteUintPointer uint = 32
	var ValidFieldLteUint8Pointer uint8 = 32
	var ValidFieldLteUint16Pointer uint16 = 32
	var ValidFieldLteUint32Pointer uint32 = 32
	var ValidFieldLteUint64Pointer uint64 = 32
	var ValidFieldLteFloat32Pointer float32 = 12.34
	var ValidFieldLteFloat64Pointer float64 = 12.34

	v = &lteStructFieldsPointer{}
	v.FieldLteIntPointer = &ValidFieldLteIntPointer
	v.FieldLteInt8Pointer = &ValidFieldLteInt8Pointer
	v.FieldLteInt16Pointer = &ValidFieldLteInt16Pointer
	v.FieldLteInt32Pointer = &ValidFieldLteInt32Pointer
	v.FieldLteInt64Pointer = &ValidFieldLteInt64Pointer
	v.FieldLteUintPointer = &ValidFieldLteUintPointer
	v.FieldLteUint8Pointer = &ValidFieldLteUint8Pointer
	v.FieldLteUint16Pointer = &ValidFieldLteUint16Pointer
	v.FieldLteUint32Pointer = &ValidFieldLteUint32Pointer
	v.FieldLteUint64Pointer = &ValidFieldLteUint64Pointer
	v.FieldLteFloat32Pointer = &ValidFieldLteFloat32Pointer
	v.FieldLteFloat64Pointer = &ValidFieldLteFloat64Pointer

	expectedMsgErrors = nil
	errs = lteStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("lteStructFieldsPointer types tests ok")
}

type minStructFieldsPointer struct {
	FieldMinStringPointer       *string              `valid:"min=5"`
	FieldMinStringSlicePointer  *[]string            `valid:"min=2"`
	FieldMinIntSlicePointer     *[]int               `valid:"min=2"`
	FieldMinInt8SlicePointer    *[]int8              `valid:"min=2"`
	FieldMinInt16SlicePointer   *[]int16             `valid:"min=2"`
	FieldMinInt32SlicePointer   *[]int32             `valid:"min=2"`
	FieldMinInt64SlicePointer   *[]int64             `valid:"min=2"`
	FieldMinUintSlicePointer    *[]uint              `valid:"min=2"`
	FieldMinUint8SlicePointer   *[]uint8             `valid:"min=2"`
	FieldMinUint16SlicePointer  *[]uint16            `valid:"min=2"`
	FieldMinUint32SlicePointer  *[]uint32            `valid:"min=2"`
	FieldMinUint64SlicePointer  *[]uint64            `valid:"min=2"`
	FieldMinFloat32SlicePointer *[]float32           `valid:"min=2"`
	FieldMinFloat64SlicePointer *[]float64           `valid:"min=2"`
	FieldMinBoolSlicePointer    *[]bool              `valid:"min=2"`
	FieldMinStringMapPointer    *map[string]string   `valid:"min=2"`
	FieldMinIntMapPointer       *map[int]int         `valid:"min=2"`
	FieldMinInt8MapPointer      *map[int8]int8       `valid:"min=2"`
	FieldMinInt16MapPointer     *map[int16]int16     `valid:"min=2"`
	FieldMinInt32MapPointer     *map[int32]int32     `valid:"min=2"`
	FieldMinInt64MapPointer     *map[int64]int64     `valid:"min=2"`
	FieldMinUintMapPointer      *map[uint]uint       `valid:"min=2"`
	FieldMinUint8MapPointer     *map[uint8]uint8     `valid:"min=2"`
	FieldMinUint16MapPointer    *map[uint16]uint16   `valid:"min=2"`
	FieldMinUint32MapPointer    *map[uint32]uint32   `valid:"min=2"`
	FieldMinUint64MapPointer    *map[uint64]uint64   `valid:"min=2"`
	FieldMinFloat32MapPointer   *map[float32]float32 `valid:"min=2"`
	FieldMinFloat64MapPointer   *map[float64]float64 `valid:"min=2"`
	FieldMinBoolMapPointer      *map[bool]bool       `valid:"min=2"`
}

func minStructFieldsPointerTests() {
	log.Println("starting minStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &minStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldMinStringPointer length must be >= 5",
		"FieldMinStringSlicePointer must have at least 2 elements",
		"FieldMinIntSlicePointer must have at least 2 elements",
		"FieldMinInt8SlicePointer must have at least 2 elements",
		"FieldMinInt16SlicePointer must have at least 2 elements",
		"FieldMinInt32SlicePointer must have at least 2 elements",
		"FieldMinInt64SlicePointer must have at least 2 elements",
		"FieldMinUintSlicePointer must have at least 2 elements",
		"FieldMinUint8SlicePointer must have at least 2 elements",
		"FieldMinUint16SlicePointer must have at least 2 elements",
		"FieldMinUint32SlicePointer must have at least 2 elements",
		"FieldMinUint64SlicePointer must have at least 2 elements",
		"FieldMinFloat32SlicePointer must have at least 2 elements",
		"FieldMinFloat64SlicePointer must have at least 2 elements",
		"FieldMinBoolSlicePointer must have at least 2 elements",
		"FieldMinStringMapPointer must have at least 2 elements",
		"FieldMinIntMapPointer must have at least 2 elements",
		"FieldMinInt8MapPointer must have at least 2 elements",
		"FieldMinInt16MapPointer must have at least 2 elements",
		"FieldMinInt32MapPointer must have at least 2 elements",
		"FieldMinInt64MapPointer must have at least 2 elements",
		"FieldMinUintMapPointer must have at least 2 elements",
		"FieldMinUint8MapPointer must have at least 2 elements",
		"FieldMinUint16MapPointer must have at least 2 elements",
		"FieldMinUint32MapPointer must have at least 2 elements",
		"FieldMinUint64MapPointer must have at least 2 elements",
		"FieldMinFloat32MapPointer must have at least 2 elements",
		"FieldMinFloat64MapPointer must have at least 2 elements",
		"FieldMinBoolMapPointer must have at least 2 elements",
	}
	errs = minStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldMinStringPointer string = "abc"
	var InvalidFieldMinStringSlicePointer []string = []string{"abc"}
	var InvalidFieldMinIntSlicePointer []int = []int{65}
	var InvalidFieldMinInt8SlicePointer []int8 = []int8{65}
	var InvalidFieldMinInt16SlicePointer []int16 = []int16{65}
	var InvalidFieldMinInt32SlicePointer []int32 = []int32{65}
	var InvalidFieldMinInt64SlicePointer []int64 = []int64{65}
	var InvalidFieldMinUintSlicePointer []uint = []uint{65}
	var InvalidFieldMinUint8SlicePointer []uint8 = []uint8{65}
	var InvalidFieldMinUint16SlicePointer []uint16 = []uint16{65}
	var InvalidFieldMinUint32SlicePointer []uint32 = []uint32{65}
	var InvalidFieldMinUint64SlicePointer []uint64 = []uint64{65}
	var InvalidFieldMinFloat32SlicePointer []float32 = []float32{65.65}
	var InvalidFieldMinFloat64SlicePointer []float64 = []float64{65.65}
	var InvalidFieldMinBoolSlicePointer []bool = []bool{true}
	var InvalidFieldMinStringMapPointer map[string]string = map[string]string{"a": "1"}
	var InvalidFieldMinIntMapPointer map[int]int = map[int]int{1: 65}
	var InvalidFieldMinInt8MapPointer map[int8]int8 = map[int8]int8{1: 65}
	var InvalidFieldMinInt16MapPointer map[int16]int16 = map[int16]int16{1: 65}
	var InvalidFieldMinInt32MapPointer map[int32]int32 = map[int32]int32{1: 65}
	var InvalidFieldMinInt64MapPointer map[int64]int64 = map[int64]int64{1: 65}
	var InvalidFieldMinUintMapPointer map[uint]uint = map[uint]uint{1: 65}
	var InvalidFieldMinUint8MapPointer map[uint8]uint8 = map[uint8]uint8{1: 65}
	var InvalidFieldMinUint16MapPointer map[uint16]uint16 = map[uint16]uint16{1: 65}
	var InvalidFieldMinUint32MapPointer map[uint32]uint32 = map[uint32]uint32{1: 65}
	var InvalidFieldMinUint64MapPointer map[uint64]uint64 = map[uint64]uint64{1: 65}
	var InvalidFieldMinFloat32MapPointer map[float32]float32 = map[float32]float32{1: 65.65}
	var InvalidFieldMinFloat64MapPointer map[float64]float64 = map[float64]float64{1: 65.65}
	var InvalidFieldMinBoolMapPointer map[bool]bool = map[bool]bool{true: true}

	v = &minStructFieldsPointer{}
	v.FieldMinStringPointer = &InvalidFieldMinStringPointer
	v.FieldMinStringSlicePointer = &InvalidFieldMinStringSlicePointer
	v.FieldMinIntSlicePointer = &InvalidFieldMinIntSlicePointer
	v.FieldMinInt8SlicePointer = &InvalidFieldMinInt8SlicePointer
	v.FieldMinInt16SlicePointer = &InvalidFieldMinInt16SlicePointer
	v.FieldMinInt32SlicePointer = &InvalidFieldMinInt32SlicePointer
	v.FieldMinInt64SlicePointer = &InvalidFieldMinInt64SlicePointer
	v.FieldMinUintSlicePointer = &InvalidFieldMinUintSlicePointer
	v.FieldMinUint8SlicePointer = &InvalidFieldMinUint8SlicePointer
	v.FieldMinUint16SlicePointer = &InvalidFieldMinUint16SlicePointer
	v.FieldMinUint32SlicePointer = &InvalidFieldMinUint32SlicePointer
	v.FieldMinUint64SlicePointer = &InvalidFieldMinUint64SlicePointer
	v.FieldMinFloat32SlicePointer = &InvalidFieldMinFloat32SlicePointer
	v.FieldMinFloat64SlicePointer = &InvalidFieldMinFloat64SlicePointer
	v.FieldMinBoolSlicePointer = &InvalidFieldMinBoolSlicePointer
	v.FieldMinStringMapPointer = &InvalidFieldMinStringMapPointer
	v.FieldMinIntMapPointer = &InvalidFieldMinIntMapPointer
	v.FieldMinInt8MapPointer = &InvalidFieldMinInt8MapPointer
	v.FieldMinInt16MapPointer = &InvalidFieldMinInt16MapPointer
	v.FieldMinInt32MapPointer = &InvalidFieldMinInt32MapPointer
	v.FieldMinInt64MapPointer = &InvalidFieldMinInt64MapPointer
	v.FieldMinUintMapPointer = &InvalidFieldMinUintMapPointer
	v.FieldMinUint8MapPointer = &InvalidFieldMinUint8MapPointer
	v.FieldMinUint16MapPointer = &InvalidFieldMinUint16MapPointer
	v.FieldMinUint32MapPointer = &InvalidFieldMinUint32MapPointer
	v.FieldMinUint64MapPointer = &InvalidFieldMinUint64MapPointer
	v.FieldMinFloat32MapPointer = &InvalidFieldMinFloat32MapPointer
	v.FieldMinFloat64MapPointer = &InvalidFieldMinFloat64MapPointer
	v.FieldMinBoolMapPointer = &InvalidFieldMinBoolMapPointer

	errs = minStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldMinStringPointer string = "abcde"
	var ValidFieldMinStringSlicePointer []string = []string{"abc", "def"}
	var ValidFieldMinIntSlicePointer []int = []int{65, 67}
	var ValidFieldMinInt8SlicePointer []int8 = []int8{65, 67}
	var ValidFieldMinInt16SlicePointer []int16 = []int16{65, 67}
	var ValidFieldMinInt32SlicePointer []int32 = []int32{65, 67}
	var ValidFieldMinInt64SlicePointer []int64 = []int64{65, 67}
	var ValidFieldMinUintSlicePointer []uint = []uint{65, 67}
	var ValidFieldMinUint8SlicePointer []uint8 = []uint8{65, 67}
	var ValidFieldMinUint16SlicePointer []uint16 = []uint16{65, 67}
	var ValidFieldMinUint32SlicePointer []uint32 = []uint32{65, 67}
	var ValidFieldMinUint64SlicePointer []uint64 = []uint64{65, 67}
	var ValidFieldMinFloat32SlicePointer []float32 = []float32{65.65, 67.67}
	var ValidFieldMinFloat64SlicePointer []float64 = []float64{65.65, 67.67}
	var ValidFieldMinBoolSlicePointer []bool = []bool{true, false}
	var ValidFieldMinStringMapPointer map[string]string = map[string]string{"a": "1", "b": "2"}
	var ValidFieldMinIntMapPointer map[int]int = map[int]int{1: 65, 2: 67}
	var ValidFieldMinInt8MapPointer map[int8]int8 = map[int8]int8{1: 65, 2: 67}
	var ValidFieldMinInt16MapPointer map[int16]int16 = map[int16]int16{1: 65, 2: 67}
	var ValidFieldMinInt32MapPointer map[int32]int32 = map[int32]int32{1: 65, 2: 67}
	var ValidFieldMinInt64MapPointer map[int64]int64 = map[int64]int64{1: 65, 2: 67}
	var ValidFieldMinUintMapPointer map[uint]uint = map[uint]uint{1: 65, 2: 67}
	var ValidFieldMinUint8MapPointer map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67}
	var ValidFieldMinUint16MapPointer map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67}
	var ValidFieldMinUint32MapPointer map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67}
	var ValidFieldMinUint64MapPointer map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67}
	var ValidFieldMinFloat32MapPointer map[float32]float32 = map[float32]float32{1: 65.65, 2: 67.67}
	var ValidFieldMinFloat64MapPointer map[float64]float64 = map[float64]float64{1: 65.65, 2: 67.67}
	var ValidFieldMinBoolMapPointer map[bool]bool = map[bool]bool{true: true, false: false}

	v = &minStructFieldsPointer{}
	v.FieldMinStringPointer = &ValidFieldMinStringPointer
	v.FieldMinStringSlicePointer = &ValidFieldMinStringSlicePointer
	v.FieldMinIntSlicePointer = &ValidFieldMinIntSlicePointer
	v.FieldMinInt8SlicePointer = &ValidFieldMinInt8SlicePointer
	v.FieldMinInt16SlicePointer = &ValidFieldMinInt16SlicePointer
	v.FieldMinInt32SlicePointer = &ValidFieldMinInt32SlicePointer
	v.FieldMinInt64SlicePointer = &ValidFieldMinInt64SlicePointer
	v.FieldMinUintSlicePointer = &ValidFieldMinUintSlicePointer
	v.FieldMinUint8SlicePointer = &ValidFieldMinUint8SlicePointer
	v.FieldMinUint16SlicePointer = &ValidFieldMinUint16SlicePointer
	v.FieldMinUint32SlicePointer = &ValidFieldMinUint32SlicePointer
	v.FieldMinUint64SlicePointer = &ValidFieldMinUint64SlicePointer
	v.FieldMinFloat32SlicePointer = &ValidFieldMinFloat32SlicePointer
	v.FieldMinFloat64SlicePointer = &ValidFieldMinFloat64SlicePointer
	v.FieldMinBoolSlicePointer = &ValidFieldMinBoolSlicePointer
	v.FieldMinStringMapPointer = &ValidFieldMinStringMapPointer
	v.FieldMinIntMapPointer = &ValidFieldMinIntMapPointer
	v.FieldMinInt8MapPointer = &ValidFieldMinInt8MapPointer
	v.FieldMinInt16MapPointer = &ValidFieldMinInt16MapPointer
	v.FieldMinInt32MapPointer = &ValidFieldMinInt32MapPointer
	v.FieldMinInt64MapPointer = &ValidFieldMinInt64MapPointer
	v.FieldMinUintMapPointer = &ValidFieldMinUintMapPointer
	v.FieldMinUint8MapPointer = &ValidFieldMinUint8MapPointer
	v.FieldMinUint16MapPointer = &ValidFieldMinUint16MapPointer
	v.FieldMinUint32MapPointer = &ValidFieldMinUint32MapPointer
	v.FieldMinUint64MapPointer = &ValidFieldMinUint64MapPointer
	v.FieldMinFloat32MapPointer = &ValidFieldMinFloat32MapPointer
	v.FieldMinFloat64MapPointer = &ValidFieldMinFloat64MapPointer
	v.FieldMinBoolMapPointer = &ValidFieldMinBoolMapPointer

	expectedMsgErrors = nil
	errs = minStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("minStructFieldsPointer types tests ok")
}

type maxStructFieldsPointer struct {
	FieldMaxStringPointer       *string              `valid:"max=3"`
	FieldMaxStringSlicePointer  *[]string            `valid:"max=2"`
	FieldMaxIntSlicePointer     *[]int               `valid:"max=2"`
	FieldMaxInt8SlicePointer    *[]int8              `valid:"max=2"`
	FieldMaxInt16SlicePointer   *[]int16             `valid:"max=2"`
	FieldMaxInt32SlicePointer   *[]int32             `valid:"max=2"`
	FieldMaxInt64SlicePointer   *[]int64             `valid:"max=2"`
	FieldMaxUintSlicePointer    *[]uint              `valid:"max=2"`
	FieldMaxUint8SlicePointer   *[]uint8             `valid:"max=2"`
	FieldMaxUint16SlicePointer  *[]uint16            `valid:"max=2"`
	FieldMaxUint32SlicePointer  *[]uint32            `valid:"max=2"`
	FieldMaxUint64SlicePointer  *[]uint64            `valid:"max=2"`
	FieldMaxFloat32SlicePointer *[]float32           `valid:"max=2"`
	FieldMaxFloat64SlicePointer *[]float64           `valid:"max=2"`
	FieldMaxBoolSlicePointer    *[]bool              `valid:"max=2"`
	FieldMaxStringMapPointer    *map[string]string   `valid:"max=2"`
	FieldMaxIntMapPointer       *map[int]int         `valid:"max=2"`
	FieldMaxInt8MapPointer      *map[int8]int8       `valid:"max=2"`
	FieldMaxInt16MapPointer     *map[int16]int16     `valid:"max=2"`
	FieldMaxInt32MapPointer     *map[int32]int32     `valid:"max=2"`
	FieldMaxInt64MapPointer     *map[int64]int64     `valid:"max=2"`
	FieldMaxUintMapPointer      *map[uint]uint       `valid:"max=2"`
	FieldMaxUint8MapPointer     *map[uint8]uint8     `valid:"max=2"`
	FieldMaxUint16MapPointer    *map[uint16]uint16   `valid:"max=2"`
	FieldMaxUint32MapPointer    *map[uint32]uint32   `valid:"max=2"`
	FieldMaxUint64MapPointer    *map[uint64]uint64   `valid:"max=2"`
	FieldMaxFloat32MapPointer   *map[float32]float32 `valid:"max=2"`
	FieldMaxFloat64MapPointer   *map[float64]float64 `valid:"max=2"`
	FieldMaxBoolMapPointer      *map[bool]bool       `valid:"max=1"`
}

func maxStructFieldsPointerTests() {
	log.Println("starting maxStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &maxStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldMaxStringPointer length must be <= 3",
		"FieldMaxStringSlicePointer must have at most 2 elements",
		"FieldMaxIntSlicePointer must have at most 2 elements",
		"FieldMaxInt8SlicePointer must have at most 2 elements",
		"FieldMaxInt16SlicePointer must have at most 2 elements",
		"FieldMaxInt32SlicePointer must have at most 2 elements",
		"FieldMaxInt64SlicePointer must have at most 2 elements",
		"FieldMaxUintSlicePointer must have at most 2 elements",
		"FieldMaxUint8SlicePointer must have at most 2 elements",
		"FieldMaxUint16SlicePointer must have at most 2 elements",
		"FieldMaxUint32SlicePointer must have at most 2 elements",
		"FieldMaxUint64SlicePointer must have at most 2 elements",
		"FieldMaxFloat32SlicePointer must have at most 2 elements",
		"FieldMaxFloat64SlicePointer must have at most 2 elements",
		"FieldMaxBoolSlicePointer must have at most 2 elements",
		"FieldMaxStringMapPointer must have at most 2 elements",
		"FieldMaxIntMapPointer must have at most 2 elements",
		"FieldMaxInt8MapPointer must have at most 2 elements",
		"FieldMaxInt16MapPointer must have at most 2 elements",
		"FieldMaxInt32MapPointer must have at most 2 elements",
		"FieldMaxInt64MapPointer must have at most 2 elements",
		"FieldMaxUintMapPointer must have at most 2 elements",
		"FieldMaxUint8MapPointer must have at most 2 elements",
		"FieldMaxUint16MapPointer must have at most 2 elements",
		"FieldMaxUint32MapPointer must have at most 2 elements",
		"FieldMaxUint64MapPointer must have at most 2 elements",
		"FieldMaxFloat32MapPointer must have at most 2 elements",
		"FieldMaxFloat64MapPointer must have at most 2 elements",
		"FieldMaxBoolMapPointer must have at most 1 elements",
	}
	errs = maxStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldMaxStringPointer string = "abcde"
	var InvalidFieldMaxStringSlicePointer []string = []string{"abc", "def", "ghi"}
	var InvalidFieldMaxIntSlicePointer []int = []int{65, 66, 67}
	var InvalidFieldMaxInt8SlicePointer []int8 = []int8{65, 66, 67}
	var InvalidFieldMaxInt16SlicePointer []int16 = []int16{65, 66, 67}
	var InvalidFieldMaxInt32SlicePointer []int32 = []int32{65, 66, 67}
	var InvalidFieldMaxInt64SlicePointer []int64 = []int64{65, 66, 67}
	var InvalidFieldMaxUintSlicePointer []uint = []uint{65, 66, 67}
	var InvalidFieldMaxUint8SlicePointer []uint8 = []uint8{65, 66, 67}
	var InvalidFieldMaxUint16SlicePointer []uint16 = []uint16{65, 66, 67}
	var InvalidFieldMaxUint32SlicePointer []uint32 = []uint32{65, 66, 67}
	var InvalidFieldMaxUint64SlicePointer []uint64 = []uint64{65, 66, 67}
	var InvalidFieldMaxFloat32SlicePointer []float32 = []float32{65.65, 66.66, 67.67}
	var InvalidFieldMaxFloat64SlicePointer []float64 = []float64{65.65, 66.66, 67.67}
	var InvalidFieldMaxBoolSlicePointer []bool = []bool{true, false, true}
	var InvalidFieldMaxStringMapPointer map[string]string = map[string]string{"a": "1", "b": "2", "c": "3"}
	var InvalidFieldMaxIntMapPointer map[int]int = map[int]int{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxInt8MapPointer map[int8]int8 = map[int8]int8{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxInt16MapPointer map[int16]int16 = map[int16]int16{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxInt32MapPointer map[int32]int32 = map[int32]int32{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxInt64MapPointer map[int64]int64 = map[int64]int64{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxUintMapPointer map[uint]uint = map[uint]uint{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxUint8MapPointer map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxUint16MapPointer map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxUint32MapPointer map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxUint64MapPointer map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67, 3: 68}
	var InvalidFieldMaxFloat32MapPointer map[float32]float32 = map[float32]float32{1: 65.65, 2: 66.66, 3: 67.67}
	var InvalidFieldMaxFloat64MapPointer map[float64]float64 = map[float64]float64{1: 65.65, 2: 66.66, 3: 67.67}
	var InvalidFieldMaxBoolMapPointer map[bool]bool = map[bool]bool{true: true, false: false}

	v = &maxStructFieldsPointer{}
	v.FieldMaxStringPointer = &InvalidFieldMaxStringPointer
	v.FieldMaxStringSlicePointer = &InvalidFieldMaxStringSlicePointer
	v.FieldMaxIntSlicePointer = &InvalidFieldMaxIntSlicePointer
	v.FieldMaxInt8SlicePointer = &InvalidFieldMaxInt8SlicePointer
	v.FieldMaxInt16SlicePointer = &InvalidFieldMaxInt16SlicePointer
	v.FieldMaxInt32SlicePointer = &InvalidFieldMaxInt32SlicePointer
	v.FieldMaxInt64SlicePointer = &InvalidFieldMaxInt64SlicePointer
	v.FieldMaxUintSlicePointer = &InvalidFieldMaxUintSlicePointer
	v.FieldMaxUint8SlicePointer = &InvalidFieldMaxUint8SlicePointer
	v.FieldMaxUint16SlicePointer = &InvalidFieldMaxUint16SlicePointer
	v.FieldMaxUint32SlicePointer = &InvalidFieldMaxUint32SlicePointer
	v.FieldMaxUint64SlicePointer = &InvalidFieldMaxUint64SlicePointer
	v.FieldMaxFloat32SlicePointer = &InvalidFieldMaxFloat32SlicePointer
	v.FieldMaxFloat64SlicePointer = &InvalidFieldMaxFloat64SlicePointer
	v.FieldMaxBoolSlicePointer = &InvalidFieldMaxBoolSlicePointer
	v.FieldMaxStringMapPointer = &InvalidFieldMaxStringMapPointer
	v.FieldMaxIntMapPointer = &InvalidFieldMaxIntMapPointer
	v.FieldMaxInt8MapPointer = &InvalidFieldMaxInt8MapPointer
	v.FieldMaxInt16MapPointer = &InvalidFieldMaxInt16MapPointer
	v.FieldMaxInt32MapPointer = &InvalidFieldMaxInt32MapPointer
	v.FieldMaxInt64MapPointer = &InvalidFieldMaxInt64MapPointer
	v.FieldMaxUintMapPointer = &InvalidFieldMaxUintMapPointer
	v.FieldMaxUint8MapPointer = &InvalidFieldMaxUint8MapPointer
	v.FieldMaxUint16MapPointer = &InvalidFieldMaxUint16MapPointer
	v.FieldMaxUint32MapPointer = &InvalidFieldMaxUint32MapPointer
	v.FieldMaxUint64MapPointer = &InvalidFieldMaxUint64MapPointer
	v.FieldMaxFloat32MapPointer = &InvalidFieldMaxFloat32MapPointer
	v.FieldMaxFloat64MapPointer = &InvalidFieldMaxFloat64MapPointer
	v.FieldMaxBoolMapPointer = &InvalidFieldMaxBoolMapPointer

	errs = maxStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldMaxStringPointer string = "abc"
	var ValidFieldMaxStringSlicePointer []string = []string{"abc", "def"}
	var ValidFieldMaxIntSlicePointer []int = []int{65, 67}
	var ValidFieldMaxInt8SlicePointer []int8 = []int8{65, 67}
	var ValidFieldMaxInt16SlicePointer []int16 = []int16{65, 67}
	var ValidFieldMaxInt32SlicePointer []int32 = []int32{65, 67}
	var ValidFieldMaxInt64SlicePointer []int64 = []int64{65, 67}
	var ValidFieldMaxUintSlicePointer []uint = []uint{65, 67}
	var ValidFieldMaxUint8SlicePointer []uint8 = []uint8{65, 67}
	var ValidFieldMaxUint16SlicePointer []uint16 = []uint16{65, 67}
	var ValidFieldMaxUint32SlicePointer []uint32 = []uint32{65, 67}
	var ValidFieldMaxUint64SlicePointer []uint64 = []uint64{65, 67}
	var ValidFieldMaxFloat32SlicePointer []float32 = []float32{65.65, 67.67}
	var ValidFieldMaxFloat64SlicePointer []float64 = []float64{65.65, 67.67}
	var ValidFieldMaxBoolSlicePointer []bool = []bool{true, false}
	var ValidFieldMaxStringMapPointer map[string]string = map[string]string{"a": "1", "b": "2"}
	var ValidFieldMaxIntMapPointer map[int]int = map[int]int{1: 65, 2: 67}
	var ValidFieldMaxInt8MapPointer map[int8]int8 = map[int8]int8{1: 65, 2: 67}
	var ValidFieldMaxInt16MapPointer map[int16]int16 = map[int16]int16{1: 65, 2: 67}
	var ValidFieldMaxInt32MapPointer map[int32]int32 = map[int32]int32{1: 65, 2: 67}
	var ValidFieldMaxInt64MapPointer map[int64]int64 = map[int64]int64{1: 65, 2: 67}
	var ValidFieldMaxUintMapPointer map[uint]uint = map[uint]uint{1: 65, 2: 67}
	var ValidFieldMaxUint8MapPointer map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67}
	var ValidFieldMaxUint16MapPointer map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67}
	var ValidFieldMaxUint32MapPointer map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67}
	var ValidFieldMaxUint64MapPointer map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67}
	var ValidFieldMaxFloat32MapPointer map[float32]float32 = map[float32]float32{1: 65.65, 2: 67.67}
	var ValidFieldMaxFloat64MapPointer map[float64]float64 = map[float64]float64{1: 65.65, 2: 67.67}
	var ValidFieldMaxBoolMapPointer map[bool]bool = map[bool]bool{true: true}

	v = &maxStructFieldsPointer{}
	v.FieldMaxStringPointer = &ValidFieldMaxStringPointer
	v.FieldMaxStringSlicePointer = &ValidFieldMaxStringSlicePointer
	v.FieldMaxIntSlicePointer = &ValidFieldMaxIntSlicePointer
	v.FieldMaxInt8SlicePointer = &ValidFieldMaxInt8SlicePointer
	v.FieldMaxInt16SlicePointer = &ValidFieldMaxInt16SlicePointer
	v.FieldMaxInt32SlicePointer = &ValidFieldMaxInt32SlicePointer
	v.FieldMaxInt64SlicePointer = &ValidFieldMaxInt64SlicePointer
	v.FieldMaxUintSlicePointer = &ValidFieldMaxUintSlicePointer
	v.FieldMaxUint8SlicePointer = &ValidFieldMaxUint8SlicePointer
	v.FieldMaxUint16SlicePointer = &ValidFieldMaxUint16SlicePointer
	v.FieldMaxUint32SlicePointer = &ValidFieldMaxUint32SlicePointer
	v.FieldMaxUint64SlicePointer = &ValidFieldMaxUint64SlicePointer
	v.FieldMaxFloat32SlicePointer = &ValidFieldMaxFloat32SlicePointer
	v.FieldMaxFloat64SlicePointer = &ValidFieldMaxFloat64SlicePointer
	v.FieldMaxBoolSlicePointer = &ValidFieldMaxBoolSlicePointer
	v.FieldMaxStringMapPointer = &ValidFieldMaxStringMapPointer
	v.FieldMaxIntMapPointer = &ValidFieldMaxIntMapPointer
	v.FieldMaxInt8MapPointer = &ValidFieldMaxInt8MapPointer
	v.FieldMaxInt16MapPointer = &ValidFieldMaxInt16MapPointer
	v.FieldMaxInt32MapPointer = &ValidFieldMaxInt32MapPointer
	v.FieldMaxInt64MapPointer = &ValidFieldMaxInt64MapPointer
	v.FieldMaxUintMapPointer = &ValidFieldMaxUintMapPointer
	v.FieldMaxUint8MapPointer = &ValidFieldMaxUint8MapPointer
	v.FieldMaxUint16MapPointer = &ValidFieldMaxUint16MapPointer
	v.FieldMaxUint32MapPointer = &ValidFieldMaxUint32MapPointer
	v.FieldMaxUint64MapPointer = &ValidFieldMaxUint64MapPointer
	v.FieldMaxFloat32MapPointer = &ValidFieldMaxFloat32MapPointer
	v.FieldMaxFloat64MapPointer = &ValidFieldMaxFloat64MapPointer
	v.FieldMaxBoolMapPointer = &ValidFieldMaxBoolMapPointer

	expectedMsgErrors = nil
	errs = maxStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("maxStructFieldsPointer types tests ok")
}

type eq_ignore_caseStructFieldsPointer struct {
	FieldEq_ignore_caseStringPointer *string `valid:"eq_ignore_case=abcde"`
}

func eq_ignore_caseStructFieldsPointerTests() {
	log.Println("starting eq_ignore_caseStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &eq_ignore_caseStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldEq_ignore_caseStringPointer must be equal to 'abcde'",
	}
	errs = eq_ignore_caseStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldEq_ignore_caseStringPointer string = "a1b2c3"

	v = &eq_ignore_caseStructFieldsPointer{}
	v.FieldEq_ignore_caseStringPointer = &InvalidFieldEq_ignore_caseStringPointer

	errs = eq_ignore_caseStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldEq_ignore_caseStringPointer string = "AbCdE"

	v = &eq_ignore_caseStructFieldsPointer{}
	v.FieldEq_ignore_caseStringPointer = &ValidFieldEq_ignore_caseStringPointer

	expectedMsgErrors = nil
	errs = eq_ignore_caseStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("eq_ignore_caseStructFieldsPointer types tests ok")
}

type neq_ignore_caseStructFieldsPointer struct {
	FieldNeq_ignore_caseStringPointer *string `valid:"neq_ignore_case=abcde"`
}

func neq_ignore_caseStructFieldsPointerTests() {
	log.Println("starting neq_ignore_caseStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &neq_ignore_caseStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldNeq_ignore_caseStringPointer must not be equal to 'abcde'",
	}
	errs = neq_ignore_caseStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldNeq_ignore_caseStringPointer string = "AbCdE"

	v = &neq_ignore_caseStructFieldsPointer{}
	v.FieldNeq_ignore_caseStringPointer = &InvalidFieldNeq_ignore_caseStringPointer

	errs = neq_ignore_caseStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldNeq_ignore_caseStringPointer string = "a1b2c3"

	v = &neq_ignore_caseStructFieldsPointer{}
	v.FieldNeq_ignore_caseStringPointer = &ValidFieldNeq_ignore_caseStringPointer

	expectedMsgErrors = nil
	errs = neq_ignore_caseStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("neq_ignore_caseStructFieldsPointer types tests ok")
}

type lenStructFieldsPointer struct {
	FieldLenStringPointer       *string              `valid:"len=2"`
	FieldLenStringSlicePointer  *[]string            `valid:"len=2"`
	FieldLenIntSlicePointer     *[]int               `valid:"len=2"`
	FieldLenInt8SlicePointer    *[]int8              `valid:"len=2"`
	FieldLenInt16SlicePointer   *[]int16             `valid:"len=2"`
	FieldLenInt32SlicePointer   *[]int32             `valid:"len=2"`
	FieldLenInt64SlicePointer   *[]int64             `valid:"len=2"`
	FieldLenUintSlicePointer    *[]uint              `valid:"len=2"`
	FieldLenUint8SlicePointer   *[]uint8             `valid:"len=2"`
	FieldLenUint16SlicePointer  *[]uint16            `valid:"len=2"`
	FieldLenUint32SlicePointer  *[]uint32            `valid:"len=2"`
	FieldLenUint64SlicePointer  *[]uint64            `valid:"len=2"`
	FieldLenFloat32SlicePointer *[]float32           `valid:"len=2"`
	FieldLenFloat64SlicePointer *[]float64           `valid:"len=2"`
	FieldLenBoolSlicePointer    *[]bool              `valid:"len=2"`
	FieldLenStringMapPointer    *map[string]string   `valid:"len=2"`
	FieldLenIntMapPointer       *map[int]int         `valid:"len=2"`
	FieldLenInt8MapPointer      *map[int8]int8       `valid:"len=2"`
	FieldLenInt16MapPointer     *map[int16]int16     `valid:"len=2"`
	FieldLenInt32MapPointer     *map[int32]int32     `valid:"len=2"`
	FieldLenInt64MapPointer     *map[int64]int64     `valid:"len=2"`
	FieldLenUintMapPointer      *map[uint]uint       `valid:"len=2"`
	FieldLenUint8MapPointer     *map[uint8]uint8     `valid:"len=2"`
	FieldLenUint16MapPointer    *map[uint16]uint16   `valid:"len=2"`
	FieldLenUint32MapPointer    *map[uint32]uint32   `valid:"len=2"`
	FieldLenUint64MapPointer    *map[uint64]uint64   `valid:"len=2"`
	FieldLenFloat32MapPointer   *map[float32]float32 `valid:"len=2"`
	FieldLenFloat64MapPointer   *map[float64]float64 `valid:"len=2"`
	FieldLenBoolMapPointer      *map[bool]bool       `valid:"len=2"`
}

func lenStructFieldsPointerTests() {
	log.Println("starting lenStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &lenStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldLenStringPointer length must be 2",
		"FieldLenStringSlicePointer must have exactly 2 elements",
		"FieldLenIntSlicePointer must have exactly 2 elements",
		"FieldLenInt8SlicePointer must have exactly 2 elements",
		"FieldLenInt16SlicePointer must have exactly 2 elements",
		"FieldLenInt32SlicePointer must have exactly 2 elements",
		"FieldLenInt64SlicePointer must have exactly 2 elements",
		"FieldLenUintSlicePointer must have exactly 2 elements",
		"FieldLenUint8SlicePointer must have exactly 2 elements",
		"FieldLenUint16SlicePointer must have exactly 2 elements",
		"FieldLenUint32SlicePointer must have exactly 2 elements",
		"FieldLenUint64SlicePointer must have exactly 2 elements",
		"FieldLenFloat32SlicePointer must have exactly 2 elements",
		"FieldLenFloat64SlicePointer must have exactly 2 elements",
		"FieldLenBoolSlicePointer must have exactly 2 elements",
		"FieldLenStringMapPointer must have exactly 2 elements",
		"FieldLenIntMapPointer must have exactly 2 elements",
		"FieldLenInt8MapPointer must have exactly 2 elements",
		"FieldLenInt16MapPointer must have exactly 2 elements",
		"FieldLenInt32MapPointer must have exactly 2 elements",
		"FieldLenInt64MapPointer must have exactly 2 elements",
		"FieldLenUintMapPointer must have exactly 2 elements",
		"FieldLenUint8MapPointer must have exactly 2 elements",
		"FieldLenUint16MapPointer must have exactly 2 elements",
		"FieldLenUint32MapPointer must have exactly 2 elements",
		"FieldLenUint64MapPointer must have exactly 2 elements",
		"FieldLenFloat32MapPointer must have exactly 2 elements",
		"FieldLenFloat64MapPointer must have exactly 2 elements",
		"FieldLenBoolMapPointer must have exactly 2 elements",
	}
	errs = lenStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldLenStringPointer string = "abcde"
	var InvalidFieldLenStringSlicePointer []string = []string{"abc", "def", "ghi"}
	var InvalidFieldLenIntSlicePointer []int = []int{65, 66, 67}
	var InvalidFieldLenInt8SlicePointer []int8 = []int8{65, 66, 67}
	var InvalidFieldLenInt16SlicePointer []int16 = []int16{65, 66, 67}
	var InvalidFieldLenInt32SlicePointer []int32 = []int32{65, 66, 67}
	var InvalidFieldLenInt64SlicePointer []int64 = []int64{65, 66, 67}
	var InvalidFieldLenUintSlicePointer []uint = []uint{65, 66, 67}
	var InvalidFieldLenUint8SlicePointer []uint8 = []uint8{65, 66, 67}
	var InvalidFieldLenUint16SlicePointer []uint16 = []uint16{65, 66, 67}
	var InvalidFieldLenUint32SlicePointer []uint32 = []uint32{65, 66, 67}
	var InvalidFieldLenUint64SlicePointer []uint64 = []uint64{65, 66, 67}
	var InvalidFieldLenFloat32SlicePointer []float32 = []float32{65.65, 66.66, 67.67}
	var InvalidFieldLenFloat64SlicePointer []float64 = []float64{65.65, 66.66, 67.67}
	var InvalidFieldLenBoolSlicePointer []bool = []bool{true, false, true}
	var InvalidFieldLenStringMapPointer map[string]string = map[string]string{"a": "1", "b": "2", "c": "3"}
	var InvalidFieldLenIntMapPointer map[int]int = map[int]int{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenInt8MapPointer map[int8]int8 = map[int8]int8{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenInt16MapPointer map[int16]int16 = map[int16]int16{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenInt32MapPointer map[int32]int32 = map[int32]int32{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenInt64MapPointer map[int64]int64 = map[int64]int64{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenUintMapPointer map[uint]uint = map[uint]uint{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenUint8MapPointer map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenUint16MapPointer map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenUint32MapPointer map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenUint64MapPointer map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67, 3: 68}
	var InvalidFieldLenFloat32MapPointer map[float32]float32 = map[float32]float32{1: 65.65, 2: 66.66, 3: 67.67}
	var InvalidFieldLenFloat64MapPointer map[float64]float64 = map[float64]float64{1: 65.65, 2: 66.66, 3: 67.67}
	var InvalidFieldLenBoolMapPointer map[bool]bool = map[bool]bool{true: true}

	v = &lenStructFieldsPointer{}
	v.FieldLenStringPointer = &InvalidFieldLenStringPointer
	v.FieldLenStringSlicePointer = &InvalidFieldLenStringSlicePointer
	v.FieldLenIntSlicePointer = &InvalidFieldLenIntSlicePointer
	v.FieldLenInt8SlicePointer = &InvalidFieldLenInt8SlicePointer
	v.FieldLenInt16SlicePointer = &InvalidFieldLenInt16SlicePointer
	v.FieldLenInt32SlicePointer = &InvalidFieldLenInt32SlicePointer
	v.FieldLenInt64SlicePointer = &InvalidFieldLenInt64SlicePointer
	v.FieldLenUintSlicePointer = &InvalidFieldLenUintSlicePointer
	v.FieldLenUint8SlicePointer = &InvalidFieldLenUint8SlicePointer
	v.FieldLenUint16SlicePointer = &InvalidFieldLenUint16SlicePointer
	v.FieldLenUint32SlicePointer = &InvalidFieldLenUint32SlicePointer
	v.FieldLenUint64SlicePointer = &InvalidFieldLenUint64SlicePointer
	v.FieldLenFloat32SlicePointer = &InvalidFieldLenFloat32SlicePointer
	v.FieldLenFloat64SlicePointer = &InvalidFieldLenFloat64SlicePointer
	v.FieldLenBoolSlicePointer = &InvalidFieldLenBoolSlicePointer
	v.FieldLenStringMapPointer = &InvalidFieldLenStringMapPointer
	v.FieldLenIntMapPointer = &InvalidFieldLenIntMapPointer
	v.FieldLenInt8MapPointer = &InvalidFieldLenInt8MapPointer
	v.FieldLenInt16MapPointer = &InvalidFieldLenInt16MapPointer
	v.FieldLenInt32MapPointer = &InvalidFieldLenInt32MapPointer
	v.FieldLenInt64MapPointer = &InvalidFieldLenInt64MapPointer
	v.FieldLenUintMapPointer = &InvalidFieldLenUintMapPointer
	v.FieldLenUint8MapPointer = &InvalidFieldLenUint8MapPointer
	v.FieldLenUint16MapPointer = &InvalidFieldLenUint16MapPointer
	v.FieldLenUint32MapPointer = &InvalidFieldLenUint32MapPointer
	v.FieldLenUint64MapPointer = &InvalidFieldLenUint64MapPointer
	v.FieldLenFloat32MapPointer = &InvalidFieldLenFloat32MapPointer
	v.FieldLenFloat64MapPointer = &InvalidFieldLenFloat64MapPointer
	v.FieldLenBoolMapPointer = &InvalidFieldLenBoolMapPointer

	errs = lenStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldLenStringPointer string = "ab"
	var ValidFieldLenStringSlicePointer []string = []string{"abc", "def"}
	var ValidFieldLenIntSlicePointer []int = []int{65, 67}
	var ValidFieldLenInt8SlicePointer []int8 = []int8{65, 67}
	var ValidFieldLenInt16SlicePointer []int16 = []int16{65, 67}
	var ValidFieldLenInt32SlicePointer []int32 = []int32{65, 67}
	var ValidFieldLenInt64SlicePointer []int64 = []int64{65, 67}
	var ValidFieldLenUintSlicePointer []uint = []uint{65, 67}
	var ValidFieldLenUint8SlicePointer []uint8 = []uint8{65, 67}
	var ValidFieldLenUint16SlicePointer []uint16 = []uint16{65, 67}
	var ValidFieldLenUint32SlicePointer []uint32 = []uint32{65, 67}
	var ValidFieldLenUint64SlicePointer []uint64 = []uint64{65, 67}
	var ValidFieldLenFloat32SlicePointer []float32 = []float32{65.65, 67.67}
	var ValidFieldLenFloat64SlicePointer []float64 = []float64{65.65, 67.67}
	var ValidFieldLenBoolSlicePointer []bool = []bool{true, false}
	var ValidFieldLenStringMapPointer map[string]string = map[string]string{"a": "1", "b": "2"}
	var ValidFieldLenIntMapPointer map[int]int = map[int]int{1: 65, 2: 67}
	var ValidFieldLenInt8MapPointer map[int8]int8 = map[int8]int8{1: 65, 2: 67}
	var ValidFieldLenInt16MapPointer map[int16]int16 = map[int16]int16{1: 65, 2: 67}
	var ValidFieldLenInt32MapPointer map[int32]int32 = map[int32]int32{1: 65, 2: 67}
	var ValidFieldLenInt64MapPointer map[int64]int64 = map[int64]int64{1: 65, 2: 67}
	var ValidFieldLenUintMapPointer map[uint]uint = map[uint]uint{1: 65, 2: 67}
	var ValidFieldLenUint8MapPointer map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67}
	var ValidFieldLenUint16MapPointer map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67}
	var ValidFieldLenUint32MapPointer map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67}
	var ValidFieldLenUint64MapPointer map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67}
	var ValidFieldLenFloat32MapPointer map[float32]float32 = map[float32]float32{1: 65.65, 2: 67.67}
	var ValidFieldLenFloat64MapPointer map[float64]float64 = map[float64]float64{1: 65.65, 2: 67.67}
	var ValidFieldLenBoolMapPointer map[bool]bool = map[bool]bool{true: true, false: false}

	v = &lenStructFieldsPointer{}
	v.FieldLenStringPointer = &ValidFieldLenStringPointer
	v.FieldLenStringSlicePointer = &ValidFieldLenStringSlicePointer
	v.FieldLenIntSlicePointer = &ValidFieldLenIntSlicePointer
	v.FieldLenInt8SlicePointer = &ValidFieldLenInt8SlicePointer
	v.FieldLenInt16SlicePointer = &ValidFieldLenInt16SlicePointer
	v.FieldLenInt32SlicePointer = &ValidFieldLenInt32SlicePointer
	v.FieldLenInt64SlicePointer = &ValidFieldLenInt64SlicePointer
	v.FieldLenUintSlicePointer = &ValidFieldLenUintSlicePointer
	v.FieldLenUint8SlicePointer = &ValidFieldLenUint8SlicePointer
	v.FieldLenUint16SlicePointer = &ValidFieldLenUint16SlicePointer
	v.FieldLenUint32SlicePointer = &ValidFieldLenUint32SlicePointer
	v.FieldLenUint64SlicePointer = &ValidFieldLenUint64SlicePointer
	v.FieldLenFloat32SlicePointer = &ValidFieldLenFloat32SlicePointer
	v.FieldLenFloat64SlicePointer = &ValidFieldLenFloat64SlicePointer
	v.FieldLenBoolSlicePointer = &ValidFieldLenBoolSlicePointer
	v.FieldLenStringMapPointer = &ValidFieldLenStringMapPointer
	v.FieldLenIntMapPointer = &ValidFieldLenIntMapPointer
	v.FieldLenInt8MapPointer = &ValidFieldLenInt8MapPointer
	v.FieldLenInt16MapPointer = &ValidFieldLenInt16MapPointer
	v.FieldLenInt32MapPointer = &ValidFieldLenInt32MapPointer
	v.FieldLenInt64MapPointer = &ValidFieldLenInt64MapPointer
	v.FieldLenUintMapPointer = &ValidFieldLenUintMapPointer
	v.FieldLenUint8MapPointer = &ValidFieldLenUint8MapPointer
	v.FieldLenUint16MapPointer = &ValidFieldLenUint16MapPointer
	v.FieldLenUint32MapPointer = &ValidFieldLenUint32MapPointer
	v.FieldLenUint64MapPointer = &ValidFieldLenUint64MapPointer
	v.FieldLenFloat32MapPointer = &ValidFieldLenFloat32MapPointer
	v.FieldLenFloat64MapPointer = &ValidFieldLenFloat64MapPointer
	v.FieldLenBoolMapPointer = &ValidFieldLenBoolMapPointer

	expectedMsgErrors = nil
	errs = lenStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("lenStructFieldsPointer types tests ok")
}

type inStructFieldsPointer struct {
	FieldInStringPointer       *string              `valid:"in=ab cd ef"`
	FieldInIntPointer          *int                 `valid:"in=12 34 56"`
	FieldInInt8Pointer         *int8                `valid:"in=12 34 56"`
	FieldInInt16Pointer        *int16               `valid:"in=12 34 56"`
	FieldInInt32Pointer        *int32               `valid:"in=12 34 56"`
	FieldInInt64Pointer        *int64               `valid:"in=12 34 56"`
	FieldInUintPointer         *uint                `valid:"in=12 34 56"`
	FieldInUint8Pointer        *uint8               `valid:"in=12 34 56"`
	FieldInUint16Pointer       *uint16              `valid:"in=12 34 56"`
	FieldInUint32Pointer       *uint32              `valid:"in=12 34 56"`
	FieldInUint64Pointer       *uint64              `valid:"in=12 34 56"`
	FieldInFloat32Pointer      *float32             `valid:"in=11.11 22.22 33.33"`
	FieldInFloat64Pointer      *float64             `valid:"in=11.11 22.22 33.33"`
	FieldInBoolPointer         *bool                `valid:"in=true"`
	FieldInStringSlicePointer  *[]string            `valid:"in=ab cd ef"`
	FieldInIntSlicePointer     *[]int               `valid:"in=12 34 56"`
	FieldInInt8SlicePointer    *[]int8              `valid:"in=12 34 56"`
	FieldInInt16SlicePointer   *[]int16             `valid:"in=12 34 56"`
	FieldInInt32SlicePointer   *[]int32             `valid:"in=12 34 56"`
	FieldInInt64SlicePointer   *[]int64             `valid:"in=12 34 56"`
	FieldInUintSlicePointer    *[]uint              `valid:"in=12 34 56"`
	FieldInUint8SlicePointer   *[]uint8             `valid:"in=12 34 56"`
	FieldInUint16SlicePointer  *[]uint16            `valid:"in=12 34 56"`
	FieldInUint32SlicePointer  *[]uint32            `valid:"in=12 34 56"`
	FieldInUint64SlicePointer  *[]uint64            `valid:"in=12 34 56"`
	FieldInFloat32SlicePointer *[]float32           `valid:"in=11.11 22.22 33.33"`
	FieldInFloat64SlicePointer *[]float64           `valid:"in=11.11 22.22 33.33"`
	FieldInBoolSlicePointer    *[]bool              `valid:"in=true"`
	FieldInStringArrayPointer  *[3]string           `valid:"in=ab cd ef"`
	FieldInIntArrayPointer     *[3]int              `valid:"in=12 34 56"`
	FieldInInt8ArrayPointer    *[3]int8             `valid:"in=12 34 56"`
	FieldInInt16ArrayPointer   *[3]int16            `valid:"in=12 34 56"`
	FieldInInt32ArrayPointer   *[3]int32            `valid:"in=12 34 56"`
	FieldInInt64ArrayPointer   *[3]int64            `valid:"in=12 34 56"`
	FieldInUintArrayPointer    *[3]uint             `valid:"in=12 34 56"`
	FieldInUint8ArrayPointer   *[3]uint8            `valid:"in=12 34 56"`
	FieldInUint16ArrayPointer  *[3]uint16           `valid:"in=12 34 56"`
	FieldInUint32ArrayPointer  *[3]uint32           `valid:"in=12 34 56"`
	FieldInUint64ArrayPointer  *[3]uint64           `valid:"in=12 34 56"`
	FieldInFloat32ArrayPointer *[3]float32          `valid:"in=11.11 22.22 33.33"`
	FieldInFloat64ArrayPointer *[3]float64          `valid:"in=11.11 22.22 33.33"`
	FieldInBoolArrayPointer    *[3]bool             `valid:"in=true"`
	FieldInStringMapPointer    *map[string]string   `valid:"in=a b c"`
	FieldInIntMapPointer       *map[int]int         `valid:"in=1 2 3"`
	FieldInInt8MapPointer      *map[int8]int8       `valid:"in=1 2 3"`
	FieldInInt16MapPointer     *map[int16]int16     `valid:"in=1 2 3"`
	FieldInInt32MapPointer     *map[int32]int32     `valid:"in=1 2 3"`
	FieldInInt64MapPointer     *map[int64]int64     `valid:"in=1 2 3"`
	FieldInUintMapPointer      *map[uint]uint       `valid:"in=1 2 3"`
	FieldInUint8MapPointer     *map[uint8]uint8     `valid:"in=1 2 3"`
	FieldInUint16MapPointer    *map[uint16]uint16   `valid:"in=1 2 3"`
	FieldInUint32MapPointer    *map[uint32]uint32   `valid:"in=1 2 3"`
	FieldInUint64MapPointer    *map[uint64]uint64   `valid:"in=1 2 3"`
	FieldInFloat32MapPointer   *map[float32]float32 `valid:"in=11.11 22.22 33.33"`
	FieldInFloat64MapPointer   *map[float64]float64 `valid:"in=11.11 22.22 33.33"`
	FieldInBoolMapPointer      *map[bool]bool       `valid:"in=false"`
}

func inStructFieldsPointerTests() {
	log.Println("starting inStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &inStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldInStringPointer must be one of 'ab' 'cd' 'ef'",
		"FieldInIntPointer must be one of '12' '34' '56'",
		"FieldInInt8Pointer must be one of '12' '34' '56'",
		"FieldInInt16Pointer must be one of '12' '34' '56'",
		"FieldInInt32Pointer must be one of '12' '34' '56'",
		"FieldInInt64Pointer must be one of '12' '34' '56'",
		"FieldInUintPointer must be one of '12' '34' '56'",
		"FieldInUint8Pointer must be one of '12' '34' '56'",
		"FieldInUint16Pointer must be one of '12' '34' '56'",
		"FieldInUint32Pointer must be one of '12' '34' '56'",
		"FieldInUint64Pointer must be one of '12' '34' '56'",
		"FieldInFloat32Pointer must be one of '11.11' '22.22' '33.33'",
		"FieldInFloat64Pointer must be one of '11.11' '22.22' '33.33'",
		"FieldInBoolPointer must be one of 'true'",
		"FieldInStringSlicePointer elements must be one of 'ab' 'cd' 'ef'",
		"FieldInIntSlicePointer elements must be one of '12' '34' '56'",
		"FieldInInt8SlicePointer elements must be one of '12' '34' '56'",
		"FieldInInt16SlicePointer elements must be one of '12' '34' '56'",
		"FieldInInt32SlicePointer elements must be one of '12' '34' '56'",
		"FieldInInt64SlicePointer elements must be one of '12' '34' '56'",
		"FieldInUintSlicePointer elements must be one of '12' '34' '56'",
		"FieldInUint8SlicePointer elements must be one of '12' '34' '56'",
		"FieldInUint16SlicePointer elements must be one of '12' '34' '56'",
		"FieldInUint32SlicePointer elements must be one of '12' '34' '56'",
		"FieldInUint64SlicePointer elements must be one of '12' '34' '56'",
		"FieldInFloat32SlicePointer elements must be one of '11.11' '22.22' '33.33'",
		"FieldInFloat64SlicePointer elements must be one of '11.11' '22.22' '33.33'",
		"FieldInBoolSlicePointer elements must be one of 'true'",
		"FieldInStringArrayPointer elements must be one of 'ab' 'cd' 'ef'",
		"FieldInIntArrayPointer elements must be one of '12' '34' '56'",
		"FieldInInt8ArrayPointer elements must be one of '12' '34' '56'",
		"FieldInInt16ArrayPointer elements must be one of '12' '34' '56'",
		"FieldInInt32ArrayPointer elements must be one of '12' '34' '56'",
		"FieldInInt64ArrayPointer elements must be one of '12' '34' '56'",
		"FieldInUintArrayPointer elements must be one of '12' '34' '56'",
		"FieldInUint8ArrayPointer elements must be one of '12' '34' '56'",
		"FieldInUint16ArrayPointer elements must be one of '12' '34' '56'",
		"FieldInUint32ArrayPointer elements must be one of '12' '34' '56'",
		"FieldInUint64ArrayPointer elements must be one of '12' '34' '56'",
		"FieldInFloat32ArrayPointer elements must be one of '11.11' '22.22' '33.33'",
		"FieldInFloat64ArrayPointer elements must be one of '11.11' '22.22' '33.33'",
		"FieldInBoolArrayPointer elements must be one of 'true'",
		"FieldInStringMapPointer elements must be one of 'a' 'b' 'c'",
		"FieldInIntMapPointer elements must be one of '1' '2' '3'",
		"FieldInInt8MapPointer elements must be one of '1' '2' '3'",
		"FieldInInt16MapPointer elements must be one of '1' '2' '3'",
		"FieldInInt32MapPointer elements must be one of '1' '2' '3'",
		"FieldInInt64MapPointer elements must be one of '1' '2' '3'",
		"FieldInUintMapPointer elements must be one of '1' '2' '3'",
		"FieldInUint8MapPointer elements must be one of '1' '2' '3'",
		"FieldInUint16MapPointer elements must be one of '1' '2' '3'",
		"FieldInUint32MapPointer elements must be one of '1' '2' '3'",
		"FieldInUint64MapPointer elements must be one of '1' '2' '3'",
		"FieldInFloat32MapPointer elements must be one of '11.11' '22.22' '33.33'",
		"FieldInFloat64MapPointer elements must be one of '11.11' '22.22' '33.33'",
		"FieldInBoolMapPointer elements must be one of 'false'",
	}
	errs = inStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldInStringPointer string = "fg"
	var InvalidFieldInIntPointer int = 78
	var InvalidFieldInInt8Pointer int8 = 78
	var InvalidFieldInInt16Pointer int16 = 78
	var InvalidFieldInInt32Pointer int32 = 78
	var InvalidFieldInInt64Pointer int64 = 78
	var InvalidFieldInUintPointer uint = 78
	var InvalidFieldInUint8Pointer uint8 = 78
	var InvalidFieldInUint16Pointer uint16 = 78
	var InvalidFieldInUint32Pointer uint32 = 78
	var InvalidFieldInUint64Pointer uint64 = 78
	var InvalidFieldInFloat32Pointer float32 = 44.44
	var InvalidFieldInFloat64Pointer float64 = 44.44
	var InvalidFieldInBoolPointer bool = false
	var InvalidFieldInStringSlicePointer []string = []string{"ab", "gh", "ef"}
	var InvalidFieldInIntSlicePointer []int = []int{12, 78, 56}
	var InvalidFieldInInt8SlicePointer []int8 = []int8{12, 78, 56}
	var InvalidFieldInInt16SlicePointer []int16 = []int16{12, 78, 56}
	var InvalidFieldInInt32SlicePointer []int32 = []int32{12, 78, 56}
	var InvalidFieldInInt64SlicePointer []int64 = []int64{12, 78, 56}
	var InvalidFieldInUintSlicePointer []uint = []uint{12, 78, 56}
	var InvalidFieldInUint8SlicePointer []uint8 = []uint8{12, 78, 56}
	var InvalidFieldInUint16SlicePointer []uint16 = []uint16{12, 78, 56}
	var InvalidFieldInUint32SlicePointer []uint32 = []uint32{12, 78, 56}
	var InvalidFieldInUint64SlicePointer []uint64 = []uint64{12, 78, 56}
	var InvalidFieldInFloat32SlicePointer []float32 = []float32{11.11, 44.44, 33.33}
	var InvalidFieldInFloat64SlicePointer []float64 = []float64{11.11, 44.44, 33.33}
	var InvalidFieldInBoolSlicePointer []bool = []bool{true, false, true}
	var InvalidFieldInStringArrayPointer [3]string = [3]string{"ab", "gh", "ef"}
	var InvalidFieldInIntArrayPointer [3]int = [3]int{12, 78, 56}
	var InvalidFieldInInt8ArrayPointer [3]int8 = [3]int8{12, 78, 56}
	var InvalidFieldInInt16ArrayPointer [3]int16 = [3]int16{12, 78, 56}
	var InvalidFieldInInt32ArrayPointer [3]int32 = [3]int32{12, 78, 56}
	var InvalidFieldInInt64ArrayPointer [3]int64 = [3]int64{12, 78, 56}
	var InvalidFieldInUintArrayPointer [3]uint = [3]uint{12, 78, 56}
	var InvalidFieldInUint8ArrayPointer [3]uint8 = [3]uint8{12, 78, 56}
	var InvalidFieldInUint16ArrayPointer [3]uint16 = [3]uint16{12, 78, 56}
	var InvalidFieldInUint32ArrayPointer [3]uint32 = [3]uint32{12, 78, 56}
	var InvalidFieldInUint64ArrayPointer [3]uint64 = [3]uint64{12, 78, 56}
	var InvalidFieldInFloat32ArrayPointer [3]float32 = [3]float32{11.11, 44.44, 33.33}
	var InvalidFieldInFloat64ArrayPointer [3]float64 = [3]float64{11.11, 44.44, 33.33}
	var InvalidFieldInBoolArrayPointer [3]bool = [3]bool{true, false, true}
	var InvalidFieldInStringMapPointer map[string]string = map[string]string{"a": "1", "d": "9", "c": "3"}
	var InvalidFieldInIntMapPointer map[int]int = map[int]int{1: 65, 4: 69, 3: 68}
	var InvalidFieldInInt8MapPointer map[int8]int8 = map[int8]int8{1: 65, 4: 69, 3: 68}
	var InvalidFieldInInt16MapPointer map[int16]int16 = map[int16]int16{1: 65, 4: 69, 3: 68}
	var InvalidFieldInInt32MapPointer map[int32]int32 = map[int32]int32{1: 65, 4: 69, 3: 68}
	var InvalidFieldInInt64MapPointer map[int64]int64 = map[int64]int64{1: 65, 4: 69, 3: 68}
	var InvalidFieldInUintMapPointer map[uint]uint = map[uint]uint{1: 65, 4: 69, 3: 68}
	var InvalidFieldInUint8MapPointer map[uint8]uint8 = map[uint8]uint8{1: 65, 4: 69, 3: 68}
	var InvalidFieldInUint16MapPointer map[uint16]uint16 = map[uint16]uint16{1: 65, 4: 69, 3: 68}
	var InvalidFieldInUint32MapPointer map[uint32]uint32 = map[uint32]uint32{1: 65, 4: 69, 3: 68}
	var InvalidFieldInUint64MapPointer map[uint64]uint64 = map[uint64]uint64{1: 65, 4: 69, 3: 68}
	var InvalidFieldInFloat32MapPointer map[float32]float32 = map[float32]float32{11.11: 11.11, 44.44: 44.44, 33.33: 33.33}
	var InvalidFieldInFloat64MapPointer map[float64]float64 = map[float64]float64{11.11: 11.11, 44.44: 44.44, 33.33: 33.33}
	var InvalidFieldInBoolMapPointer map[bool]bool = map[bool]bool{true: true, false: false}

	v = &inStructFieldsPointer{}
	v.FieldInStringPointer = &InvalidFieldInStringPointer
	v.FieldInIntPointer = &InvalidFieldInIntPointer
	v.FieldInInt8Pointer = &InvalidFieldInInt8Pointer
	v.FieldInInt16Pointer = &InvalidFieldInInt16Pointer
	v.FieldInInt32Pointer = &InvalidFieldInInt32Pointer
	v.FieldInInt64Pointer = &InvalidFieldInInt64Pointer
	v.FieldInUintPointer = &InvalidFieldInUintPointer
	v.FieldInUint8Pointer = &InvalidFieldInUint8Pointer
	v.FieldInUint16Pointer = &InvalidFieldInUint16Pointer
	v.FieldInUint32Pointer = &InvalidFieldInUint32Pointer
	v.FieldInUint64Pointer = &InvalidFieldInUint64Pointer
	v.FieldInFloat32Pointer = &InvalidFieldInFloat32Pointer
	v.FieldInFloat64Pointer = &InvalidFieldInFloat64Pointer
	v.FieldInBoolPointer = &InvalidFieldInBoolPointer
	v.FieldInStringSlicePointer = &InvalidFieldInStringSlicePointer
	v.FieldInIntSlicePointer = &InvalidFieldInIntSlicePointer
	v.FieldInInt8SlicePointer = &InvalidFieldInInt8SlicePointer
	v.FieldInInt16SlicePointer = &InvalidFieldInInt16SlicePointer
	v.FieldInInt32SlicePointer = &InvalidFieldInInt32SlicePointer
	v.FieldInInt64SlicePointer = &InvalidFieldInInt64SlicePointer
	v.FieldInUintSlicePointer = &InvalidFieldInUintSlicePointer
	v.FieldInUint8SlicePointer = &InvalidFieldInUint8SlicePointer
	v.FieldInUint16SlicePointer = &InvalidFieldInUint16SlicePointer
	v.FieldInUint32SlicePointer = &InvalidFieldInUint32SlicePointer
	v.FieldInUint64SlicePointer = &InvalidFieldInUint64SlicePointer
	v.FieldInFloat32SlicePointer = &InvalidFieldInFloat32SlicePointer
	v.FieldInFloat64SlicePointer = &InvalidFieldInFloat64SlicePointer
	v.FieldInBoolSlicePointer = &InvalidFieldInBoolSlicePointer
	v.FieldInStringArrayPointer = &InvalidFieldInStringArrayPointer
	v.FieldInIntArrayPointer = &InvalidFieldInIntArrayPointer
	v.FieldInInt8ArrayPointer = &InvalidFieldInInt8ArrayPointer
	v.FieldInInt16ArrayPointer = &InvalidFieldInInt16ArrayPointer
	v.FieldInInt32ArrayPointer = &InvalidFieldInInt32ArrayPointer
	v.FieldInInt64ArrayPointer = &InvalidFieldInInt64ArrayPointer
	v.FieldInUintArrayPointer = &InvalidFieldInUintArrayPointer
	v.FieldInUint8ArrayPointer = &InvalidFieldInUint8ArrayPointer
	v.FieldInUint16ArrayPointer = &InvalidFieldInUint16ArrayPointer
	v.FieldInUint32ArrayPointer = &InvalidFieldInUint32ArrayPointer
	v.FieldInUint64ArrayPointer = &InvalidFieldInUint64ArrayPointer
	v.FieldInFloat32ArrayPointer = &InvalidFieldInFloat32ArrayPointer
	v.FieldInFloat64ArrayPointer = &InvalidFieldInFloat64ArrayPointer
	v.FieldInBoolArrayPointer = &InvalidFieldInBoolArrayPointer
	v.FieldInStringMapPointer = &InvalidFieldInStringMapPointer
	v.FieldInIntMapPointer = &InvalidFieldInIntMapPointer
	v.FieldInInt8MapPointer = &InvalidFieldInInt8MapPointer
	v.FieldInInt16MapPointer = &InvalidFieldInInt16MapPointer
	v.FieldInInt32MapPointer = &InvalidFieldInInt32MapPointer
	v.FieldInInt64MapPointer = &InvalidFieldInInt64MapPointer
	v.FieldInUintMapPointer = &InvalidFieldInUintMapPointer
	v.FieldInUint8MapPointer = &InvalidFieldInUint8MapPointer
	v.FieldInUint16MapPointer = &InvalidFieldInUint16MapPointer
	v.FieldInUint32MapPointer = &InvalidFieldInUint32MapPointer
	v.FieldInUint64MapPointer = &InvalidFieldInUint64MapPointer
	v.FieldInFloat32MapPointer = &InvalidFieldInFloat32MapPointer
	v.FieldInFloat64MapPointer = &InvalidFieldInFloat64MapPointer
	v.FieldInBoolMapPointer = &InvalidFieldInBoolMapPointer

	errs = inStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldInStringPointer string = "cd"
	var ValidFieldInIntPointer int = 34
	var ValidFieldInInt8Pointer int8 = 34
	var ValidFieldInInt16Pointer int16 = 34
	var ValidFieldInInt32Pointer int32 = 34
	var ValidFieldInInt64Pointer int64 = 34
	var ValidFieldInUintPointer uint = 34
	var ValidFieldInUint8Pointer uint8 = 34
	var ValidFieldInUint16Pointer uint16 = 34
	var ValidFieldInUint32Pointer uint32 = 34
	var ValidFieldInUint64Pointer uint64 = 34
	var ValidFieldInFloat32Pointer float32 = 22.22
	var ValidFieldInFloat64Pointer float64 = 22.22
	var ValidFieldInBoolPointer bool = true
	var ValidFieldInStringSlicePointer []string = []string{"ab", "ef"}
	var ValidFieldInIntSlicePointer []int = []int{12, 56}
	var ValidFieldInInt8SlicePointer []int8 = []int8{12, 56}
	var ValidFieldInInt16SlicePointer []int16 = []int16{12, 56}
	var ValidFieldInInt32SlicePointer []int32 = []int32{12, 56}
	var ValidFieldInInt64SlicePointer []int64 = []int64{12, 56}
	var ValidFieldInUintSlicePointer []uint = []uint{12, 56}
	var ValidFieldInUint8SlicePointer []uint8 = []uint8{12, 56}
	var ValidFieldInUint16SlicePointer []uint16 = []uint16{12, 56}
	var ValidFieldInUint32SlicePointer []uint32 = []uint32{12, 56}
	var ValidFieldInUint64SlicePointer []uint64 = []uint64{12, 56}
	var ValidFieldInFloat32SlicePointer []float32 = []float32{11.11, 22.22}
	var ValidFieldInFloat64SlicePointer []float64 = []float64{11.11, 22.22}
	var ValidFieldInBoolSlicePointer []bool = []bool{true, true}
	var ValidFieldInStringArrayPointer [3]string = [3]string{"ab", "ef", "ab"}
	var ValidFieldInIntArrayPointer [3]int = [3]int{12, 56, 12}
	var ValidFieldInInt8ArrayPointer [3]int8 = [3]int8{12, 56, 12}
	var ValidFieldInInt16ArrayPointer [3]int16 = [3]int16{12, 56, 12}
	var ValidFieldInInt32ArrayPointer [3]int32 = [3]int32{12, 56, 12}
	var ValidFieldInInt64ArrayPointer [3]int64 = [3]int64{12, 56, 12}
	var ValidFieldInUintArrayPointer [3]uint = [3]uint{12, 56, 12}
	var ValidFieldInUint8ArrayPointer [3]uint8 = [3]uint8{12, 56, 12}
	var ValidFieldInUint16ArrayPointer [3]uint16 = [3]uint16{12, 56, 12}
	var ValidFieldInUint32ArrayPointer [3]uint32 = [3]uint32{12, 56, 12}
	var ValidFieldInUint64ArrayPointer [3]uint64 = [3]uint64{12, 56, 12}
	var ValidFieldInFloat32ArrayPointer [3]float32 = [3]float32{11.11, 22.22, 11.11}
	var ValidFieldInFloat64ArrayPointer [3]float64 = [3]float64{11.11, 22.22, 11.11}
	var ValidFieldInBoolArrayPointer [3]bool = [3]bool{true, true, true}
	var ValidFieldInStringMapPointer map[string]string = map[string]string{"a": "1", "b": "2", "c": "3"}
	var ValidFieldInIntMapPointer map[int]int = map[int]int{1: 65, 2: 67, 3: 68}
	var ValidFieldInInt8MapPointer map[int8]int8 = map[int8]int8{1: 65, 2: 67, 3: 68}
	var ValidFieldInInt16MapPointer map[int16]int16 = map[int16]int16{1: 65, 2: 67, 3: 68}
	var ValidFieldInInt32MapPointer map[int32]int32 = map[int32]int32{1: 65, 2: 67, 3: 68}
	var ValidFieldInInt64MapPointer map[int64]int64 = map[int64]int64{1: 65, 2: 67, 3: 68}
	var ValidFieldInUintMapPointer map[uint]uint = map[uint]uint{1: 65, 2: 67, 3: 68}
	var ValidFieldInUint8MapPointer map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67, 3: 68}
	var ValidFieldInUint16MapPointer map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67, 3: 68}
	var ValidFieldInUint32MapPointer map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67, 3: 68}
	var ValidFieldInUint64MapPointer map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67, 3: 68}
	var ValidFieldInFloat32MapPointer map[float32]float32 = map[float32]float32{11.11: 11.11, 22.22: 22.22, 33.33: 33.33}
	var ValidFieldInFloat64MapPointer map[float64]float64 = map[float64]float64{11.11: 11.11, 22.22: 22.22, 33.33: 33.33}
	var ValidFieldInBoolMapPointer map[bool]bool = map[bool]bool{false: false}

	v = &inStructFieldsPointer{}
	v.FieldInStringPointer = &ValidFieldInStringPointer
	v.FieldInIntPointer = &ValidFieldInIntPointer
	v.FieldInInt8Pointer = &ValidFieldInInt8Pointer
	v.FieldInInt16Pointer = &ValidFieldInInt16Pointer
	v.FieldInInt32Pointer = &ValidFieldInInt32Pointer
	v.FieldInInt64Pointer = &ValidFieldInInt64Pointer
	v.FieldInUintPointer = &ValidFieldInUintPointer
	v.FieldInUint8Pointer = &ValidFieldInUint8Pointer
	v.FieldInUint16Pointer = &ValidFieldInUint16Pointer
	v.FieldInUint32Pointer = &ValidFieldInUint32Pointer
	v.FieldInUint64Pointer = &ValidFieldInUint64Pointer
	v.FieldInFloat32Pointer = &ValidFieldInFloat32Pointer
	v.FieldInFloat64Pointer = &ValidFieldInFloat64Pointer
	v.FieldInBoolPointer = &ValidFieldInBoolPointer
	v.FieldInStringSlicePointer = &ValidFieldInStringSlicePointer
	v.FieldInIntSlicePointer = &ValidFieldInIntSlicePointer
	v.FieldInInt8SlicePointer = &ValidFieldInInt8SlicePointer
	v.FieldInInt16SlicePointer = &ValidFieldInInt16SlicePointer
	v.FieldInInt32SlicePointer = &ValidFieldInInt32SlicePointer
	v.FieldInInt64SlicePointer = &ValidFieldInInt64SlicePointer
	v.FieldInUintSlicePointer = &ValidFieldInUintSlicePointer
	v.FieldInUint8SlicePointer = &ValidFieldInUint8SlicePointer
	v.FieldInUint16SlicePointer = &ValidFieldInUint16SlicePointer
	v.FieldInUint32SlicePointer = &ValidFieldInUint32SlicePointer
	v.FieldInUint64SlicePointer = &ValidFieldInUint64SlicePointer
	v.FieldInFloat32SlicePointer = &ValidFieldInFloat32SlicePointer
	v.FieldInFloat64SlicePointer = &ValidFieldInFloat64SlicePointer
	v.FieldInBoolSlicePointer = &ValidFieldInBoolSlicePointer
	v.FieldInStringArrayPointer = &ValidFieldInStringArrayPointer
	v.FieldInIntArrayPointer = &ValidFieldInIntArrayPointer
	v.FieldInInt8ArrayPointer = &ValidFieldInInt8ArrayPointer
	v.FieldInInt16ArrayPointer = &ValidFieldInInt16ArrayPointer
	v.FieldInInt32ArrayPointer = &ValidFieldInInt32ArrayPointer
	v.FieldInInt64ArrayPointer = &ValidFieldInInt64ArrayPointer
	v.FieldInUintArrayPointer = &ValidFieldInUintArrayPointer
	v.FieldInUint8ArrayPointer = &ValidFieldInUint8ArrayPointer
	v.FieldInUint16ArrayPointer = &ValidFieldInUint16ArrayPointer
	v.FieldInUint32ArrayPointer = &ValidFieldInUint32ArrayPointer
	v.FieldInUint64ArrayPointer = &ValidFieldInUint64ArrayPointer
	v.FieldInFloat32ArrayPointer = &ValidFieldInFloat32ArrayPointer
	v.FieldInFloat64ArrayPointer = &ValidFieldInFloat64ArrayPointer
	v.FieldInBoolArrayPointer = &ValidFieldInBoolArrayPointer
	v.FieldInStringMapPointer = &ValidFieldInStringMapPointer
	v.FieldInIntMapPointer = &ValidFieldInIntMapPointer
	v.FieldInInt8MapPointer = &ValidFieldInInt8MapPointer
	v.FieldInInt16MapPointer = &ValidFieldInInt16MapPointer
	v.FieldInInt32MapPointer = &ValidFieldInInt32MapPointer
	v.FieldInInt64MapPointer = &ValidFieldInInt64MapPointer
	v.FieldInUintMapPointer = &ValidFieldInUintMapPointer
	v.FieldInUint8MapPointer = &ValidFieldInUint8MapPointer
	v.FieldInUint16MapPointer = &ValidFieldInUint16MapPointer
	v.FieldInUint32MapPointer = &ValidFieldInUint32MapPointer
	v.FieldInUint64MapPointer = &ValidFieldInUint64MapPointer
	v.FieldInFloat32MapPointer = &ValidFieldInFloat32MapPointer
	v.FieldInFloat64MapPointer = &ValidFieldInFloat64MapPointer
	v.FieldInBoolMapPointer = &ValidFieldInBoolMapPointer

	expectedMsgErrors = nil
	errs = inStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("inStructFieldsPointer types tests ok")
}

type ninStructFieldsPointer struct {
	FieldNinStringPointer       *string              `valid:"nin=ab cd ef"`
	FieldNinIntPointer          *int                 `valid:"nin=12 34 56"`
	FieldNinInt8Pointer         *int8                `valid:"nin=12 34 56"`
	FieldNinInt16Pointer        *int16               `valid:"nin=12 34 56"`
	FieldNinInt32Pointer        *int32               `valid:"nin=12 34 56"`
	FieldNinInt64Pointer        *int64               `valid:"nin=12 34 56"`
	FieldNinUintPointer         *uint                `valid:"nin=12 34 56"`
	FieldNinUint8Pointer        *uint8               `valid:"nin=12 34 56"`
	FieldNinUint16Pointer       *uint16              `valid:"nin=12 34 56"`
	FieldNinUint32Pointer       *uint32              `valid:"nin=12 34 56"`
	FieldNinUint64Pointer       *uint64              `valid:"nin=12 34 56"`
	FieldNinFloat32Pointer      *float32             `valid:"nin=11.11 22.22 33.33"`
	FieldNinFloat64Pointer      *float64             `valid:"nin=11.11 22.22 33.33"`
	FieldNinBoolPointer         *bool                `valid:"nin=true"`
	FieldNinStringSlicePointer  *[]string            `valid:"nin=ab cd ef"`
	FieldNinIntSlicePointer     *[]int               `valid:"nin=12 34 56"`
	FieldNinInt8SlicePointer    *[]int8              `valid:"nin=12 34 56"`
	FieldNinInt16SlicePointer   *[]int16             `valid:"nin=12 34 56"`
	FieldNinInt32SlicePointer   *[]int32             `valid:"nin=12 34 56"`
	FieldNinInt64SlicePointer   *[]int64             `valid:"nin=12 34 56"`
	FieldNinUintSlicePointer    *[]uint              `valid:"nin=12 34 56"`
	FieldNinUint8SlicePointer   *[]uint8             `valid:"nin=12 34 56"`
	FieldNinUint16SlicePointer  *[]uint16            `valid:"nin=12 34 56"`
	FieldNinUint32SlicePointer  *[]uint32            `valid:"nin=12 34 56"`
	FieldNinUint64SlicePointer  *[]uint64            `valid:"nin=12 34 56"`
	FieldNinFloat32SlicePointer *[]float32           `valid:"nin=11.11 22.22 33.33"`
	FieldNinFloat64SlicePointer *[]float64           `valid:"nin=11.11 22.22 33.33"`
	FieldNinBoolSlicePointer    *[]bool              `valid:"nin=true"`
	FieldNinStringArrayPointer  *[3]string           `valid:"nin=ab cd ef"`
	FieldNinIntArrayPointer     *[3]int              `valid:"nin=12 34 56"`
	FieldNinInt8ArrayPointer    *[3]int8             `valid:"nin=12 34 56"`
	FieldNinInt16ArrayPointer   *[3]int16            `valid:"nin=12 34 56"`
	FieldNinInt32ArrayPointer   *[3]int32            `valid:"nin=12 34 56"`
	FieldNinInt64ArrayPointer   *[3]int64            `valid:"nin=12 34 56"`
	FieldNinUintArrayPointer    *[3]uint             `valid:"nin=12 34 56"`
	FieldNinUint8ArrayPointer   *[3]uint8            `valid:"nin=12 34 56"`
	FieldNinUint16ArrayPointer  *[3]uint16           `valid:"nin=12 34 56"`
	FieldNinUint32ArrayPointer  *[3]uint32           `valid:"nin=12 34 56"`
	FieldNinUint64ArrayPointer  *[3]uint64           `valid:"nin=12 34 56"`
	FieldNinFloat32ArrayPointer *[3]float32          `valid:"nin=11.11 22.22 33.33"`
	FieldNinFloat64ArrayPointer *[3]float64          `valid:"nin=11.11 22.22 33.33"`
	FieldNinBoolArrayPointer    *[3]bool             `valid:"nin=true"`
	FieldNinStringMapPointer    *map[string]string   `valid:"nin=a b c"`
	FieldNinIntMapPointer       *map[int]int         `valid:"nin=1 2 3"`
	FieldNinInt8MapPointer      *map[int8]int8       `valid:"nin=1 2 3"`
	FieldNinInt16MapPointer     *map[int16]int16     `valid:"nin=1 2 3"`
	FieldNinInt32MapPointer     *map[int32]int32     `valid:"nin=1 2 3"`
	FieldNinInt64MapPointer     *map[int64]int64     `valid:"nin=1 2 3"`
	FieldNinUintMapPointer      *map[uint]uint       `valid:"nin=1 2 3"`
	FieldNinUint8MapPointer     *map[uint8]uint8     `valid:"nin=1 2 3"`
	FieldNinUint16MapPointer    *map[uint16]uint16   `valid:"nin=1 2 3"`
	FieldNinUint32MapPointer    *map[uint32]uint32   `valid:"nin=1 2 3"`
	FieldNinUint64MapPointer    *map[uint64]uint64   `valid:"nin=1 2 3"`
	FieldNinFloat32MapPointer   *map[float32]float32 `valid:"nin=11.11 22.22 33.33"`
	FieldNinFloat64MapPointer   *map[float64]float64 `valid:"nin=11.11 22.22 33.33"`
	FieldNinBoolMapPointer      *map[bool]bool       `valid:"nin=false"`
}

func ninStructFieldsPointerTests() {
	log.Println("starting ninStructFieldsPointer types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (nil values)
	v := &ninStructFieldsPointer{}
	expectedMsgErrors = []string{
		"FieldNinStringPointer must not be one of 'ab' 'cd' 'ef'",
		"FieldNinIntPointer must not be one of '12' '34' '56'",
		"FieldNinInt8Pointer must not be one of '12' '34' '56'",
		"FieldNinInt16Pointer must not be one of '12' '34' '56'",
		"FieldNinInt32Pointer must not be one of '12' '34' '56'",
		"FieldNinInt64Pointer must not be one of '12' '34' '56'",
		"FieldNinUintPointer must not be one of '12' '34' '56'",
		"FieldNinUint8Pointer must not be one of '12' '34' '56'",
		"FieldNinUint16Pointer must not be one of '12' '34' '56'",
		"FieldNinUint32Pointer must not be one of '12' '34' '56'",
		"FieldNinUint64Pointer must not be one of '12' '34' '56'",
		"FieldNinFloat32Pointer must not be one of '11.11' '22.22' '33.33'",
		"FieldNinFloat64Pointer must not be one of '11.11' '22.22' '33.33'",
		"FieldNinBoolPointer must not be one of 'true'",
		"FieldNinStringSlicePointer elements must not be one of 'ab' 'cd' 'ef'",
		"FieldNinIntSlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinInt8SlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinInt16SlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinInt32SlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinInt64SlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinUintSlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinUint8SlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinUint16SlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinUint32SlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinUint64SlicePointer elements must not be one of '12' '34' '56'",
		"FieldNinFloat32SlicePointer elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinFloat64SlicePointer elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinBoolSlicePointer elements must not be one of 'true'",
		"FieldNinStringArrayPointer elements must not be one of 'ab' 'cd' 'ef'",
		"FieldNinIntArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinInt8ArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinInt16ArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinInt32ArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinInt64ArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinUintArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinUint8ArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinUint16ArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinUint32ArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinUint64ArrayPointer elements must not be one of '12' '34' '56'",
		"FieldNinFloat32ArrayPointer elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinFloat64ArrayPointer elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinBoolArrayPointer elements must not be one of 'true'",
		"FieldNinStringMapPointer elements must not be one of 'a' 'b' 'c'",
		"FieldNinIntMapPointer elements must not be one of '1' '2' '3'",
		"FieldNinInt8MapPointer elements must not be one of '1' '2' '3'",
		"FieldNinInt16MapPointer elements must not be one of '1' '2' '3'",
		"FieldNinInt32MapPointer elements must not be one of '1' '2' '3'",
		"FieldNinInt64MapPointer elements must not be one of '1' '2' '3'",
		"FieldNinUintMapPointer elements must not be one of '1' '2' '3'",
		"FieldNinUint8MapPointer elements must not be one of '1' '2' '3'",
		"FieldNinUint16MapPointer elements must not be one of '1' '2' '3'",
		"FieldNinUint32MapPointer elements must not be one of '1' '2' '3'",
		"FieldNinUint64MapPointer elements must not be one of '1' '2' '3'",
		"FieldNinFloat32MapPointer elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinFloat64MapPointer elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinBoolMapPointer elements must not be one of 'false'",
	}
	errs = ninStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All failure scenarios (invalid cases)
	var InvalidFieldNinStringPointer string = "cd"
	var InvalidFieldNinIntPointer int = 34
	var InvalidFieldNinInt8Pointer int8 = 34
	var InvalidFieldNinInt16Pointer int16 = 34
	var InvalidFieldNinInt32Pointer int32 = 34
	var InvalidFieldNinInt64Pointer int64 = 34
	var InvalidFieldNinUintPointer uint = 34
	var InvalidFieldNinUint8Pointer uint8 = 34
	var InvalidFieldNinUint16Pointer uint16 = 34
	var InvalidFieldNinUint32Pointer uint32 = 34
	var InvalidFieldNinUint64Pointer uint64 = 34
	var InvalidFieldNinFloat32Pointer float32 = 22.22
	var InvalidFieldNinFloat64Pointer float64 = 22.22
	var InvalidFieldNinBoolPointer bool = true
	var InvalidFieldNinStringSlicePointer []string = []string{"ab", "ef"}
	var InvalidFieldNinIntSlicePointer []int = []int{12, 78, 56}
	var InvalidFieldNinInt8SlicePointer []int8 = []int8{12, 78, 56}
	var InvalidFieldNinInt16SlicePointer []int16 = []int16{12, 78, 56}
	var InvalidFieldNinInt32SlicePointer []int32 = []int32{12, 78, 56}
	var InvalidFieldNinInt64SlicePointer []int64 = []int64{12, 78, 56}
	var InvalidFieldNinUintSlicePointer []uint = []uint{12, 78, 56}
	var InvalidFieldNinUint8SlicePointer []uint8 = []uint8{12, 78, 56}
	var InvalidFieldNinUint16SlicePointer []uint16 = []uint16{12, 78, 56}
	var InvalidFieldNinUint32SlicePointer []uint32 = []uint32{12, 78, 56}
	var InvalidFieldNinUint64SlicePointer []uint64 = []uint64{12, 78, 56}
	var InvalidFieldNinFloat32SlicePointer []float32 = []float32{11.11, 44.44, 33.33}
	var InvalidFieldNinFloat64SlicePointer []float64 = []float64{11.11, 44.44, 33.33}
	var InvalidFieldNinBoolSlicePointer []bool = []bool{true, false, true}
	var InvalidFieldNinStringArrayPointer [3]string = [3]string{"ab", "gh", "ef"}
	var InvalidFieldNinIntArrayPointer [3]int = [3]int{12, 78, 56}
	var InvalidFieldNinInt8ArrayPointer [3]int8 = [3]int8{12, 78, 56}
	var InvalidFieldNinInt16ArrayPointer [3]int16 = [3]int16{12, 78, 56}
	var InvalidFieldNinInt32ArrayPointer [3]int32 = [3]int32{12, 78, 56}
	var InvalidFieldNinInt64ArrayPointer [3]int64 = [3]int64{12, 78, 56}
	var InvalidFieldNinUintArrayPointer [3]uint = [3]uint{12, 78, 56}
	var InvalidFieldNinUint8ArrayPointer [3]uint8 = [3]uint8{12, 78, 56}
	var InvalidFieldNinUint16ArrayPointer [3]uint16 = [3]uint16{12, 78, 56}
	var InvalidFieldNinUint32ArrayPointer [3]uint32 = [3]uint32{12, 78, 56}
	var InvalidFieldNinUint64ArrayPointer [3]uint64 = [3]uint64{12, 78, 56}
	var InvalidFieldNinFloat32ArrayPointer [3]float32 = [3]float32{11.11, 44.44, 33.33}
	var InvalidFieldNinFloat64ArrayPointer [3]float64 = [3]float64{11.11, 44.44, 33.33}
	var InvalidFieldNinBoolArrayPointer [3]bool = [3]bool{true, false, true}
	var InvalidFieldNinStringMapPointer map[string]string = map[string]string{"a": "1", "d": "9", "c": "3"}
	var InvalidFieldNinIntMapPointer map[int]int = map[int]int{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinInt8MapPointer map[int8]int8 = map[int8]int8{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinInt16MapPointer map[int16]int16 = map[int16]int16{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinInt32MapPointer map[int32]int32 = map[int32]int32{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinInt64MapPointer map[int64]int64 = map[int64]int64{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinUintMapPointer map[uint]uint = map[uint]uint{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinUint8MapPointer map[uint8]uint8 = map[uint8]uint8{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinUint16MapPointer map[uint16]uint16 = map[uint16]uint16{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinUint32MapPointer map[uint32]uint32 = map[uint32]uint32{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinUint64MapPointer map[uint64]uint64 = map[uint64]uint64{1: 11, 4: 44, 3: 33}
	var InvalidFieldNinFloat32MapPointer map[float32]float32 = map[float32]float32{11.11: 11.11, 44.44: 44.44, 33.33: 33.33}
	var InvalidFieldNinFloat64MapPointer map[float64]float64 = map[float64]float64{11.11: 11.11, 44.44: 44.44, 33.33: 33.33}
	var InvalidFieldNinBoolMapPointer map[bool]bool = map[bool]bool{true: true, false: false}

	v = &ninStructFieldsPointer{}
	v.FieldNinStringPointer = &InvalidFieldNinStringPointer
	v.FieldNinIntPointer = &InvalidFieldNinIntPointer
	v.FieldNinInt8Pointer = &InvalidFieldNinInt8Pointer
	v.FieldNinInt16Pointer = &InvalidFieldNinInt16Pointer
	v.FieldNinInt32Pointer = &InvalidFieldNinInt32Pointer
	v.FieldNinInt64Pointer = &InvalidFieldNinInt64Pointer
	v.FieldNinUintPointer = &InvalidFieldNinUintPointer
	v.FieldNinUint8Pointer = &InvalidFieldNinUint8Pointer
	v.FieldNinUint16Pointer = &InvalidFieldNinUint16Pointer
	v.FieldNinUint32Pointer = &InvalidFieldNinUint32Pointer
	v.FieldNinUint64Pointer = &InvalidFieldNinUint64Pointer
	v.FieldNinFloat32Pointer = &InvalidFieldNinFloat32Pointer
	v.FieldNinFloat64Pointer = &InvalidFieldNinFloat64Pointer
	v.FieldNinBoolPointer = &InvalidFieldNinBoolPointer
	v.FieldNinStringSlicePointer = &InvalidFieldNinStringSlicePointer
	v.FieldNinIntSlicePointer = &InvalidFieldNinIntSlicePointer
	v.FieldNinInt8SlicePointer = &InvalidFieldNinInt8SlicePointer
	v.FieldNinInt16SlicePointer = &InvalidFieldNinInt16SlicePointer
	v.FieldNinInt32SlicePointer = &InvalidFieldNinInt32SlicePointer
	v.FieldNinInt64SlicePointer = &InvalidFieldNinInt64SlicePointer
	v.FieldNinUintSlicePointer = &InvalidFieldNinUintSlicePointer
	v.FieldNinUint8SlicePointer = &InvalidFieldNinUint8SlicePointer
	v.FieldNinUint16SlicePointer = &InvalidFieldNinUint16SlicePointer
	v.FieldNinUint32SlicePointer = &InvalidFieldNinUint32SlicePointer
	v.FieldNinUint64SlicePointer = &InvalidFieldNinUint64SlicePointer
	v.FieldNinFloat32SlicePointer = &InvalidFieldNinFloat32SlicePointer
	v.FieldNinFloat64SlicePointer = &InvalidFieldNinFloat64SlicePointer
	v.FieldNinBoolSlicePointer = &InvalidFieldNinBoolSlicePointer
	v.FieldNinStringArrayPointer = &InvalidFieldNinStringArrayPointer
	v.FieldNinIntArrayPointer = &InvalidFieldNinIntArrayPointer
	v.FieldNinInt8ArrayPointer = &InvalidFieldNinInt8ArrayPointer
	v.FieldNinInt16ArrayPointer = &InvalidFieldNinInt16ArrayPointer
	v.FieldNinInt32ArrayPointer = &InvalidFieldNinInt32ArrayPointer
	v.FieldNinInt64ArrayPointer = &InvalidFieldNinInt64ArrayPointer
	v.FieldNinUintArrayPointer = &InvalidFieldNinUintArrayPointer
	v.FieldNinUint8ArrayPointer = &InvalidFieldNinUint8ArrayPointer
	v.FieldNinUint16ArrayPointer = &InvalidFieldNinUint16ArrayPointer
	v.FieldNinUint32ArrayPointer = &InvalidFieldNinUint32ArrayPointer
	v.FieldNinUint64ArrayPointer = &InvalidFieldNinUint64ArrayPointer
	v.FieldNinFloat32ArrayPointer = &InvalidFieldNinFloat32ArrayPointer
	v.FieldNinFloat64ArrayPointer = &InvalidFieldNinFloat64ArrayPointer
	v.FieldNinBoolArrayPointer = &InvalidFieldNinBoolArrayPointer
	v.FieldNinStringMapPointer = &InvalidFieldNinStringMapPointer
	v.FieldNinIntMapPointer = &InvalidFieldNinIntMapPointer
	v.FieldNinInt8MapPointer = &InvalidFieldNinInt8MapPointer
	v.FieldNinInt16MapPointer = &InvalidFieldNinInt16MapPointer
	v.FieldNinInt32MapPointer = &InvalidFieldNinInt32MapPointer
	v.FieldNinInt64MapPointer = &InvalidFieldNinInt64MapPointer
	v.FieldNinUintMapPointer = &InvalidFieldNinUintMapPointer
	v.FieldNinUint8MapPointer = &InvalidFieldNinUint8MapPointer
	v.FieldNinUint16MapPointer = &InvalidFieldNinUint16MapPointer
	v.FieldNinUint32MapPointer = &InvalidFieldNinUint32MapPointer
	v.FieldNinUint64MapPointer = &InvalidFieldNinUint64MapPointer
	v.FieldNinFloat32MapPointer = &InvalidFieldNinFloat32MapPointer
	v.FieldNinFloat64MapPointer = &InvalidFieldNinFloat64MapPointer
	v.FieldNinBoolMapPointer = &InvalidFieldNinBoolMapPointer

	errs = ninStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	// Test case 3: All valid cases
	var ValidFieldNinStringPointer string = "fg"
	var ValidFieldNinIntPointer int = 78
	var ValidFieldNinInt8Pointer int8 = 78
	var ValidFieldNinInt16Pointer int16 = 78
	var ValidFieldNinInt32Pointer int32 = 78
	var ValidFieldNinInt64Pointer int64 = 78
	var ValidFieldNinUintPointer uint = 78
	var ValidFieldNinUint8Pointer uint8 = 78
	var ValidFieldNinUint16Pointer uint16 = 78
	var ValidFieldNinUint32Pointer uint32 = 78
	var ValidFieldNinUint64Pointer uint64 = 78
	var ValidFieldNinFloat32Pointer float32 = 44.44
	var ValidFieldNinFloat64Pointer float64 = 44.44
	var ValidFieldNinBoolPointer bool = false
	var ValidFieldNinStringSlicePointer []string = []string{"gh", "ij", "kl"}
	var ValidFieldNinIntSlicePointer []int = []int{78, 91}
	var ValidFieldNinInt8SlicePointer []int8 = []int8{78, 91}
	var ValidFieldNinInt16SlicePointer []int16 = []int16{78, 91}
	var ValidFieldNinInt32SlicePointer []int32 = []int32{78, 91}
	var ValidFieldNinInt64SlicePointer []int64 = []int64{78, 91}
	var ValidFieldNinUintSlicePointer []uint = []uint{78, 91}
	var ValidFieldNinUint8SlicePointer []uint8 = []uint8{78, 91}
	var ValidFieldNinUint16SlicePointer []uint16 = []uint16{78, 91}
	var ValidFieldNinUint32SlicePointer []uint32 = []uint32{78, 91}
	var ValidFieldNinUint64SlicePointer []uint64 = []uint64{78, 91}
	var ValidFieldNinFloat32SlicePointer []float32 = []float32{44.44, 55.55, 66.66}
	var ValidFieldNinFloat64SlicePointer []float64 = []float64{44.44, 55.55, 66.66}
	var ValidFieldNinBoolSlicePointer []bool = []bool{false, false, false}
	var ValidFieldNinStringArrayPointer [3]string = [3]string{"gh", "ij", "kl"}
	var ValidFieldNinIntArrayPointer [3]int = [3]int{78, 91, 23}
	var ValidFieldNinInt8ArrayPointer [3]int8 = [3]int8{78, 91, 23}
	var ValidFieldNinInt16ArrayPointer [3]int16 = [3]int16{78, 91, 23}
	var ValidFieldNinInt32ArrayPointer [3]int32 = [3]int32{78, 91, 23}
	var ValidFieldNinInt64ArrayPointer [3]int64 = [3]int64{78, 91, 23}
	var ValidFieldNinUintArrayPointer [3]uint = [3]uint{78, 91, 23}
	var ValidFieldNinUint8ArrayPointer [3]uint8 = [3]uint8{78, 91, 23}
	var ValidFieldNinUint16ArrayPointer [3]uint16 = [3]uint16{78, 91, 23}
	var ValidFieldNinUint32ArrayPointer [3]uint32 = [3]uint32{78, 91, 23}
	var ValidFieldNinUint64ArrayPointer [3]uint64 = [3]uint64{78, 91, 23}
	var ValidFieldNinFloat32ArrayPointer [3]float32 = [3]float32{44.44, 55.55, 66.66}
	var ValidFieldNinFloat64ArrayPointer [3]float64 = [3]float64{44.44, 55.55, 66.66}
	var ValidFieldNinBoolArrayPointer [3]bool = [3]bool{false, false, false}
	var ValidFieldNinStringMapPointer map[string]string = map[string]string{"d": "1", "e": "2", "f": "3"}
	var ValidFieldNinIntMapPointer map[int]int = map[int]int{5: 55, 6: 66, 7: 77}
	var ValidFieldNinInt8MapPointer map[int8]int8 = map[int8]int8{5: 55, 6: 66, 7: 77}
	var ValidFieldNinInt16MapPointer map[int16]int16 = map[int16]int16{5: 55, 6: 66, 7: 77}
	var ValidFieldNinInt32MapPointer map[int32]int32 = map[int32]int32{5: 55, 6: 66, 7: 77}
	var ValidFieldNinInt64MapPointer map[int64]int64 = map[int64]int64{5: 55, 6: 66, 7: 77}
	var ValidFieldNinUintMapPointer map[uint]uint = map[uint]uint{5: 55, 6: 66, 7: 77}
	var ValidFieldNinUint8MapPointer map[uint8]uint8 = map[uint8]uint8{5: 55, 6: 66, 7: 77}
	var ValidFieldNinUint16MapPointer map[uint16]uint16 = map[uint16]uint16{5: 55, 6: 66, 7: 77}
	var ValidFieldNinUint32MapPointer map[uint32]uint32 = map[uint32]uint32{5: 55, 6: 66, 7: 77}
	var ValidFieldNinUint64MapPointer map[uint64]uint64 = map[uint64]uint64{5: 55, 6: 66, 7: 77}
	var ValidFieldNinFloat32MapPointer map[float32]float32 = map[float32]float32{44.44: 44.44, 55.55: 55.55, 66.66: 66.66}
	var ValidFieldNinFloat64MapPointer map[float64]float64 = map[float64]float64{44.44: 44.44, 55.55: 55.55, 66.66: 66.66}
	var ValidFieldNinBoolMapPointer map[bool]bool = map[bool]bool{true: true}

	v = &ninStructFieldsPointer{}
	v.FieldNinStringPointer = &ValidFieldNinStringPointer
	v.FieldNinIntPointer = &ValidFieldNinIntPointer
	v.FieldNinInt8Pointer = &ValidFieldNinInt8Pointer
	v.FieldNinInt16Pointer = &ValidFieldNinInt16Pointer
	v.FieldNinInt32Pointer = &ValidFieldNinInt32Pointer
	v.FieldNinInt64Pointer = &ValidFieldNinInt64Pointer
	v.FieldNinUintPointer = &ValidFieldNinUintPointer
	v.FieldNinUint8Pointer = &ValidFieldNinUint8Pointer
	v.FieldNinUint16Pointer = &ValidFieldNinUint16Pointer
	v.FieldNinUint32Pointer = &ValidFieldNinUint32Pointer
	v.FieldNinUint64Pointer = &ValidFieldNinUint64Pointer
	v.FieldNinFloat32Pointer = &ValidFieldNinFloat32Pointer
	v.FieldNinFloat64Pointer = &ValidFieldNinFloat64Pointer
	v.FieldNinBoolPointer = &ValidFieldNinBoolPointer
	v.FieldNinStringSlicePointer = &ValidFieldNinStringSlicePointer
	v.FieldNinIntSlicePointer = &ValidFieldNinIntSlicePointer
	v.FieldNinInt8SlicePointer = &ValidFieldNinInt8SlicePointer
	v.FieldNinInt16SlicePointer = &ValidFieldNinInt16SlicePointer
	v.FieldNinInt32SlicePointer = &ValidFieldNinInt32SlicePointer
	v.FieldNinInt64SlicePointer = &ValidFieldNinInt64SlicePointer
	v.FieldNinUintSlicePointer = &ValidFieldNinUintSlicePointer
	v.FieldNinUint8SlicePointer = &ValidFieldNinUint8SlicePointer
	v.FieldNinUint16SlicePointer = &ValidFieldNinUint16SlicePointer
	v.FieldNinUint32SlicePointer = &ValidFieldNinUint32SlicePointer
	v.FieldNinUint64SlicePointer = &ValidFieldNinUint64SlicePointer
	v.FieldNinFloat32SlicePointer = &ValidFieldNinFloat32SlicePointer
	v.FieldNinFloat64SlicePointer = &ValidFieldNinFloat64SlicePointer
	v.FieldNinBoolSlicePointer = &ValidFieldNinBoolSlicePointer
	v.FieldNinStringArrayPointer = &ValidFieldNinStringArrayPointer
	v.FieldNinIntArrayPointer = &ValidFieldNinIntArrayPointer
	v.FieldNinInt8ArrayPointer = &ValidFieldNinInt8ArrayPointer
	v.FieldNinInt16ArrayPointer = &ValidFieldNinInt16ArrayPointer
	v.FieldNinInt32ArrayPointer = &ValidFieldNinInt32ArrayPointer
	v.FieldNinInt64ArrayPointer = &ValidFieldNinInt64ArrayPointer
	v.FieldNinUintArrayPointer = &ValidFieldNinUintArrayPointer
	v.FieldNinUint8ArrayPointer = &ValidFieldNinUint8ArrayPointer
	v.FieldNinUint16ArrayPointer = &ValidFieldNinUint16ArrayPointer
	v.FieldNinUint32ArrayPointer = &ValidFieldNinUint32ArrayPointer
	v.FieldNinUint64ArrayPointer = &ValidFieldNinUint64ArrayPointer
	v.FieldNinFloat32ArrayPointer = &ValidFieldNinFloat32ArrayPointer
	v.FieldNinFloat64ArrayPointer = &ValidFieldNinFloat64ArrayPointer
	v.FieldNinBoolArrayPointer = &ValidFieldNinBoolArrayPointer
	v.FieldNinStringMapPointer = &ValidFieldNinStringMapPointer
	v.FieldNinIntMapPointer = &ValidFieldNinIntMapPointer
	v.FieldNinInt8MapPointer = &ValidFieldNinInt8MapPointer
	v.FieldNinInt16MapPointer = &ValidFieldNinInt16MapPointer
	v.FieldNinInt32MapPointer = &ValidFieldNinInt32MapPointer
	v.FieldNinInt64MapPointer = &ValidFieldNinInt64MapPointer
	v.FieldNinUintMapPointer = &ValidFieldNinUintMapPointer
	v.FieldNinUint8MapPointer = &ValidFieldNinUint8MapPointer
	v.FieldNinUint16MapPointer = &ValidFieldNinUint16MapPointer
	v.FieldNinUint32MapPointer = &ValidFieldNinUint32MapPointer
	v.FieldNinUint64MapPointer = &ValidFieldNinUint64MapPointer
	v.FieldNinFloat32MapPointer = &ValidFieldNinFloat32MapPointer
	v.FieldNinFloat64MapPointer = &ValidFieldNinFloat64MapPointer
	v.FieldNinBoolMapPointer = &ValidFieldNinBoolMapPointer

	expectedMsgErrors = nil
	errs = ninStructFieldsPointerValidate(v)
	assertExpectedErrorMsgs("testcase 3", errs, expectedMsgErrors)

	log.Println("ninStructFieldsPointer types tests ok")
}
