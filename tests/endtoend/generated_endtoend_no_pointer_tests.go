// Code generated by TestGen. DO NOT EDIT.

package main

import (
	"log"
)

func noPointerTests() {
	emailStructFieldsTests()
	requiredStructFieldsTests()
	eqStructFieldsTests()
	neqStructFieldsTests()
	gtStructFieldsTests()
	gteStructFieldsTests()
	ltStructFieldsTests()
	lteStructFieldsTests()
	minStructFieldsTests()
	maxStructFieldsTests()
	eq_ignore_caseStructFieldsTests()
	neq_ignore_caseStructFieldsTests()
	lenStructFieldsTests()
	inStructFieldsTests()
	ninStructFieldsTests()

}

type emailStructFields struct {
	FieldEmailString string `valid:"email"`
}

func emailStructFieldsTests() {
	log.Println("starting emailStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &emailStructFields{}
	expectedMsgErrors = []string{
		"FieldEmailString must be a valid email",
	}

	v.FieldEmailString = "abcde@example"

	errs = emailStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &emailStructFields{}
	v.FieldEmailString = "abcde@example.com"

	expectedMsgErrors = nil
	errs = emailStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("emailStructFields types tests ok")
}

type requiredStructFields struct {
	FieldRequiredString       string              `valid:"required"`
	FieldRequiredInt          int                 `valid:"required"`
	FieldRequiredInt8         int8                `valid:"required"`
	FieldRequiredInt16        int16               `valid:"required"`
	FieldRequiredInt32        int32               `valid:"required"`
	FieldRequiredInt64        int64               `valid:"required"`
	FieldRequiredUint         uint                `valid:"required"`
	FieldRequiredUint8        uint8               `valid:"required"`
	FieldRequiredUint16       uint16              `valid:"required"`
	FieldRequiredUint32       uint32              `valid:"required"`
	FieldRequiredUint64       uint64              `valid:"required"`
	FieldRequiredFloat32      float32             `valid:"required"`
	FieldRequiredFloat64      float64             `valid:"required"`
	FieldRequiredBool         bool                `valid:"required"`
	FieldRequiredStringSlice  []string            `valid:"required"`
	FieldRequiredIntSlice     []int               `valid:"required"`
	FieldRequiredInt8Slice    []int8              `valid:"required"`
	FieldRequiredInt16Slice   []int16             `valid:"required"`
	FieldRequiredInt32Slice   []int32             `valid:"required"`
	FieldRequiredInt64Slice   []int64             `valid:"required"`
	FieldRequiredUintSlice    []uint              `valid:"required"`
	FieldRequiredUint8Slice   []uint8             `valid:"required"`
	FieldRequiredUint16Slice  []uint16            `valid:"required"`
	FieldRequiredUint32Slice  []uint32            `valid:"required"`
	FieldRequiredUint64Slice  []uint64            `valid:"required"`
	FieldRequiredFloat32Slice []float32           `valid:"required"`
	FieldRequiredFloat64Slice []float64           `valid:"required"`
	FieldRequiredBoolSlice    []bool              `valid:"required"`
	FieldRequiredStringMap    map[string]string   `valid:"required"`
	FieldRequiredIntMap       map[int]int         `valid:"required"`
	FieldRequiredInt8Map      map[int8]int8       `valid:"required"`
	FieldRequiredInt16Map     map[int16]int16     `valid:"required"`
	FieldRequiredInt32Map     map[int32]int32     `valid:"required"`
	FieldRequiredInt64Map     map[int64]int64     `valid:"required"`
	FieldRequiredUintMap      map[uint]uint       `valid:"required"`
	FieldRequiredUint8Map     map[uint8]uint8     `valid:"required"`
	FieldRequiredUint16Map    map[uint16]uint16   `valid:"required"`
	FieldRequiredUint32Map    map[uint32]uint32   `valid:"required"`
	FieldRequiredUint64Map    map[uint64]uint64   `valid:"required"`
	FieldRequiredFloat32Map   map[float32]float32 `valid:"required"`
	FieldRequiredFloat64Map   map[float64]float64 `valid:"required"`
	FieldRequiredBoolMap      map[bool]bool       `valid:"required"`
}

func requiredStructFieldsTests() {
	log.Println("starting requiredStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &requiredStructFields{}
	expectedMsgErrors = []string{
		"FieldRequiredString is required",
		"FieldRequiredInt is required",
		"FieldRequiredInt8 is required",
		"FieldRequiredInt16 is required",
		"FieldRequiredInt32 is required",
		"FieldRequiredInt64 is required",
		"FieldRequiredUint is required",
		"FieldRequiredUint8 is required",
		"FieldRequiredUint16 is required",
		"FieldRequiredUint32 is required",
		"FieldRequiredUint64 is required",
		"FieldRequiredFloat32 is required",
		"FieldRequiredFloat64 is required",
		"FieldRequiredBool is required",
		"FieldRequiredStringSlice must not be empty",
		"FieldRequiredIntSlice must not be empty",
		"FieldRequiredInt8Slice must not be empty",
		"FieldRequiredInt16Slice must not be empty",
		"FieldRequiredInt32Slice must not be empty",
		"FieldRequiredInt64Slice must not be empty",
		"FieldRequiredUintSlice must not be empty",
		"FieldRequiredUint8Slice must not be empty",
		"FieldRequiredUint16Slice must not be empty",
		"FieldRequiredUint32Slice must not be empty",
		"FieldRequiredUint64Slice must not be empty",
		"FieldRequiredFloat32Slice must not be empty",
		"FieldRequiredFloat64Slice must not be empty",
		"FieldRequiredBoolSlice must not be empty",
		"FieldRequiredStringMap must not be empty",
		"FieldRequiredIntMap must not be empty",
		"FieldRequiredInt8Map must not be empty",
		"FieldRequiredInt16Map must not be empty",
		"FieldRequiredInt32Map must not be empty",
		"FieldRequiredInt64Map must not be empty",
		"FieldRequiredUintMap must not be empty",
		"FieldRequiredUint8Map must not be empty",
		"FieldRequiredUint16Map must not be empty",
		"FieldRequiredUint32Map must not be empty",
		"FieldRequiredUint64Map must not be empty",
		"FieldRequiredFloat32Map must not be empty",
		"FieldRequiredFloat64Map must not be empty",
		"FieldRequiredBoolMap must not be empty",
	}

	v.FieldRequiredString = ""
	v.FieldRequiredInt = 0
	v.FieldRequiredInt8 = 0
	v.FieldRequiredInt16 = 0
	v.FieldRequiredInt32 = 0
	v.FieldRequiredInt64 = 0
	v.FieldRequiredUint = 0
	v.FieldRequiredUint8 = 0
	v.FieldRequiredUint16 = 0
	v.FieldRequiredUint32 = 0
	v.FieldRequiredUint64 = 0
	v.FieldRequiredFloat32 = 0
	v.FieldRequiredFloat64 = 0
	v.FieldRequiredBool = false
	v.FieldRequiredStringSlice = []string{}
	v.FieldRequiredIntSlice = []int{}
	v.FieldRequiredInt8Slice = []int8{}
	v.FieldRequiredInt16Slice = []int16{}
	v.FieldRequiredInt32Slice = []int32{}
	v.FieldRequiredInt64Slice = []int64{}
	v.FieldRequiredUintSlice = []uint{}
	v.FieldRequiredUint8Slice = []uint8{}
	v.FieldRequiredUint16Slice = []uint16{}
	v.FieldRequiredUint32Slice = []uint32{}
	v.FieldRequiredUint64Slice = []uint64{}
	v.FieldRequiredFloat32Slice = []float32{}
	v.FieldRequiredFloat64Slice = []float64{}
	v.FieldRequiredBoolSlice = []bool{}
	v.FieldRequiredStringMap = map[string]string{}
	v.FieldRequiredIntMap = map[int]int{}
	v.FieldRequiredInt8Map = map[int8]int8{}
	v.FieldRequiredInt16Map = map[int16]int16{}
	v.FieldRequiredInt32Map = map[int32]int32{}
	v.FieldRequiredInt64Map = map[int64]int64{}
	v.FieldRequiredUintMap = map[uint]uint{}
	v.FieldRequiredUint8Map = map[uint8]uint8{}
	v.FieldRequiredUint16Map = map[uint16]uint16{}
	v.FieldRequiredUint32Map = map[uint32]uint32{}
	v.FieldRequiredUint64Map = map[uint64]uint64{}
	v.FieldRequiredFloat32Map = map[float32]float32{}
	v.FieldRequiredFloat64Map = map[float64]float64{}
	v.FieldRequiredBoolMap = map[bool]bool{}

	errs = requiredStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &requiredStructFields{}
	v.FieldRequiredString = "abcde"
	v.FieldRequiredInt = 32
	v.FieldRequiredInt8 = 32
	v.FieldRequiredInt16 = 32
	v.FieldRequiredInt32 = 32
	v.FieldRequiredInt64 = 32
	v.FieldRequiredUint = 32
	v.FieldRequiredUint8 = 32
	v.FieldRequiredUint16 = 32
	v.FieldRequiredUint32 = 32
	v.FieldRequiredUint64 = 32
	v.FieldRequiredFloat32 = 12.34
	v.FieldRequiredFloat64 = 12.34
	v.FieldRequiredBool = true
	v.FieldRequiredStringSlice = []string{"abcde"}
	v.FieldRequiredIntSlice = []int{32}
	v.FieldRequiredInt8Slice = []int8{32}
	v.FieldRequiredInt16Slice = []int16{32}
	v.FieldRequiredInt32Slice = []int32{32}
	v.FieldRequiredInt64Slice = []int64{32}
	v.FieldRequiredUintSlice = []uint{32}
	v.FieldRequiredUint8Slice = []uint8{32}
	v.FieldRequiredUint16Slice = []uint16{32}
	v.FieldRequiredUint32Slice = []uint32{32}
	v.FieldRequiredUint64Slice = []uint64{32}
	v.FieldRequiredFloat32Slice = []float32{12.34}
	v.FieldRequiredFloat64Slice = []float64{12.34}
	v.FieldRequiredBoolSlice = []bool{true}
	v.FieldRequiredStringMap = map[string]string{"abcde": "value"}
	v.FieldRequiredIntMap = map[int]int{32: 64}
	v.FieldRequiredInt8Map = map[int8]int8{32: 64}
	v.FieldRequiredInt16Map = map[int16]int16{32: 64}
	v.FieldRequiredInt32Map = map[int32]int32{32: 64}
	v.FieldRequiredInt64Map = map[int64]int64{32: 64}
	v.FieldRequiredUintMap = map[uint]uint{32: 64}
	v.FieldRequiredUint8Map = map[uint8]uint8{32: 64}
	v.FieldRequiredUint16Map = map[uint16]uint16{32: 64}
	v.FieldRequiredUint32Map = map[uint32]uint32{32: 64}
	v.FieldRequiredUint64Map = map[uint64]uint64{32: 64}
	v.FieldRequiredFloat32Map = map[float32]float32{12.34: 56.78}
	v.FieldRequiredFloat64Map = map[float64]float64{12.34: 56.78}
	v.FieldRequiredBoolMap = map[bool]bool{true: true}

	expectedMsgErrors = nil
	errs = requiredStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("requiredStructFields types tests ok")
}

type eqStructFields struct {
	FieldEqString  string  `valid:"eq=abcde"`
	FieldEqInt     int     `valid:"eq=32"`
	FieldEqInt8    int8    `valid:"eq=32"`
	FieldEqInt16   int16   `valid:"eq=32"`
	FieldEqInt32   int32   `valid:"eq=32"`
	FieldEqInt64   int64   `valid:"eq=32"`
	FieldEqUint    uint    `valid:"eq=32"`
	FieldEqUint8   uint8   `valid:"eq=32"`
	FieldEqUint16  uint16  `valid:"eq=32"`
	FieldEqUint32  uint32  `valid:"eq=32"`
	FieldEqUint64  uint64  `valid:"eq=32"`
	FieldEqFloat32 float32 `valid:"eq=12.34"`
	FieldEqFloat64 float64 `valid:"eq=12.34"`
	FieldEqBool    bool    `valid:"eq=true"`
}

func eqStructFieldsTests() {
	log.Println("starting eqStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &eqStructFields{}
	expectedMsgErrors = []string{
		"FieldEqString must be equal to 'abcde'",
		"FieldEqInt must be equal to 32",
		"FieldEqInt8 must be equal to 32",
		"FieldEqInt16 must be equal to 32",
		"FieldEqInt32 must be equal to 32",
		"FieldEqInt64 must be equal to 32",
		"FieldEqUint must be equal to 32",
		"FieldEqUint8 must be equal to 32",
		"FieldEqUint16 must be equal to 32",
		"FieldEqUint32 must be equal to 32",
		"FieldEqUint64 must be equal to 32",
		"FieldEqFloat32 must be equal to 12.34",
		"FieldEqFloat64 must be equal to 12.34",
		"FieldEqBool must be equal to true",
	}

	v.FieldEqString = "fghij"
	v.FieldEqInt = 64
	v.FieldEqInt8 = 64
	v.FieldEqInt16 = 64
	v.FieldEqInt32 = 64
	v.FieldEqInt64 = 64
	v.FieldEqUint = 64
	v.FieldEqUint8 = 64
	v.FieldEqUint16 = 64
	v.FieldEqUint32 = 64
	v.FieldEqUint64 = 64
	v.FieldEqFloat32 = 34.56
	v.FieldEqFloat64 = 34.56
	v.FieldEqBool = false

	errs = eqStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &eqStructFields{}
	v.FieldEqString = "abcde"
	v.FieldEqInt = 32
	v.FieldEqInt8 = 32
	v.FieldEqInt16 = 32
	v.FieldEqInt32 = 32
	v.FieldEqInt64 = 32
	v.FieldEqUint = 32
	v.FieldEqUint8 = 32
	v.FieldEqUint16 = 32
	v.FieldEqUint32 = 32
	v.FieldEqUint64 = 32
	v.FieldEqFloat32 = 12.34
	v.FieldEqFloat64 = 12.34
	v.FieldEqBool = true

	expectedMsgErrors = nil
	errs = eqStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("eqStructFields types tests ok")
}

type neqStructFields struct {
	FieldNeqString  string  `valid:"neq=abcde"`
	FieldNeqInt     int     `valid:"neq=32"`
	FieldNeqInt8    int8    `valid:"neq=32"`
	FieldNeqInt16   int16   `valid:"neq=32"`
	FieldNeqInt32   int32   `valid:"neq=32"`
	FieldNeqInt64   int64   `valid:"neq=32"`
	FieldNeqUint    uint    `valid:"neq=32"`
	FieldNeqUint8   uint8   `valid:"neq=32"`
	FieldNeqUint16  uint16  `valid:"neq=32"`
	FieldNeqUint32  uint32  `valid:"neq=32"`
	FieldNeqUint64  uint64  `valid:"neq=32"`
	FieldNeqFloat32 float32 `valid:"neq=12.34"`
	FieldNeqFloat64 float64 `valid:"neq=12.34"`
	FieldNeqBool    bool    `valid:"neq=true"`
}

func neqStructFieldsTests() {
	log.Println("starting neqStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &neqStructFields{}
	expectedMsgErrors = []string{
		"FieldNeqString must not be equal to 'abcde'",
		"FieldNeqInt must not be equal to 32",
		"FieldNeqInt8 must not be equal to 32",
		"FieldNeqInt16 must not be equal to 32",
		"FieldNeqInt32 must not be equal to 32",
		"FieldNeqInt64 must not be equal to 32",
		"FieldNeqUint must not be equal to 32",
		"FieldNeqUint8 must not be equal to 32",
		"FieldNeqUint16 must not be equal to 32",
		"FieldNeqUint32 must not be equal to 32",
		"FieldNeqUint64 must not be equal to 32",
		"FieldNeqFloat32 must not be equal to 12.34",
		"FieldNeqFloat64 must not be equal to 12.34",
		"FieldNeqBool must not be equal to true",
	}

	v.FieldNeqString = "abcde"
	v.FieldNeqInt = 32
	v.FieldNeqInt8 = 32
	v.FieldNeqInt16 = 32
	v.FieldNeqInt32 = 32
	v.FieldNeqInt64 = 32
	v.FieldNeqUint = 32
	v.FieldNeqUint8 = 32
	v.FieldNeqUint16 = 32
	v.FieldNeqUint32 = 32
	v.FieldNeqUint64 = 32
	v.FieldNeqFloat32 = 12.34
	v.FieldNeqFloat64 = 12.34
	v.FieldNeqBool = true

	errs = neqStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &neqStructFields{}
	v.FieldNeqString = "fghij"
	v.FieldNeqInt = 64
	v.FieldNeqInt8 = 64
	v.FieldNeqInt16 = 64
	v.FieldNeqInt32 = 64
	v.FieldNeqInt64 = 64
	v.FieldNeqUint = 64
	v.FieldNeqUint8 = 64
	v.FieldNeqUint16 = 64
	v.FieldNeqUint32 = 64
	v.FieldNeqUint64 = 64
	v.FieldNeqFloat32 = 34.56
	v.FieldNeqFloat64 = 34.56
	v.FieldNeqBool = false

	expectedMsgErrors = nil
	errs = neqStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("neqStructFields types tests ok")
}

type gtStructFields struct {
	FieldGtInt     int     `valid:"gt=32"`
	FieldGtInt8    int8    `valid:"gt=32"`
	FieldGtInt16   int16   `valid:"gt=32"`
	FieldGtInt32   int32   `valid:"gt=32"`
	FieldGtInt64   int64   `valid:"gt=32"`
	FieldGtUint    uint    `valid:"gt=32"`
	FieldGtUint8   uint8   `valid:"gt=32"`
	FieldGtUint16  uint16  `valid:"gt=32"`
	FieldGtUint32  uint32  `valid:"gt=32"`
	FieldGtUint64  uint64  `valid:"gt=32"`
	FieldGtFloat32 float32 `valid:"gt=12.34"`
	FieldGtFloat64 float64 `valid:"gt=12.34"`
}

func gtStructFieldsTests() {
	log.Println("starting gtStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &gtStructFields{}
	expectedMsgErrors = []string{
		"FieldGtInt must be > 32",
		"FieldGtInt8 must be > 32",
		"FieldGtInt16 must be > 32",
		"FieldGtInt32 must be > 32",
		"FieldGtInt64 must be > 32",
		"FieldGtUint must be > 32",
		"FieldGtUint8 must be > 32",
		"FieldGtUint16 must be > 32",
		"FieldGtUint32 must be > 32",
		"FieldGtUint64 must be > 32",
		"FieldGtFloat32 must be > 12.34",
		"FieldGtFloat64 must be > 12.34",
	}

	v.FieldGtInt = 31
	v.FieldGtInt8 = 31
	v.FieldGtInt16 = 31
	v.FieldGtInt32 = 31
	v.FieldGtInt64 = 31
	v.FieldGtUint = 31
	v.FieldGtUint8 = 31
	v.FieldGtUint16 = 31
	v.FieldGtUint32 = 31
	v.FieldGtUint64 = 31
	v.FieldGtFloat32 = 12.34
	v.FieldGtFloat64 = 12.34

	errs = gtStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &gtStructFields{}
	v.FieldGtInt = 33
	v.FieldGtInt8 = 33
	v.FieldGtInt16 = 33
	v.FieldGtInt32 = 33
	v.FieldGtInt64 = 33
	v.FieldGtUint = 33
	v.FieldGtUint8 = 33
	v.FieldGtUint16 = 33
	v.FieldGtUint32 = 33
	v.FieldGtUint64 = 33
	v.FieldGtFloat32 = 12.35
	v.FieldGtFloat64 = 12.35

	expectedMsgErrors = nil
	errs = gtStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("gtStructFields types tests ok")
}

type gteStructFields struct {
	FieldGteInt     int     `valid:"gte=32"`
	FieldGteInt8    int8    `valid:"gte=32"`
	FieldGteInt16   int16   `valid:"gte=32"`
	FieldGteInt32   int32   `valid:"gte=32"`
	FieldGteInt64   int64   `valid:"gte=32"`
	FieldGteUint    uint    `valid:"gte=32"`
	FieldGteUint8   uint8   `valid:"gte=32"`
	FieldGteUint16  uint16  `valid:"gte=32"`
	FieldGteUint32  uint32  `valid:"gte=32"`
	FieldGteUint64  uint64  `valid:"gte=32"`
	FieldGteFloat32 float32 `valid:"gte=12.34"`
	FieldGteFloat64 float64 `valid:"gte=12.34"`
}

func gteStructFieldsTests() {
	log.Println("starting gteStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &gteStructFields{}
	expectedMsgErrors = []string{
		"FieldGteInt must be >= 32",
		"FieldGteInt8 must be >= 32",
		"FieldGteInt16 must be >= 32",
		"FieldGteInt32 must be >= 32",
		"FieldGteInt64 must be >= 32",
		"FieldGteUint must be >= 32",
		"FieldGteUint8 must be >= 32",
		"FieldGteUint16 must be >= 32",
		"FieldGteUint32 must be >= 32",
		"FieldGteUint64 must be >= 32",
		"FieldGteFloat32 must be >= 12.34",
		"FieldGteFloat64 must be >= 12.34",
	}

	v.FieldGteInt = 31
	v.FieldGteInt8 = 31
	v.FieldGteInt16 = 31
	v.FieldGteInt32 = 31
	v.FieldGteInt64 = 31
	v.FieldGteUint = 31
	v.FieldGteUint8 = 31
	v.FieldGteUint16 = 31
	v.FieldGteUint32 = 31
	v.FieldGteUint64 = 31
	v.FieldGteFloat32 = 12.33
	v.FieldGteFloat64 = 12.33

	errs = gteStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &gteStructFields{}
	v.FieldGteInt = 32
	v.FieldGteInt8 = 32
	v.FieldGteInt16 = 32
	v.FieldGteInt32 = 32
	v.FieldGteInt64 = 32
	v.FieldGteUint = 32
	v.FieldGteUint8 = 32
	v.FieldGteUint16 = 32
	v.FieldGteUint32 = 32
	v.FieldGteUint64 = 32
	v.FieldGteFloat32 = 12.34
	v.FieldGteFloat64 = 12.34

	expectedMsgErrors = nil
	errs = gteStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("gteStructFields types tests ok")
}

type ltStructFields struct {
	FieldLtInt     int     `valid:"lt=32"`
	FieldLtInt8    int8    `valid:"lt=32"`
	FieldLtInt16   int16   `valid:"lt=32"`
	FieldLtInt32   int32   `valid:"lt=32"`
	FieldLtInt64   int64   `valid:"lt=32"`
	FieldLtUint    uint    `valid:"lt=32"`
	FieldLtUint8   uint8   `valid:"lt=32"`
	FieldLtUint16  uint16  `valid:"lt=32"`
	FieldLtUint32  uint32  `valid:"lt=32"`
	FieldLtUint64  uint64  `valid:"lt=32"`
	FieldLtFloat32 float32 `valid:"lt=12.34"`
	FieldLtFloat64 float64 `valid:"lt=12.34"`
}

func ltStructFieldsTests() {
	log.Println("starting ltStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &ltStructFields{}
	expectedMsgErrors = []string{
		"FieldLtInt must be < 32",
		"FieldLtInt8 must be < 32",
		"FieldLtInt16 must be < 32",
		"FieldLtInt32 must be < 32",
		"FieldLtInt64 must be < 32",
		"FieldLtUint must be < 32",
		"FieldLtUint8 must be < 32",
		"FieldLtUint16 must be < 32",
		"FieldLtUint32 must be < 32",
		"FieldLtUint64 must be < 32",
		"FieldLtFloat32 must be < 12.34",
		"FieldLtFloat64 must be < 12.34",
	}

	v.FieldLtInt = 33
	v.FieldLtInt8 = 33
	v.FieldLtInt16 = 33
	v.FieldLtInt32 = 33
	v.FieldLtInt64 = 33
	v.FieldLtUint = 33
	v.FieldLtUint8 = 33
	v.FieldLtUint16 = 33
	v.FieldLtUint32 = 33
	v.FieldLtUint64 = 33
	v.FieldLtFloat32 = 12.35
	v.FieldLtFloat64 = 12.35

	errs = ltStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &ltStructFields{}
	v.FieldLtInt = 31
	v.FieldLtInt8 = 31
	v.FieldLtInt16 = 31
	v.FieldLtInt32 = 31
	v.FieldLtInt64 = 31
	v.FieldLtUint = 31
	v.FieldLtUint8 = 31
	v.FieldLtUint16 = 31
	v.FieldLtUint32 = 31
	v.FieldLtUint64 = 31
	v.FieldLtFloat32 = 12.33
	v.FieldLtFloat64 = 12.33

	expectedMsgErrors = nil
	errs = ltStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("ltStructFields types tests ok")
}

type lteStructFields struct {
	FieldLteInt     int     `valid:"lte=32"`
	FieldLteInt8    int8    `valid:"lte=32"`
	FieldLteInt16   int16   `valid:"lte=32"`
	FieldLteInt32   int32   `valid:"lte=32"`
	FieldLteInt64   int64   `valid:"lte=32"`
	FieldLteUint    uint    `valid:"lte=32"`
	FieldLteUint8   uint8   `valid:"lte=32"`
	FieldLteUint16  uint16  `valid:"lte=32"`
	FieldLteUint32  uint32  `valid:"lte=32"`
	FieldLteUint64  uint64  `valid:"lte=32"`
	FieldLteFloat32 float32 `valid:"lte=12.34"`
	FieldLteFloat64 float64 `valid:"lte=12.34"`
}

func lteStructFieldsTests() {
	log.Println("starting lteStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &lteStructFields{}
	expectedMsgErrors = []string{
		"FieldLteInt must be <= 32",
		"FieldLteInt8 must be <= 32",
		"FieldLteInt16 must be <= 32",
		"FieldLteInt32 must be <= 32",
		"FieldLteInt64 must be <= 32",
		"FieldLteUint must be <= 32",
		"FieldLteUint8 must be <= 32",
		"FieldLteUint16 must be <= 32",
		"FieldLteUint32 must be <= 32",
		"FieldLteUint64 must be <= 32",
		"FieldLteFloat32 must be <= 12.34",
		"FieldLteFloat64 must be <= 12.34",
	}

	v.FieldLteInt = 33
	v.FieldLteInt8 = 33
	v.FieldLteInt16 = 33
	v.FieldLteInt32 = 33
	v.FieldLteInt64 = 33
	v.FieldLteUint = 33
	v.FieldLteUint8 = 33
	v.FieldLteUint16 = 33
	v.FieldLteUint32 = 33
	v.FieldLteUint64 = 33
	v.FieldLteFloat32 = 12.35
	v.FieldLteFloat64 = 12.35

	errs = lteStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &lteStructFields{}
	v.FieldLteInt = 32
	v.FieldLteInt8 = 32
	v.FieldLteInt16 = 32
	v.FieldLteInt32 = 32
	v.FieldLteInt64 = 32
	v.FieldLteUint = 32
	v.FieldLteUint8 = 32
	v.FieldLteUint16 = 32
	v.FieldLteUint32 = 32
	v.FieldLteUint64 = 32
	v.FieldLteFloat32 = 12.34
	v.FieldLteFloat64 = 12.34

	expectedMsgErrors = nil
	errs = lteStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("lteStructFields types tests ok")
}

type minStructFields struct {
	FieldMinString       string              `valid:"min=5"`
	FieldMinStringSlice  []string            `valid:"min=2"`
	FieldMinIntSlice     []int               `valid:"min=2"`
	FieldMinInt8Slice    []int8              `valid:"min=2"`
	FieldMinInt16Slice   []int16             `valid:"min=2"`
	FieldMinInt32Slice   []int32             `valid:"min=2"`
	FieldMinInt64Slice   []int64             `valid:"min=2"`
	FieldMinUintSlice    []uint              `valid:"min=2"`
	FieldMinUint8Slice   []uint8             `valid:"min=2"`
	FieldMinUint16Slice  []uint16            `valid:"min=2"`
	FieldMinUint32Slice  []uint32            `valid:"min=2"`
	FieldMinUint64Slice  []uint64            `valid:"min=2"`
	FieldMinFloat32Slice []float32           `valid:"min=2"`
	FieldMinFloat64Slice []float64           `valid:"min=2"`
	FieldMinBoolSlice    []bool              `valid:"min=2"`
	FieldMinStringMap    map[string]string   `valid:"min=2"`
	FieldMinIntMap       map[int]int         `valid:"min=2"`
	FieldMinInt8Map      map[int8]int8       `valid:"min=2"`
	FieldMinInt16Map     map[int16]int16     `valid:"min=2"`
	FieldMinInt32Map     map[int32]int32     `valid:"min=2"`
	FieldMinInt64Map     map[int64]int64     `valid:"min=2"`
	FieldMinUintMap      map[uint]uint       `valid:"min=2"`
	FieldMinUint8Map     map[uint8]uint8     `valid:"min=2"`
	FieldMinUint16Map    map[uint16]uint16   `valid:"min=2"`
	FieldMinUint32Map    map[uint32]uint32   `valid:"min=2"`
	FieldMinUint64Map    map[uint64]uint64   `valid:"min=2"`
	FieldMinFloat32Map   map[float32]float32 `valid:"min=2"`
	FieldMinFloat64Map   map[float64]float64 `valid:"min=2"`
	FieldMinBoolMap      map[bool]bool       `valid:"min=2"`
}

func minStructFieldsTests() {
	log.Println("starting minStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &minStructFields{}
	expectedMsgErrors = []string{
		"FieldMinString length must be >= 5",
		"FieldMinStringSlice must have at least 2 elements",
		"FieldMinIntSlice must have at least 2 elements",
		"FieldMinInt8Slice must have at least 2 elements",
		"FieldMinInt16Slice must have at least 2 elements",
		"FieldMinInt32Slice must have at least 2 elements",
		"FieldMinInt64Slice must have at least 2 elements",
		"FieldMinUintSlice must have at least 2 elements",
		"FieldMinUint8Slice must have at least 2 elements",
		"FieldMinUint16Slice must have at least 2 elements",
		"FieldMinUint32Slice must have at least 2 elements",
		"FieldMinUint64Slice must have at least 2 elements",
		"FieldMinFloat32Slice must have at least 2 elements",
		"FieldMinFloat64Slice must have at least 2 elements",
		"FieldMinBoolSlice must have at least 2 elements",
		"FieldMinStringMap must have at least 2 elements",
		"FieldMinIntMap must have at least 2 elements",
		"FieldMinInt8Map must have at least 2 elements",
		"FieldMinInt16Map must have at least 2 elements",
		"FieldMinInt32Map must have at least 2 elements",
		"FieldMinInt64Map must have at least 2 elements",
		"FieldMinUintMap must have at least 2 elements",
		"FieldMinUint8Map must have at least 2 elements",
		"FieldMinUint16Map must have at least 2 elements",
		"FieldMinUint32Map must have at least 2 elements",
		"FieldMinUint64Map must have at least 2 elements",
		"FieldMinFloat32Map must have at least 2 elements",
		"FieldMinFloat64Map must have at least 2 elements",
		"FieldMinBoolMap must have at least 2 elements",
	}

	v.FieldMinString = "abc"
	v.FieldMinStringSlice = []string{"abc"}
	v.FieldMinIntSlice = []int{65}
	v.FieldMinInt8Slice = []int8{65}
	v.FieldMinInt16Slice = []int16{65}
	v.FieldMinInt32Slice = []int32{65}
	v.FieldMinInt64Slice = []int64{65}
	v.FieldMinUintSlice = []uint{65}
	v.FieldMinUint8Slice = []uint8{65}
	v.FieldMinUint16Slice = []uint16{65}
	v.FieldMinUint32Slice = []uint32{65}
	v.FieldMinUint64Slice = []uint64{65}
	v.FieldMinFloat32Slice = []float32{65.65}
	v.FieldMinFloat64Slice = []float64{65.65}
	v.FieldMinBoolSlice = []bool{true}
	v.FieldMinStringMap = map[string]string{"a": "1"}
	v.FieldMinIntMap = map[int]int{1: 65}
	v.FieldMinInt8Map = map[int8]int8{1: 65}
	v.FieldMinInt16Map = map[int16]int16{1: 65}
	v.FieldMinInt32Map = map[int32]int32{1: 65}
	v.FieldMinInt64Map = map[int64]int64{1: 65}
	v.FieldMinUintMap = map[uint]uint{1: 65}
	v.FieldMinUint8Map = map[uint8]uint8{1: 65}
	v.FieldMinUint16Map = map[uint16]uint16{1: 65}
	v.FieldMinUint32Map = map[uint32]uint32{1: 65}
	v.FieldMinUint64Map = map[uint64]uint64{1: 65}
	v.FieldMinFloat32Map = map[float32]float32{1: 65.65}
	v.FieldMinFloat64Map = map[float64]float64{1: 65.65}
	v.FieldMinBoolMap = map[bool]bool{true: true}

	errs = minStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &minStructFields{}
	v.FieldMinString = "abcde"
	v.FieldMinStringSlice = []string{"abc", "def"}
	v.FieldMinIntSlice = []int{65, 67}
	v.FieldMinInt8Slice = []int8{65, 67}
	v.FieldMinInt16Slice = []int16{65, 67}
	v.FieldMinInt32Slice = []int32{65, 67}
	v.FieldMinInt64Slice = []int64{65, 67}
	v.FieldMinUintSlice = []uint{65, 67}
	v.FieldMinUint8Slice = []uint8{65, 67}
	v.FieldMinUint16Slice = []uint16{65, 67}
	v.FieldMinUint32Slice = []uint32{65, 67}
	v.FieldMinUint64Slice = []uint64{65, 67}
	v.FieldMinFloat32Slice = []float32{65.65, 67.67}
	v.FieldMinFloat64Slice = []float64{65.65, 67.67}
	v.FieldMinBoolSlice = []bool{true, false}
	v.FieldMinStringMap = map[string]string{"a": "1", "b": "2"}
	v.FieldMinIntMap = map[int]int{1: 65, 2: 67}
	v.FieldMinInt8Map = map[int8]int8{1: 65, 2: 67}
	v.FieldMinInt16Map = map[int16]int16{1: 65, 2: 67}
	v.FieldMinInt32Map = map[int32]int32{1: 65, 2: 67}
	v.FieldMinInt64Map = map[int64]int64{1: 65, 2: 67}
	v.FieldMinUintMap = map[uint]uint{1: 65, 2: 67}
	v.FieldMinUint8Map = map[uint8]uint8{1: 65, 2: 67}
	v.FieldMinUint16Map = map[uint16]uint16{1: 65, 2: 67}
	v.FieldMinUint32Map = map[uint32]uint32{1: 65, 2: 67}
	v.FieldMinUint64Map = map[uint64]uint64{1: 65, 2: 67}
	v.FieldMinFloat32Map = map[float32]float32{1: 65.65, 2: 67.67}
	v.FieldMinFloat64Map = map[float64]float64{1: 65.65, 2: 67.67}
	v.FieldMinBoolMap = map[bool]bool{true: true, false: false}

	expectedMsgErrors = nil
	errs = minStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("minStructFields types tests ok")
}

type maxStructFields struct {
	FieldMaxString       string              `valid:"max=3"`
	FieldMaxStringSlice  []string            `valid:"max=2"`
	FieldMaxIntSlice     []int               `valid:"max=2"`
	FieldMaxInt8Slice    []int8              `valid:"max=2"`
	FieldMaxInt16Slice   []int16             `valid:"max=2"`
	FieldMaxInt32Slice   []int32             `valid:"max=2"`
	FieldMaxInt64Slice   []int64             `valid:"max=2"`
	FieldMaxUintSlice    []uint              `valid:"max=2"`
	FieldMaxUint8Slice   []uint8             `valid:"max=2"`
	FieldMaxUint16Slice  []uint16            `valid:"max=2"`
	FieldMaxUint32Slice  []uint32            `valid:"max=2"`
	FieldMaxUint64Slice  []uint64            `valid:"max=2"`
	FieldMaxFloat32Slice []float32           `valid:"max=2"`
	FieldMaxFloat64Slice []float64           `valid:"max=2"`
	FieldMaxBoolSlice    []bool              `valid:"max=2"`
	FieldMaxStringMap    map[string]string   `valid:"max=2"`
	FieldMaxIntMap       map[int]int         `valid:"max=2"`
	FieldMaxInt8Map      map[int8]int8       `valid:"max=2"`
	FieldMaxInt16Map     map[int16]int16     `valid:"max=2"`
	FieldMaxInt32Map     map[int32]int32     `valid:"max=2"`
	FieldMaxInt64Map     map[int64]int64     `valid:"max=2"`
	FieldMaxUintMap      map[uint]uint       `valid:"max=2"`
	FieldMaxUint8Map     map[uint8]uint8     `valid:"max=2"`
	FieldMaxUint16Map    map[uint16]uint16   `valid:"max=2"`
	FieldMaxUint32Map    map[uint32]uint32   `valid:"max=2"`
	FieldMaxUint64Map    map[uint64]uint64   `valid:"max=2"`
	FieldMaxFloat32Map   map[float32]float32 `valid:"max=2"`
	FieldMaxFloat64Map   map[float64]float64 `valid:"max=2"`
	FieldMaxBoolMap      map[bool]bool       `valid:"max=1"`
}

func maxStructFieldsTests() {
	log.Println("starting maxStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &maxStructFields{}
	expectedMsgErrors = []string{
		"FieldMaxString length must be <= 3",
		"FieldMaxStringSlice must have at most 2 elements",
		"FieldMaxIntSlice must have at most 2 elements",
		"FieldMaxInt8Slice must have at most 2 elements",
		"FieldMaxInt16Slice must have at most 2 elements",
		"FieldMaxInt32Slice must have at most 2 elements",
		"FieldMaxInt64Slice must have at most 2 elements",
		"FieldMaxUintSlice must have at most 2 elements",
		"FieldMaxUint8Slice must have at most 2 elements",
		"FieldMaxUint16Slice must have at most 2 elements",
		"FieldMaxUint32Slice must have at most 2 elements",
		"FieldMaxUint64Slice must have at most 2 elements",
		"FieldMaxFloat32Slice must have at most 2 elements",
		"FieldMaxFloat64Slice must have at most 2 elements",
		"FieldMaxBoolSlice must have at most 2 elements",
		"FieldMaxStringMap must have at most 2 elements",
		"FieldMaxIntMap must have at most 2 elements",
		"FieldMaxInt8Map must have at most 2 elements",
		"FieldMaxInt16Map must have at most 2 elements",
		"FieldMaxInt32Map must have at most 2 elements",
		"FieldMaxInt64Map must have at most 2 elements",
		"FieldMaxUintMap must have at most 2 elements",
		"FieldMaxUint8Map must have at most 2 elements",
		"FieldMaxUint16Map must have at most 2 elements",
		"FieldMaxUint32Map must have at most 2 elements",
		"FieldMaxUint64Map must have at most 2 elements",
		"FieldMaxFloat32Map must have at most 2 elements",
		"FieldMaxFloat64Map must have at most 2 elements",
		"FieldMaxBoolMap must have at most 1 elements",
	}

	v.FieldMaxString = "abcde"
	v.FieldMaxStringSlice = []string{"abc", "def", "ghi"}
	v.FieldMaxIntSlice = []int{65, 66, 67}
	v.FieldMaxInt8Slice = []int8{65, 66, 67}
	v.FieldMaxInt16Slice = []int16{65, 66, 67}
	v.FieldMaxInt32Slice = []int32{65, 66, 67}
	v.FieldMaxInt64Slice = []int64{65, 66, 67}
	v.FieldMaxUintSlice = []uint{65, 66, 67}
	v.FieldMaxUint8Slice = []uint8{65, 66, 67}
	v.FieldMaxUint16Slice = []uint16{65, 66, 67}
	v.FieldMaxUint32Slice = []uint32{65, 66, 67}
	v.FieldMaxUint64Slice = []uint64{65, 66, 67}
	v.FieldMaxFloat32Slice = []float32{65.65, 66.66, 67.67}
	v.FieldMaxFloat64Slice = []float64{65.65, 66.66, 67.67}
	v.FieldMaxBoolSlice = []bool{true, false, true}
	v.FieldMaxStringMap = map[string]string{"a": "1", "b": "2", "c": "3"}
	v.FieldMaxIntMap = map[int]int{1: 65, 2: 67, 3: 68}
	v.FieldMaxInt8Map = map[int8]int8{1: 65, 2: 67, 3: 68}
	v.FieldMaxInt16Map = map[int16]int16{1: 65, 2: 67, 3: 68}
	v.FieldMaxInt32Map = map[int32]int32{1: 65, 2: 67, 3: 68}
	v.FieldMaxInt64Map = map[int64]int64{1: 65, 2: 67, 3: 68}
	v.FieldMaxUintMap = map[uint]uint{1: 65, 2: 67, 3: 68}
	v.FieldMaxUint8Map = map[uint8]uint8{1: 65, 2: 67, 3: 68}
	v.FieldMaxUint16Map = map[uint16]uint16{1: 65, 2: 67, 3: 68}
	v.FieldMaxUint32Map = map[uint32]uint32{1: 65, 2: 67, 3: 68}
	v.FieldMaxUint64Map = map[uint64]uint64{1: 65, 2: 67, 3: 68}
	v.FieldMaxFloat32Map = map[float32]float32{1: 65.65, 2: 66.66, 3: 67.67}
	v.FieldMaxFloat64Map = map[float64]float64{1: 65.65, 2: 66.66, 3: 67.67}
	v.FieldMaxBoolMap = map[bool]bool{true: true, false: false}

	errs = maxStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &maxStructFields{}
	v.FieldMaxString = "abc"
	v.FieldMaxStringSlice = []string{"abc", "def"}
	v.FieldMaxIntSlice = []int{65, 67}
	v.FieldMaxInt8Slice = []int8{65, 67}
	v.FieldMaxInt16Slice = []int16{65, 67}
	v.FieldMaxInt32Slice = []int32{65, 67}
	v.FieldMaxInt64Slice = []int64{65, 67}
	v.FieldMaxUintSlice = []uint{65, 67}
	v.FieldMaxUint8Slice = []uint8{65, 67}
	v.FieldMaxUint16Slice = []uint16{65, 67}
	v.FieldMaxUint32Slice = []uint32{65, 67}
	v.FieldMaxUint64Slice = []uint64{65, 67}
	v.FieldMaxFloat32Slice = []float32{65.65, 67.67}
	v.FieldMaxFloat64Slice = []float64{65.65, 67.67}
	v.FieldMaxBoolSlice = []bool{true, false}
	v.FieldMaxStringMap = map[string]string{"a": "1", "b": "2"}
	v.FieldMaxIntMap = map[int]int{1: 65, 2: 67}
	v.FieldMaxInt8Map = map[int8]int8{1: 65, 2: 67}
	v.FieldMaxInt16Map = map[int16]int16{1: 65, 2: 67}
	v.FieldMaxInt32Map = map[int32]int32{1: 65, 2: 67}
	v.FieldMaxInt64Map = map[int64]int64{1: 65, 2: 67}
	v.FieldMaxUintMap = map[uint]uint{1: 65, 2: 67}
	v.FieldMaxUint8Map = map[uint8]uint8{1: 65, 2: 67}
	v.FieldMaxUint16Map = map[uint16]uint16{1: 65, 2: 67}
	v.FieldMaxUint32Map = map[uint32]uint32{1: 65, 2: 67}
	v.FieldMaxUint64Map = map[uint64]uint64{1: 65, 2: 67}
	v.FieldMaxFloat32Map = map[float32]float32{1: 65.65, 2: 67.67}
	v.FieldMaxFloat64Map = map[float64]float64{1: 65.65, 2: 67.67}
	v.FieldMaxBoolMap = map[bool]bool{true: true}

	expectedMsgErrors = nil
	errs = maxStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("maxStructFields types tests ok")
}

type eq_ignore_caseStructFields struct {
	FieldEq_ignore_caseString string `valid:"eq_ignore_case=abcde"`
}

func eq_ignore_caseStructFieldsTests() {
	log.Println("starting eq_ignore_caseStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &eq_ignore_caseStructFields{}
	expectedMsgErrors = []string{
		"FieldEq_ignore_caseString must be equal to 'abcde'",
	}

	v.FieldEq_ignore_caseString = "a1b2c3"

	errs = eq_ignore_caseStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &eq_ignore_caseStructFields{}
	v.FieldEq_ignore_caseString = "AbCdE"

	expectedMsgErrors = nil
	errs = eq_ignore_caseStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("eq_ignore_caseStructFields types tests ok")
}

type neq_ignore_caseStructFields struct {
	FieldNeq_ignore_caseString string `valid:"neq_ignore_case=abcde"`
}

func neq_ignore_caseStructFieldsTests() {
	log.Println("starting neq_ignore_caseStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &neq_ignore_caseStructFields{}
	expectedMsgErrors = []string{
		"FieldNeq_ignore_caseString must not be equal to 'abcde'",
	}

	v.FieldNeq_ignore_caseString = "AbCdE"

	errs = neq_ignore_caseStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &neq_ignore_caseStructFields{}
	v.FieldNeq_ignore_caseString = "a1b2c3"

	expectedMsgErrors = nil
	errs = neq_ignore_caseStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("neq_ignore_caseStructFields types tests ok")
}

type lenStructFields struct {
	FieldLenString       string              `valid:"len=2"`
	FieldLenStringSlice  []string            `valid:"len=2"`
	FieldLenIntSlice     []int               `valid:"len=2"`
	FieldLenInt8Slice    []int8              `valid:"len=2"`
	FieldLenInt16Slice   []int16             `valid:"len=2"`
	FieldLenInt32Slice   []int32             `valid:"len=2"`
	FieldLenInt64Slice   []int64             `valid:"len=2"`
	FieldLenUintSlice    []uint              `valid:"len=2"`
	FieldLenUint8Slice   []uint8             `valid:"len=2"`
	FieldLenUint16Slice  []uint16            `valid:"len=2"`
	FieldLenUint32Slice  []uint32            `valid:"len=2"`
	FieldLenUint64Slice  []uint64            `valid:"len=2"`
	FieldLenFloat32Slice []float32           `valid:"len=2"`
	FieldLenFloat64Slice []float64           `valid:"len=2"`
	FieldLenBoolSlice    []bool              `valid:"len=2"`
	FieldLenStringMap    map[string]string   `valid:"len=2"`
	FieldLenIntMap       map[int]int         `valid:"len=2"`
	FieldLenInt8Map      map[int8]int8       `valid:"len=2"`
	FieldLenInt16Map     map[int16]int16     `valid:"len=2"`
	FieldLenInt32Map     map[int32]int32     `valid:"len=2"`
	FieldLenInt64Map     map[int64]int64     `valid:"len=2"`
	FieldLenUintMap      map[uint]uint       `valid:"len=2"`
	FieldLenUint8Map     map[uint8]uint8     `valid:"len=2"`
	FieldLenUint16Map    map[uint16]uint16   `valid:"len=2"`
	FieldLenUint32Map    map[uint32]uint32   `valid:"len=2"`
	FieldLenUint64Map    map[uint64]uint64   `valid:"len=2"`
	FieldLenFloat32Map   map[float32]float32 `valid:"len=2"`
	FieldLenFloat64Map   map[float64]float64 `valid:"len=2"`
	FieldLenBoolMap      map[bool]bool       `valid:"len=2"`
}

func lenStructFieldsTests() {
	log.Println("starting lenStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &lenStructFields{}
	expectedMsgErrors = []string{
		"FieldLenString length must be 2",
		"FieldLenStringSlice must have exactly 2 elements",
		"FieldLenIntSlice must have exactly 2 elements",
		"FieldLenInt8Slice must have exactly 2 elements",
		"FieldLenInt16Slice must have exactly 2 elements",
		"FieldLenInt32Slice must have exactly 2 elements",
		"FieldLenInt64Slice must have exactly 2 elements",
		"FieldLenUintSlice must have exactly 2 elements",
		"FieldLenUint8Slice must have exactly 2 elements",
		"FieldLenUint16Slice must have exactly 2 elements",
		"FieldLenUint32Slice must have exactly 2 elements",
		"FieldLenUint64Slice must have exactly 2 elements",
		"FieldLenFloat32Slice must have exactly 2 elements",
		"FieldLenFloat64Slice must have exactly 2 elements",
		"FieldLenBoolSlice must have exactly 2 elements",
		"FieldLenStringMap must have exactly 2 elements",
		"FieldLenIntMap must have exactly 2 elements",
		"FieldLenInt8Map must have exactly 2 elements",
		"FieldLenInt16Map must have exactly 2 elements",
		"FieldLenInt32Map must have exactly 2 elements",
		"FieldLenInt64Map must have exactly 2 elements",
		"FieldLenUintMap must have exactly 2 elements",
		"FieldLenUint8Map must have exactly 2 elements",
		"FieldLenUint16Map must have exactly 2 elements",
		"FieldLenUint32Map must have exactly 2 elements",
		"FieldLenUint64Map must have exactly 2 elements",
		"FieldLenFloat32Map must have exactly 2 elements",
		"FieldLenFloat64Map must have exactly 2 elements",
		"FieldLenBoolMap must have exactly 2 elements",
	}

	v.FieldLenString = "abcde"
	v.FieldLenStringSlice = []string{"abc", "def", "ghi"}
	v.FieldLenIntSlice = []int{65, 66, 67}
	v.FieldLenInt8Slice = []int8{65, 66, 67}
	v.FieldLenInt16Slice = []int16{65, 66, 67}
	v.FieldLenInt32Slice = []int32{65, 66, 67}
	v.FieldLenInt64Slice = []int64{65, 66, 67}
	v.FieldLenUintSlice = []uint{65, 66, 67}
	v.FieldLenUint8Slice = []uint8{65, 66, 67}
	v.FieldLenUint16Slice = []uint16{65, 66, 67}
	v.FieldLenUint32Slice = []uint32{65, 66, 67}
	v.FieldLenUint64Slice = []uint64{65, 66, 67}
	v.FieldLenFloat32Slice = []float32{65.65, 66.66, 67.67}
	v.FieldLenFloat64Slice = []float64{65.65, 66.66, 67.67}
	v.FieldLenBoolSlice = []bool{true, false, true}
	v.FieldLenStringMap = map[string]string{"a": "1", "b": "2", "c": "3"}
	v.FieldLenIntMap = map[int]int{1: 65, 2: 67, 3: 68}
	v.FieldLenInt8Map = map[int8]int8{1: 65, 2: 67, 3: 68}
	v.FieldLenInt16Map = map[int16]int16{1: 65, 2: 67, 3: 68}
	v.FieldLenInt32Map = map[int32]int32{1: 65, 2: 67, 3: 68}
	v.FieldLenInt64Map = map[int64]int64{1: 65, 2: 67, 3: 68}
	v.FieldLenUintMap = map[uint]uint{1: 65, 2: 67, 3: 68}
	v.FieldLenUint8Map = map[uint8]uint8{1: 65, 2: 67, 3: 68}
	v.FieldLenUint16Map = map[uint16]uint16{1: 65, 2: 67, 3: 68}
	v.FieldLenUint32Map = map[uint32]uint32{1: 65, 2: 67, 3: 68}
	v.FieldLenUint64Map = map[uint64]uint64{1: 65, 2: 67, 3: 68}
	v.FieldLenFloat32Map = map[float32]float32{1: 65.65, 2: 66.66, 3: 67.67}
	v.FieldLenFloat64Map = map[float64]float64{1: 65.65, 2: 66.66, 3: 67.67}
	v.FieldLenBoolMap = map[bool]bool{true: true}

	errs = lenStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &lenStructFields{}
	v.FieldLenString = "ab"
	v.FieldLenStringSlice = []string{"abc", "def"}
	v.FieldLenIntSlice = []int{65, 67}
	v.FieldLenInt8Slice = []int8{65, 67}
	v.FieldLenInt16Slice = []int16{65, 67}
	v.FieldLenInt32Slice = []int32{65, 67}
	v.FieldLenInt64Slice = []int64{65, 67}
	v.FieldLenUintSlice = []uint{65, 67}
	v.FieldLenUint8Slice = []uint8{65, 67}
	v.FieldLenUint16Slice = []uint16{65, 67}
	v.FieldLenUint32Slice = []uint32{65, 67}
	v.FieldLenUint64Slice = []uint64{65, 67}
	v.FieldLenFloat32Slice = []float32{65.65, 67.67}
	v.FieldLenFloat64Slice = []float64{65.65, 67.67}
	v.FieldLenBoolSlice = []bool{true, false}
	v.FieldLenStringMap = map[string]string{"a": "1", "b": "2"}
	v.FieldLenIntMap = map[int]int{1: 65, 2: 67}
	v.FieldLenInt8Map = map[int8]int8{1: 65, 2: 67}
	v.FieldLenInt16Map = map[int16]int16{1: 65, 2: 67}
	v.FieldLenInt32Map = map[int32]int32{1: 65, 2: 67}
	v.FieldLenInt64Map = map[int64]int64{1: 65, 2: 67}
	v.FieldLenUintMap = map[uint]uint{1: 65, 2: 67}
	v.FieldLenUint8Map = map[uint8]uint8{1: 65, 2: 67}
	v.FieldLenUint16Map = map[uint16]uint16{1: 65, 2: 67}
	v.FieldLenUint32Map = map[uint32]uint32{1: 65, 2: 67}
	v.FieldLenUint64Map = map[uint64]uint64{1: 65, 2: 67}
	v.FieldLenFloat32Map = map[float32]float32{1: 65.65, 2: 67.67}
	v.FieldLenFloat64Map = map[float64]float64{1: 65.65, 2: 67.67}
	v.FieldLenBoolMap = map[bool]bool{true: true, false: false}

	expectedMsgErrors = nil
	errs = lenStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("lenStructFields types tests ok")
}

type inStructFields struct {
	FieldInString       string              `valid:"in=ab cd ef"`
	FieldInInt          int                 `valid:"in=12 34 56"`
	FieldInInt8         int8                `valid:"in=12 34 56"`
	FieldInInt16        int16               `valid:"in=12 34 56"`
	FieldInInt32        int32               `valid:"in=12 34 56"`
	FieldInInt64        int64               `valid:"in=12 34 56"`
	FieldInUint         uint                `valid:"in=12 34 56"`
	FieldInUint8        uint8               `valid:"in=12 34 56"`
	FieldInUint16       uint16              `valid:"in=12 34 56"`
	FieldInUint32       uint32              `valid:"in=12 34 56"`
	FieldInUint64       uint64              `valid:"in=12 34 56"`
	FieldInFloat32      float32             `valid:"in=11.11 22.22 33.33"`
	FieldInFloat64      float64             `valid:"in=11.11 22.22 33.33"`
	FieldInBool         bool                `valid:"in=true"`
	FieldInStringSlice  []string            `valid:"in=ab cd ef"`
	FieldInIntSlice     []int               `valid:"in=12 34 56"`
	FieldInInt8Slice    []int8              `valid:"in=12 34 56"`
	FieldInInt16Slice   []int16             `valid:"in=12 34 56"`
	FieldInInt32Slice   []int32             `valid:"in=12 34 56"`
	FieldInInt64Slice   []int64             `valid:"in=12 34 56"`
	FieldInUintSlice    []uint              `valid:"in=12 34 56"`
	FieldInUint8Slice   []uint8             `valid:"in=12 34 56"`
	FieldInUint16Slice  []uint16            `valid:"in=12 34 56"`
	FieldInUint32Slice  []uint32            `valid:"in=12 34 56"`
	FieldInUint64Slice  []uint64            `valid:"in=12 34 56"`
	FieldInFloat32Slice []float32           `valid:"in=11.11 22.22 33.33"`
	FieldInFloat64Slice []float64           `valid:"in=11.11 22.22 33.33"`
	FieldInBoolSlice    []bool              `valid:"in=true"`
	FieldInStringArray  [3]string           `valid:"in=ab cd ef"`
	FieldInIntArray     [3]int              `valid:"in=12 34 56"`
	FieldInInt8Array    [3]int8             `valid:"in=12 34 56"`
	FieldInInt16Array   [3]int16            `valid:"in=12 34 56"`
	FieldInInt32Array   [3]int32            `valid:"in=12 34 56"`
	FieldInInt64Array   [3]int64            `valid:"in=12 34 56"`
	FieldInUintArray    [3]uint             `valid:"in=12 34 56"`
	FieldInUint8Array   [3]uint8            `valid:"in=12 34 56"`
	FieldInUint16Array  [3]uint16           `valid:"in=12 34 56"`
	FieldInUint32Array  [3]uint32           `valid:"in=12 34 56"`
	FieldInUint64Array  [3]uint64           `valid:"in=12 34 56"`
	FieldInFloat32Array [3]float32          `valid:"in=11.11 22.22 33.33"`
	FieldInFloat64Array [3]float64          `valid:"in=11.11 22.22 33.33"`
	FieldInBoolArray    [3]bool             `valid:"in=true"`
	FieldInStringMap    map[string]string   `valid:"in=a b c"`
	FieldInIntMap       map[int]int         `valid:"in=1 2 3"`
	FieldInInt8Map      map[int8]int8       `valid:"in=1 2 3"`
	FieldInInt16Map     map[int16]int16     `valid:"in=1 2 3"`
	FieldInInt32Map     map[int32]int32     `valid:"in=1 2 3"`
	FieldInInt64Map     map[int64]int64     `valid:"in=1 2 3"`
	FieldInUintMap      map[uint]uint       `valid:"in=1 2 3"`
	FieldInUint8Map     map[uint8]uint8     `valid:"in=1 2 3"`
	FieldInUint16Map    map[uint16]uint16   `valid:"in=1 2 3"`
	FieldInUint32Map    map[uint32]uint32   `valid:"in=1 2 3"`
	FieldInUint64Map    map[uint64]uint64   `valid:"in=1 2 3"`
	FieldInFloat32Map   map[float32]float32 `valid:"in=11.11 22.22 33.33"`
	FieldInFloat64Map   map[float64]float64 `valid:"in=11.11 22.22 33.33"`
	FieldInBoolMap      map[bool]bool       `valid:"in=false"`
}

func inStructFieldsTests() {
	log.Println("starting inStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &inStructFields{}
	expectedMsgErrors = []string{
		"FieldInString must be one of 'ab' 'cd' 'ef'",
		"FieldInInt must be one of '12' '34' '56'",
		"FieldInInt8 must be one of '12' '34' '56'",
		"FieldInInt16 must be one of '12' '34' '56'",
		"FieldInInt32 must be one of '12' '34' '56'",
		"FieldInInt64 must be one of '12' '34' '56'",
		"FieldInUint must be one of '12' '34' '56'",
		"FieldInUint8 must be one of '12' '34' '56'",
		"FieldInUint16 must be one of '12' '34' '56'",
		"FieldInUint32 must be one of '12' '34' '56'",
		"FieldInUint64 must be one of '12' '34' '56'",
		"FieldInFloat32 must be one of '11.11' '22.22' '33.33'",
		"FieldInFloat64 must be one of '11.11' '22.22' '33.33'",
		"FieldInBool must be one of 'true'",
		"FieldInStringSlice elements must be one of 'ab' 'cd' 'ef'",
		"FieldInIntSlice elements must be one of '12' '34' '56'",
		"FieldInInt8Slice elements must be one of '12' '34' '56'",
		"FieldInInt16Slice elements must be one of '12' '34' '56'",
		"FieldInInt32Slice elements must be one of '12' '34' '56'",
		"FieldInInt64Slice elements must be one of '12' '34' '56'",
		"FieldInUintSlice elements must be one of '12' '34' '56'",
		"FieldInUint8Slice elements must be one of '12' '34' '56'",
		"FieldInUint16Slice elements must be one of '12' '34' '56'",
		"FieldInUint32Slice elements must be one of '12' '34' '56'",
		"FieldInUint64Slice elements must be one of '12' '34' '56'",
		"FieldInFloat32Slice elements must be one of '11.11' '22.22' '33.33'",
		"FieldInFloat64Slice elements must be one of '11.11' '22.22' '33.33'",
		"FieldInBoolSlice elements must be one of 'true'",
		"FieldInStringArray elements must be one of 'ab' 'cd' 'ef'",
		"FieldInIntArray elements must be one of '12' '34' '56'",
		"FieldInInt8Array elements must be one of '12' '34' '56'",
		"FieldInInt16Array elements must be one of '12' '34' '56'",
		"FieldInInt32Array elements must be one of '12' '34' '56'",
		"FieldInInt64Array elements must be one of '12' '34' '56'",
		"FieldInUintArray elements must be one of '12' '34' '56'",
		"FieldInUint8Array elements must be one of '12' '34' '56'",
		"FieldInUint16Array elements must be one of '12' '34' '56'",
		"FieldInUint32Array elements must be one of '12' '34' '56'",
		"FieldInUint64Array elements must be one of '12' '34' '56'",
		"FieldInFloat32Array elements must be one of '11.11' '22.22' '33.33'",
		"FieldInFloat64Array elements must be one of '11.11' '22.22' '33.33'",
		"FieldInBoolArray elements must be one of 'true'",
		"FieldInStringMap elements must be one of 'a' 'b' 'c'",
		"FieldInIntMap elements must be one of '1' '2' '3'",
		"FieldInInt8Map elements must be one of '1' '2' '3'",
		"FieldInInt16Map elements must be one of '1' '2' '3'",
		"FieldInInt32Map elements must be one of '1' '2' '3'",
		"FieldInInt64Map elements must be one of '1' '2' '3'",
		"FieldInUintMap elements must be one of '1' '2' '3'",
		"FieldInUint8Map elements must be one of '1' '2' '3'",
		"FieldInUint16Map elements must be one of '1' '2' '3'",
		"FieldInUint32Map elements must be one of '1' '2' '3'",
		"FieldInUint64Map elements must be one of '1' '2' '3'",
		"FieldInFloat32Map elements must be one of '11.11' '22.22' '33.33'",
		"FieldInFloat64Map elements must be one of '11.11' '22.22' '33.33'",
		"FieldInBoolMap elements must be one of 'false'",
	}

	v.FieldInString = "fg"
	v.FieldInInt = 78
	v.FieldInInt8 = 78
	v.FieldInInt16 = 78
	v.FieldInInt32 = 78
	v.FieldInInt64 = 78
	v.FieldInUint = 78
	v.FieldInUint8 = 78
	v.FieldInUint16 = 78
	v.FieldInUint32 = 78
	v.FieldInUint64 = 78
	v.FieldInFloat32 = 44.44
	v.FieldInFloat64 = 44.44
	v.FieldInBool = false
	v.FieldInStringSlice = []string{"ab", "gh", "ef"}
	v.FieldInIntSlice = []int{12, 78, 56}
	v.FieldInInt8Slice = []int8{12, 78, 56}
	v.FieldInInt16Slice = []int16{12, 78, 56}
	v.FieldInInt32Slice = []int32{12, 78, 56}
	v.FieldInInt64Slice = []int64{12, 78, 56}
	v.FieldInUintSlice = []uint{12, 78, 56}
	v.FieldInUint8Slice = []uint8{12, 78, 56}
	v.FieldInUint16Slice = []uint16{12, 78, 56}
	v.FieldInUint32Slice = []uint32{12, 78, 56}
	v.FieldInUint64Slice = []uint64{12, 78, 56}
	v.FieldInFloat32Slice = []float32{11.11, 44.44, 33.33}
	v.FieldInFloat64Slice = []float64{11.11, 44.44, 33.33}
	v.FieldInBoolSlice = []bool{true, false, true}
	v.FieldInStringArray = [3]string{"ab", "gh", "ef"}
	v.FieldInIntArray = [3]int{12, 78, 56}
	v.FieldInInt8Array = [3]int8{12, 78, 56}
	v.FieldInInt16Array = [3]int16{12, 78, 56}
	v.FieldInInt32Array = [3]int32{12, 78, 56}
	v.FieldInInt64Array = [3]int64{12, 78, 56}
	v.FieldInUintArray = [3]uint{12, 78, 56}
	v.FieldInUint8Array = [3]uint8{12, 78, 56}
	v.FieldInUint16Array = [3]uint16{12, 78, 56}
	v.FieldInUint32Array = [3]uint32{12, 78, 56}
	v.FieldInUint64Array = [3]uint64{12, 78, 56}
	v.FieldInFloat32Array = [3]float32{11.11, 44.44, 33.33}
	v.FieldInFloat64Array = [3]float64{11.11, 44.44, 33.33}
	v.FieldInBoolArray = [3]bool{true, false, true}
	v.FieldInStringMap = map[string]string{"a": "1", "d": "9", "c": "3"}
	v.FieldInIntMap = map[int]int{1: 65, 4: 69, 3: 68}
	v.FieldInInt8Map = map[int8]int8{1: 65, 4: 69, 3: 68}
	v.FieldInInt16Map = map[int16]int16{1: 65, 4: 69, 3: 68}
	v.FieldInInt32Map = map[int32]int32{1: 65, 4: 69, 3: 68}
	v.FieldInInt64Map = map[int64]int64{1: 65, 4: 69, 3: 68}
	v.FieldInUintMap = map[uint]uint{1: 65, 4: 69, 3: 68}
	v.FieldInUint8Map = map[uint8]uint8{1: 65, 4: 69, 3: 68}
	v.FieldInUint16Map = map[uint16]uint16{1: 65, 4: 69, 3: 68}
	v.FieldInUint32Map = map[uint32]uint32{1: 65, 4: 69, 3: 68}
	v.FieldInUint64Map = map[uint64]uint64{1: 65, 4: 69, 3: 68}
	v.FieldInFloat32Map = map[float32]float32{11.11: 11.11, 44.44: 44.44, 33.33: 33.33}
	v.FieldInFloat64Map = map[float64]float64{11.11: 11.11, 44.44: 44.44, 33.33: 33.33}
	v.FieldInBoolMap = map[bool]bool{true: true, false: false}

	errs = inStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &inStructFields{}
	v.FieldInString = "cd"
	v.FieldInInt = 34
	v.FieldInInt8 = 34
	v.FieldInInt16 = 34
	v.FieldInInt32 = 34
	v.FieldInInt64 = 34
	v.FieldInUint = 34
	v.FieldInUint8 = 34
	v.FieldInUint16 = 34
	v.FieldInUint32 = 34
	v.FieldInUint64 = 34
	v.FieldInFloat32 = 22.22
	v.FieldInFloat64 = 22.22
	v.FieldInBool = true
	v.FieldInStringSlice = []string{"ab", "ef"}
	v.FieldInIntSlice = []int{12, 56}
	v.FieldInInt8Slice = []int8{12, 56}
	v.FieldInInt16Slice = []int16{12, 56}
	v.FieldInInt32Slice = []int32{12, 56}
	v.FieldInInt64Slice = []int64{12, 56}
	v.FieldInUintSlice = []uint{12, 56}
	v.FieldInUint8Slice = []uint8{12, 56}
	v.FieldInUint16Slice = []uint16{12, 56}
	v.FieldInUint32Slice = []uint32{12, 56}
	v.FieldInUint64Slice = []uint64{12, 56}
	v.FieldInFloat32Slice = []float32{11.11, 22.22}
	v.FieldInFloat64Slice = []float64{11.11, 22.22}
	v.FieldInBoolSlice = []bool{true, true}
	v.FieldInStringArray = [3]string{"ab", "ef", "ab"}
	v.FieldInIntArray = [3]int{12, 56, 12}
	v.FieldInInt8Array = [3]int8{12, 56, 12}
	v.FieldInInt16Array = [3]int16{12, 56, 12}
	v.FieldInInt32Array = [3]int32{12, 56, 12}
	v.FieldInInt64Array = [3]int64{12, 56, 12}
	v.FieldInUintArray = [3]uint{12, 56, 12}
	v.FieldInUint8Array = [3]uint8{12, 56, 12}
	v.FieldInUint16Array = [3]uint16{12, 56, 12}
	v.FieldInUint32Array = [3]uint32{12, 56, 12}
	v.FieldInUint64Array = [3]uint64{12, 56, 12}
	v.FieldInFloat32Array = [3]float32{11.11, 22.22, 11.11}
	v.FieldInFloat64Array = [3]float64{11.11, 22.22, 11.11}
	v.FieldInBoolArray = [3]bool{true, true, true}
	v.FieldInStringMap = map[string]string{"a": "1", "b": "2", "c": "3"}
	v.FieldInIntMap = map[int]int{1: 65, 2: 67, 3: 68}
	v.FieldInInt8Map = map[int8]int8{1: 65, 2: 67, 3: 68}
	v.FieldInInt16Map = map[int16]int16{1: 65, 2: 67, 3: 68}
	v.FieldInInt32Map = map[int32]int32{1: 65, 2: 67, 3: 68}
	v.FieldInInt64Map = map[int64]int64{1: 65, 2: 67, 3: 68}
	v.FieldInUintMap = map[uint]uint{1: 65, 2: 67, 3: 68}
	v.FieldInUint8Map = map[uint8]uint8{1: 65, 2: 67, 3: 68}
	v.FieldInUint16Map = map[uint16]uint16{1: 65, 2: 67, 3: 68}
	v.FieldInUint32Map = map[uint32]uint32{1: 65, 2: 67, 3: 68}
	v.FieldInUint64Map = map[uint64]uint64{1: 65, 2: 67, 3: 68}
	v.FieldInFloat32Map = map[float32]float32{11.11: 11.11, 22.22: 22.22, 33.33: 33.33}
	v.FieldInFloat64Map = map[float64]float64{11.11: 11.11, 22.22: 22.22, 33.33: 33.33}
	v.FieldInBoolMap = map[bool]bool{false: false}

	expectedMsgErrors = nil
	errs = inStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("inStructFields types tests ok")
}

type ninStructFields struct {
	FieldNinString       string              `valid:"nin=ab cd ef"`
	FieldNinInt          int                 `valid:"nin=12 34 56"`
	FieldNinInt8         int8                `valid:"nin=12 34 56"`
	FieldNinInt16        int16               `valid:"nin=12 34 56"`
	FieldNinInt32        int32               `valid:"nin=12 34 56"`
	FieldNinInt64        int64               `valid:"nin=12 34 56"`
	FieldNinUint         uint                `valid:"nin=12 34 56"`
	FieldNinUint8        uint8               `valid:"nin=12 34 56"`
	FieldNinUint16       uint16              `valid:"nin=12 34 56"`
	FieldNinUint32       uint32              `valid:"nin=12 34 56"`
	FieldNinUint64       uint64              `valid:"nin=12 34 56"`
	FieldNinFloat32      float32             `valid:"nin=11.11 22.22 33.33"`
	FieldNinFloat64      float64             `valid:"nin=11.11 22.22 33.33"`
	FieldNinBool         bool                `valid:"nin=true"`
	FieldNinStringSlice  []string            `valid:"nin=ab cd ef"`
	FieldNinIntSlice     []int               `valid:"nin=12 34 56"`
	FieldNinInt8Slice    []int8              `valid:"nin=12 34 56"`
	FieldNinInt16Slice   []int16             `valid:"nin=12 34 56"`
	FieldNinInt32Slice   []int32             `valid:"nin=12 34 56"`
	FieldNinInt64Slice   []int64             `valid:"nin=12 34 56"`
	FieldNinUintSlice    []uint              `valid:"nin=12 34 56"`
	FieldNinUint8Slice   []uint8             `valid:"nin=12 34 56"`
	FieldNinUint16Slice  []uint16            `valid:"nin=12 34 56"`
	FieldNinUint32Slice  []uint32            `valid:"nin=12 34 56"`
	FieldNinUint64Slice  []uint64            `valid:"nin=12 34 56"`
	FieldNinFloat32Slice []float32           `valid:"nin=11.11 22.22 33.33"`
	FieldNinFloat64Slice []float64           `valid:"nin=11.11 22.22 33.33"`
	FieldNinBoolSlice    []bool              `valid:"nin=true"`
	FieldNinStringArray  [3]string           `valid:"nin=ab cd ef"`
	FieldNinIntArray     [3]int              `valid:"nin=12 34 56"`
	FieldNinInt8Array    [3]int8             `valid:"nin=12 34 56"`
	FieldNinInt16Array   [3]int16            `valid:"nin=12 34 56"`
	FieldNinInt32Array   [3]int32            `valid:"nin=12 34 56"`
	FieldNinInt64Array   [3]int64            `valid:"nin=12 34 56"`
	FieldNinUintArray    [3]uint             `valid:"nin=12 34 56"`
	FieldNinUint8Array   [3]uint8            `valid:"nin=12 34 56"`
	FieldNinUint16Array  [3]uint16           `valid:"nin=12 34 56"`
	FieldNinUint32Array  [3]uint32           `valid:"nin=12 34 56"`
	FieldNinUint64Array  [3]uint64           `valid:"nin=12 34 56"`
	FieldNinFloat32Array [3]float32          `valid:"nin=11.11 22.22 33.33"`
	FieldNinFloat64Array [3]float64          `valid:"nin=11.11 22.22 33.33"`
	FieldNinBoolArray    [3]bool             `valid:"nin=true"`
	FieldNinStringMap    map[string]string   `valid:"nin=a b c"`
	FieldNinIntMap       map[int]int         `valid:"nin=1 2 3"`
	FieldNinInt8Map      map[int8]int8       `valid:"nin=1 2 3"`
	FieldNinInt16Map     map[int16]int16     `valid:"nin=1 2 3"`
	FieldNinInt32Map     map[int32]int32     `valid:"nin=1 2 3"`
	FieldNinInt64Map     map[int64]int64     `valid:"nin=1 2 3"`
	FieldNinUintMap      map[uint]uint       `valid:"nin=1 2 3"`
	FieldNinUint8Map     map[uint8]uint8     `valid:"nin=1 2 3"`
	FieldNinUint16Map    map[uint16]uint16   `valid:"nin=1 2 3"`
	FieldNinUint32Map    map[uint32]uint32   `valid:"nin=1 2 3"`
	FieldNinUint64Map    map[uint64]uint64   `valid:"nin=1 2 3"`
	FieldNinFloat32Map   map[float32]float32 `valid:"nin=11.11 22.22 33.33"`
	FieldNinFloat64Map   map[float64]float64 `valid:"nin=11.11 22.22 33.33"`
	FieldNinBoolMap      map[bool]bool       `valid:"nin=false"`
}

func ninStructFieldsTests() {
	log.Println("starting ninStructFields types tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios (invalid cases)
	v := &ninStructFields{}
	expectedMsgErrors = []string{
		"FieldNinString must not be one of 'ab' 'cd' 'ef'",
		"FieldNinInt must not be one of '12' '34' '56'",
		"FieldNinInt8 must not be one of '12' '34' '56'",
		"FieldNinInt16 must not be one of '12' '34' '56'",
		"FieldNinInt32 must not be one of '12' '34' '56'",
		"FieldNinInt64 must not be one of '12' '34' '56'",
		"FieldNinUint must not be one of '12' '34' '56'",
		"FieldNinUint8 must not be one of '12' '34' '56'",
		"FieldNinUint16 must not be one of '12' '34' '56'",
		"FieldNinUint32 must not be one of '12' '34' '56'",
		"FieldNinUint64 must not be one of '12' '34' '56'",
		"FieldNinFloat32 must not be one of '11.11' '22.22' '33.33'",
		"FieldNinFloat64 must not be one of '11.11' '22.22' '33.33'",
		"FieldNinBool must not be one of 'true'",
		"FieldNinStringSlice elements must not be one of 'ab' 'cd' 'ef'",
		"FieldNinIntSlice elements must not be one of '12' '34' '56'",
		"FieldNinInt8Slice elements must not be one of '12' '34' '56'",
		"FieldNinInt16Slice elements must not be one of '12' '34' '56'",
		"FieldNinInt32Slice elements must not be one of '12' '34' '56'",
		"FieldNinInt64Slice elements must not be one of '12' '34' '56'",
		"FieldNinUintSlice elements must not be one of '12' '34' '56'",
		"FieldNinUint8Slice elements must not be one of '12' '34' '56'",
		"FieldNinUint16Slice elements must not be one of '12' '34' '56'",
		"FieldNinUint32Slice elements must not be one of '12' '34' '56'",
		"FieldNinUint64Slice elements must not be one of '12' '34' '56'",
		"FieldNinFloat32Slice elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinFloat64Slice elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinBoolSlice elements must not be one of 'true'",
		"FieldNinStringArray elements must not be one of 'ab' 'cd' 'ef'",
		"FieldNinIntArray elements must not be one of '12' '34' '56'",
		"FieldNinInt8Array elements must not be one of '12' '34' '56'",
		"FieldNinInt16Array elements must not be one of '12' '34' '56'",
		"FieldNinInt32Array elements must not be one of '12' '34' '56'",
		"FieldNinInt64Array elements must not be one of '12' '34' '56'",
		"FieldNinUintArray elements must not be one of '12' '34' '56'",
		"FieldNinUint8Array elements must not be one of '12' '34' '56'",
		"FieldNinUint16Array elements must not be one of '12' '34' '56'",
		"FieldNinUint32Array elements must not be one of '12' '34' '56'",
		"FieldNinUint64Array elements must not be one of '12' '34' '56'",
		"FieldNinFloat32Array elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinFloat64Array elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinBoolArray elements must not be one of 'true'",
		"FieldNinStringMap elements must not be one of 'a' 'b' 'c'",
		"FieldNinIntMap elements must not be one of '1' '2' '3'",
		"FieldNinInt8Map elements must not be one of '1' '2' '3'",
		"FieldNinInt16Map elements must not be one of '1' '2' '3'",
		"FieldNinInt32Map elements must not be one of '1' '2' '3'",
		"FieldNinInt64Map elements must not be one of '1' '2' '3'",
		"FieldNinUintMap elements must not be one of '1' '2' '3'",
		"FieldNinUint8Map elements must not be one of '1' '2' '3'",
		"FieldNinUint16Map elements must not be one of '1' '2' '3'",
		"FieldNinUint32Map elements must not be one of '1' '2' '3'",
		"FieldNinUint64Map elements must not be one of '1' '2' '3'",
		"FieldNinFloat32Map elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinFloat64Map elements must not be one of '11.11' '22.22' '33.33'",
		"FieldNinBoolMap elements must not be one of 'false'",
	}

	v.FieldNinString = "cd"
	v.FieldNinInt = 34
	v.FieldNinInt8 = 34
	v.FieldNinInt16 = 34
	v.FieldNinInt32 = 34
	v.FieldNinInt64 = 34
	v.FieldNinUint = 34
	v.FieldNinUint8 = 34
	v.FieldNinUint16 = 34
	v.FieldNinUint32 = 34
	v.FieldNinUint64 = 34
	v.FieldNinFloat32 = 22.22
	v.FieldNinFloat64 = 22.22
	v.FieldNinBool = true
	v.FieldNinStringSlice = []string{"ab", "ef"}
	v.FieldNinIntSlice = []int{12, 78, 56}
	v.FieldNinInt8Slice = []int8{12, 78, 56}
	v.FieldNinInt16Slice = []int16{12, 78, 56}
	v.FieldNinInt32Slice = []int32{12, 78, 56}
	v.FieldNinInt64Slice = []int64{12, 78, 56}
	v.FieldNinUintSlice = []uint{12, 78, 56}
	v.FieldNinUint8Slice = []uint8{12, 78, 56}
	v.FieldNinUint16Slice = []uint16{12, 78, 56}
	v.FieldNinUint32Slice = []uint32{12, 78, 56}
	v.FieldNinUint64Slice = []uint64{12, 78, 56}
	v.FieldNinFloat32Slice = []float32{11.11, 44.44, 33.33}
	v.FieldNinFloat64Slice = []float64{11.11, 44.44, 33.33}
	v.FieldNinBoolSlice = []bool{true, false, true}
	v.FieldNinStringArray = [3]string{"ab", "gh", "ef"}
	v.FieldNinIntArray = [3]int{12, 78, 56}
	v.FieldNinInt8Array = [3]int8{12, 78, 56}
	v.FieldNinInt16Array = [3]int16{12, 78, 56}
	v.FieldNinInt32Array = [3]int32{12, 78, 56}
	v.FieldNinInt64Array = [3]int64{12, 78, 56}
	v.FieldNinUintArray = [3]uint{12, 78, 56}
	v.FieldNinUint8Array = [3]uint8{12, 78, 56}
	v.FieldNinUint16Array = [3]uint16{12, 78, 56}
	v.FieldNinUint32Array = [3]uint32{12, 78, 56}
	v.FieldNinUint64Array = [3]uint64{12, 78, 56}
	v.FieldNinFloat32Array = [3]float32{11.11, 44.44, 33.33}
	v.FieldNinFloat64Array = [3]float64{11.11, 44.44, 33.33}
	v.FieldNinBoolArray = [3]bool{true, false, true}
	v.FieldNinStringMap = map[string]string{"a": "1", "d": "9", "c": "3"}
	v.FieldNinIntMap = map[int]int{1: 11, 4: 44, 3: 33}
	v.FieldNinInt8Map = map[int8]int8{1: 11, 4: 44, 3: 33}
	v.FieldNinInt16Map = map[int16]int16{1: 11, 4: 44, 3: 33}
	v.FieldNinInt32Map = map[int32]int32{1: 11, 4: 44, 3: 33}
	v.FieldNinInt64Map = map[int64]int64{1: 11, 4: 44, 3: 33}
	v.FieldNinUintMap = map[uint]uint{1: 11, 4: 44, 3: 33}
	v.FieldNinUint8Map = map[uint8]uint8{1: 11, 4: 44, 3: 33}
	v.FieldNinUint16Map = map[uint16]uint16{1: 11, 4: 44, 3: 33}
	v.FieldNinUint32Map = map[uint32]uint32{1: 11, 4: 44, 3: 33}
	v.FieldNinUint64Map = map[uint64]uint64{1: 11, 4: 44, 3: 33}
	v.FieldNinFloat32Map = map[float32]float32{11.11: 11.11, 44.44: 44.44, 33.33: 33.33}
	v.FieldNinFloat64Map = map[float64]float64{11.11: 11.11, 44.44: 44.44, 33.33: 33.33}
	v.FieldNinBoolMap = map[bool]bool{true: true, false: false}

	errs = ninStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 1", errs, expectedMsgErrors)

	// Test case 2: All valid cases
	v = &ninStructFields{}
	v.FieldNinString = "fg"
	v.FieldNinInt = 78
	v.FieldNinInt8 = 78
	v.FieldNinInt16 = 78
	v.FieldNinInt32 = 78
	v.FieldNinInt64 = 78
	v.FieldNinUint = 78
	v.FieldNinUint8 = 78
	v.FieldNinUint16 = 78
	v.FieldNinUint32 = 78
	v.FieldNinUint64 = 78
	v.FieldNinFloat32 = 44.44
	v.FieldNinFloat64 = 44.44
	v.FieldNinBool = false
	v.FieldNinStringSlice = []string{"gh", "ij", "kl"}
	v.FieldNinIntSlice = []int{78, 91}
	v.FieldNinInt8Slice = []int8{78, 91}
	v.FieldNinInt16Slice = []int16{78, 91}
	v.FieldNinInt32Slice = []int32{78, 91}
	v.FieldNinInt64Slice = []int64{78, 91}
	v.FieldNinUintSlice = []uint{78, 91}
	v.FieldNinUint8Slice = []uint8{78, 91}
	v.FieldNinUint16Slice = []uint16{78, 91}
	v.FieldNinUint32Slice = []uint32{78, 91}
	v.FieldNinUint64Slice = []uint64{78, 91}
	v.FieldNinFloat32Slice = []float32{44.44, 55.55, 66.66}
	v.FieldNinFloat64Slice = []float64{44.44, 55.55, 66.66}
	v.FieldNinBoolSlice = []bool{false, false, false}
	v.FieldNinStringArray = [3]string{"gh", "ij", "kl"}
	v.FieldNinIntArray = [3]int{78, 91, 23}
	v.FieldNinInt8Array = [3]int8{78, 91, 23}
	v.FieldNinInt16Array = [3]int16{78, 91, 23}
	v.FieldNinInt32Array = [3]int32{78, 91, 23}
	v.FieldNinInt64Array = [3]int64{78, 91, 23}
	v.FieldNinUintArray = [3]uint{78, 91, 23}
	v.FieldNinUint8Array = [3]uint8{78, 91, 23}
	v.FieldNinUint16Array = [3]uint16{78, 91, 23}
	v.FieldNinUint32Array = [3]uint32{78, 91, 23}
	v.FieldNinUint64Array = [3]uint64{78, 91, 23}
	v.FieldNinFloat32Array = [3]float32{44.44, 55.55, 66.66}
	v.FieldNinFloat64Array = [3]float64{44.44, 55.55, 66.66}
	v.FieldNinBoolArray = [3]bool{false, false, false}
	v.FieldNinStringMap = map[string]string{"d": "1", "e": "2", "f": "3"}
	v.FieldNinIntMap = map[int]int{5: 55, 6: 66, 7: 77}
	v.FieldNinInt8Map = map[int8]int8{5: 55, 6: 66, 7: 77}
	v.FieldNinInt16Map = map[int16]int16{5: 55, 6: 66, 7: 77}
	v.FieldNinInt32Map = map[int32]int32{5: 55, 6: 66, 7: 77}
	v.FieldNinInt64Map = map[int64]int64{5: 55, 6: 66, 7: 77}
	v.FieldNinUintMap = map[uint]uint{5: 55, 6: 66, 7: 77}
	v.FieldNinUint8Map = map[uint8]uint8{5: 55, 6: 66, 7: 77}
	v.FieldNinUint16Map = map[uint16]uint16{5: 55, 6: 66, 7: 77}
	v.FieldNinUint32Map = map[uint32]uint32{5: 55, 6: 66, 7: 77}
	v.FieldNinUint64Map = map[uint64]uint64{5: 55, 6: 66, 7: 77}
	v.FieldNinFloat32Map = map[float32]float32{44.44: 44.44, 55.55: 55.55, 66.66: 66.66}
	v.FieldNinFloat64Map = map[float64]float64{44.44: 44.44, 55.55: 55.55, 66.66: 66.66}
	v.FieldNinBoolMap = map[bool]bool{true: true}

	expectedMsgErrors = nil
	errs = ninStructFieldsValidate(v)
	assertExpectedErrorMsgs("testcase 2", errs, expectedMsgErrors)

	log.Println("ninStructFields types tests ok")
}
