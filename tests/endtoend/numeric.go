// Code generated by NumericTestGenerator. DO NOT EDIT.

package main

import "log"

func numeric_tests() {
	log.Println("starting numeric tests")

	numeric_int_tests()
	numeric_int8_tests()
	numeric_int16_tests()
	numeric_int32_tests()
	numeric_int64_tests()
	numeric_uint_tests()
	numeric_uint8_tests()
	numeric_uint16_tests()
	numeric_uint32_tests()
	numeric_uint64_tests()
	
	log.Println("numeric tests ok")
}


type NumericTypeint struct {
	FieldReq   int `valid:"required"`
	FieldEq    int `valid:"eq=5"`
	FieldNeq   int `valid:"neq=5"`
	FieldGt    int `valid:"gt=10"`
	FieldGte   int `valid:"gte=10"`
	FieldLt    int `valid:"lt=10"`
	FieldLte   int `valid:"lte=10"`
	FieldIn    int `valid:"in=5 6 7"`
	FieldNotIn int `valid:"nin=8 9 10"`
}

func numeric_int_tests() {
	log.Println("starting numeric int tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeint{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeintValidate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeint{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeintValidate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric int tests ok")
}

type NumericTypeint8 struct {
	FieldReq   int8 `valid:"required"`
	FieldEq    int8 `valid:"eq=5"`
	FieldNeq   int8 `valid:"neq=5"`
	FieldGt    int8 `valid:"gt=10"`
	FieldGte   int8 `valid:"gte=10"`
	FieldLt    int8 `valid:"lt=10"`
	FieldLte   int8 `valid:"lte=10"`
	FieldIn    int8 `valid:"in=5 6 7"`
	FieldNotIn int8 `valid:"nin=8 9 10"`
}

func numeric_int8_tests() {
	log.Println("starting numeric int8 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeint8{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeint8Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeint8{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeint8Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric int8 tests ok")
}

type NumericTypeint16 struct {
	FieldReq   int16 `valid:"required"`
	FieldEq    int16 `valid:"eq=5"`
	FieldNeq   int16 `valid:"neq=5"`
	FieldGt    int16 `valid:"gt=10"`
	FieldGte   int16 `valid:"gte=10"`
	FieldLt    int16 `valid:"lt=10"`
	FieldLte   int16 `valid:"lte=10"`
	FieldIn    int16 `valid:"in=5 6 7"`
	FieldNotIn int16 `valid:"nin=8 9 10"`
}

func numeric_int16_tests() {
	log.Println("starting numeric int16 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeint16{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeint16Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeint16{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeint16Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric int16 tests ok")
}

type NumericTypeint32 struct {
	FieldReq   int32 `valid:"required"`
	FieldEq    int32 `valid:"eq=5"`
	FieldNeq   int32 `valid:"neq=5"`
	FieldGt    int32 `valid:"gt=10"`
	FieldGte   int32 `valid:"gte=10"`
	FieldLt    int32 `valid:"lt=10"`
	FieldLte   int32 `valid:"lte=10"`
	FieldIn    int32 `valid:"in=5 6 7"`
	FieldNotIn int32 `valid:"nin=8 9 10"`
}

func numeric_int32_tests() {
	log.Println("starting numeric int32 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeint32{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeint32Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeint32{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeint32Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric int32 tests ok")
}

type NumericTypeint64 struct {
	FieldReq   int64 `valid:"required"`
	FieldEq    int64 `valid:"eq=5"`
	FieldNeq   int64 `valid:"neq=5"`
	FieldGt    int64 `valid:"gt=10"`
	FieldGte   int64 `valid:"gte=10"`
	FieldLt    int64 `valid:"lt=10"`
	FieldLte   int64 `valid:"lte=10"`
	FieldIn    int64 `valid:"in=5 6 7"`
	FieldNotIn int64 `valid:"nin=8 9 10"`
}

func numeric_int64_tests() {
	log.Println("starting numeric int64 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeint64{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeint64Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeint64{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeint64Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric int64 tests ok")
}

type NumericTypeuint struct {
	FieldReq   uint `valid:"required"`
	FieldEq    uint `valid:"eq=5"`
	FieldNeq   uint `valid:"neq=5"`
	FieldGt    uint `valid:"gt=10"`
	FieldGte   uint `valid:"gte=10"`
	FieldLt    uint `valid:"lt=10"`
	FieldLte   uint `valid:"lte=10"`
	FieldIn    uint `valid:"in=5 6 7"`
	FieldNotIn uint `valid:"nin=8 9 10"`
}

func numeric_uint_tests() {
	log.Println("starting numeric uint tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeuint{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeuintValidate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeuint{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeuintValidate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric uint tests ok")
}

type NumericTypeuint8 struct {
	FieldReq   uint8 `valid:"required"`
	FieldEq    uint8 `valid:"eq=5"`
	FieldNeq   uint8 `valid:"neq=5"`
	FieldGt    uint8 `valid:"gt=10"`
	FieldGte   uint8 `valid:"gte=10"`
	FieldLt    uint8 `valid:"lt=10"`
	FieldLte   uint8 `valid:"lte=10"`
	FieldIn    uint8 `valid:"in=5 6 7"`
	FieldNotIn uint8 `valid:"nin=8 9 10"`
}

func numeric_uint8_tests() {
	log.Println("starting numeric uint8 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeuint8{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeuint8Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeuint8{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeuint8Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric uint8 tests ok")
}

type NumericTypeuint16 struct {
	FieldReq   uint16 `valid:"required"`
	FieldEq    uint16 `valid:"eq=5"`
	FieldNeq   uint16 `valid:"neq=5"`
	FieldGt    uint16 `valid:"gt=10"`
	FieldGte   uint16 `valid:"gte=10"`
	FieldLt    uint16 `valid:"lt=10"`
	FieldLte   uint16 `valid:"lte=10"`
	FieldIn    uint16 `valid:"in=5 6 7"`
	FieldNotIn uint16 `valid:"nin=8 9 10"`
}

func numeric_uint16_tests() {
	log.Println("starting numeric uint16 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeuint16{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeuint16Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeuint16{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeuint16Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric uint16 tests ok")
}

type NumericTypeuint32 struct {
	FieldReq   uint32 `valid:"required"`
	FieldEq    uint32 `valid:"eq=5"`
	FieldNeq   uint32 `valid:"neq=5"`
	FieldGt    uint32 `valid:"gt=10"`
	FieldGte   uint32 `valid:"gte=10"`
	FieldLt    uint32 `valid:"lt=10"`
	FieldLte   uint32 `valid:"lte=10"`
	FieldIn    uint32 `valid:"in=5 6 7"`
	FieldNotIn uint32 `valid:"nin=8 9 10"`
}

func numeric_uint32_tests() {
	log.Println("starting numeric uint32 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeuint32{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeuint32Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeuint32{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeuint32Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric uint32 tests ok")
}

type NumericTypeuint64 struct {
	FieldReq   uint64 `valid:"required"`
	FieldEq    uint64 `valid:"eq=5"`
	FieldNeq   uint64 `valid:"neq=5"`
	FieldGt    uint64 `valid:"gt=10"`
	FieldGte   uint64 `valid:"gte=10"`
	FieldLt    uint64 `valid:"lt=10"`
	FieldLte   uint64 `valid:"lte=10"`
	FieldIn    uint64 `valid:"in=5 6 7"`
	FieldNotIn uint64 `valid:"nin=8 9 10"`
}

func numeric_uint64_tests() {
	log.Println("starting numeric uint64 tests")

	var expectedMsgErrors []string
	var errs []error

	// Test case 1: All failure scenarios
	v := &NumericTypeuint64{
		FieldReq:   0,
		FieldEq:    0,
		FieldNeq:   5,
		FieldGt:    8,
		FieldGte:   8,
		FieldLt:    12,
		FieldLte:   12,
		FieldIn:    3,
		FieldNotIn: 9,
	}
	expectedMsgErrors = []string{
		"FieldReq is required",
		"FieldEq must be equal to 5",
		"FieldNeq must not be equal to 5",
		"FieldGt must be > 10",
		"FieldGte must be >= 10",
		"FieldLt must be < 10",
		"FieldLte must be <= 10",
		"FieldIn must be one of '5' '6' '7'",
		"FieldNotIn must not be one of '8' '9' '10'",
	}
	errs = NumericTypeuint64Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	// Test case 2: All valid input
	v = &NumericTypeuint64{
		FieldReq:   123,
		FieldEq:    5,
		FieldNeq:   2,
		FieldGt:    11,
		FieldGte:   12,
		FieldLt:    9,
		FieldLte:   8,
		FieldIn:    6,
		FieldNotIn: 12,
	}
	expectedMsgErrors = nil
	errs = NumericTypeuint64Validate(v)
	if !expectedMsgErrorsOk(errs, expectedMsgErrors) {
		log.Fatalf("error = %v, wantErr %v", errs, expectedMsgErrors)
	}

	log.Println("numeric uint64 tests ok")
}

