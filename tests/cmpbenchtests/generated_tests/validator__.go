// Code generated by ValidGen. DO NOT EDIT.

package benchtests

import (
	"github.com/opencodeco/validgen/types"
)

func ValidGenStringEmailStructValidate(obj *ValidGenStringEmailStruct) []error {
	var errs []error
	if !(types.IsValidEmail(obj.Field) == true) {
		errs = append(errs, types.NewValidationError("Field must be a valid email"))
	}
	return errs
}
func ValidGenStringEqICStructValidate(obj *ValidGenStringEqICStruct) []error {
	var errs []error
	if !(types.ToLower(obj.Field) == "abc") {
		errs = append(errs, types.NewValidationError("Field must be equal to 'abc'"))
	}
	return errs
}
func ValidGenStringEqStructValidate(obj *ValidGenStringEqStruct) []error {
	var errs []error
	if !(obj.Field == "abc") {
		errs = append(errs, types.NewValidationError("Field must be equal to 'abc'"))
	}
	return errs
}
func ValidGenStringInStructValidate(obj *ValidGenStringInStruct) []error {
	var errs []error
	if !(obj.Field == "ab" || obj.Field == "cd" || obj.Field == "ef") {
		errs = append(errs, types.NewValidationError("Field must be one of 'ab' 'cd' 'ef'"))
	}
	return errs
}
func ValidGenStringLenStructValidate(obj *ValidGenStringLenStruct) []error {
	var errs []error
	if !(len(obj.Field) == 5) {
		errs = append(errs, types.NewValidationError("Field length must be 5"))
	}
	return errs
}
func ValidGenStringMaxStructValidate(obj *ValidGenStringMaxStruct) []error {
	var errs []error
	if !(len(obj.Field) <= 5) {
		errs = append(errs, types.NewValidationError("Field length must be <= 5"))
	}
	return errs
}
func ValidGenStringMinStructValidate(obj *ValidGenStringMinStruct) []error {
	var errs []error
	if !(len(obj.Field) >= 3) {
		errs = append(errs, types.NewValidationError("Field length must be >= 3"))
	}
	return errs
}
func ValidGenStringNeqICStructValidate(obj *ValidGenStringNeqICStruct) []error {
	var errs []error
	if !(types.ToLower(obj.Field) != "abc") {
		errs = append(errs, types.NewValidationError("Field must not be equal to 'abc'"))
	}
	return errs
}
func ValidGenStringNeqStructValidate(obj *ValidGenStringNeqStruct) []error {
	var errs []error
	if !(obj.Field != "abc") {
		errs = append(errs, types.NewValidationError("Field must not be equal to 'abc'"))
	}
	return errs
}
func ValidGenStringRequiredStructValidate(obj *ValidGenStringRequiredStruct) []error {
	var errs []error
	if !(obj.Field != "") {
		errs = append(errs, types.NewValidationError("Field is required"))
	}
	return errs
}
