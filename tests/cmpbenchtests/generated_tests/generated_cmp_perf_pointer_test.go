// Code generated by TestGen. DO NOT EDIT.

package benchtests

import (
	"testing"

	"github.com/go-playground/validator/v10"
)

type ValidGenEmailStringPointerStruct struct {
	Field *string `valid:"email"`
}

type ValidatorEmailStringPointerStruct struct {
	Field *string `validate:"email"`
}

type ValidGenRequiredStringPointerStruct struct {
	Field *string `valid:"required"`
}

type ValidatorRequiredStringPointerStruct struct {
	Field *string `validate:"required"`
}

type ValidGenRequiredIntPointerStruct struct {
	Field *int `valid:"required"`
}

type ValidatorRequiredIntPointerStruct struct {
	Field *int `validate:"required"`
}

type ValidGenRequiredInt8PointerStruct struct {
	Field *int8 `valid:"required"`
}

type ValidatorRequiredInt8PointerStruct struct {
	Field *int8 `validate:"required"`
}

type ValidGenRequiredInt16PointerStruct struct {
	Field *int16 `valid:"required"`
}

type ValidatorRequiredInt16PointerStruct struct {
	Field *int16 `validate:"required"`
}

type ValidGenRequiredInt32PointerStruct struct {
	Field *int32 `valid:"required"`
}

type ValidatorRequiredInt32PointerStruct struct {
	Field *int32 `validate:"required"`
}

type ValidGenRequiredInt64PointerStruct struct {
	Field *int64 `valid:"required"`
}

type ValidatorRequiredInt64PointerStruct struct {
	Field *int64 `validate:"required"`
}

type ValidGenRequiredUintPointerStruct struct {
	Field *uint `valid:"required"`
}

type ValidatorRequiredUintPointerStruct struct {
	Field *uint `validate:"required"`
}

type ValidGenRequiredUint8PointerStruct struct {
	Field *uint8 `valid:"required"`
}

type ValidatorRequiredUint8PointerStruct struct {
	Field *uint8 `validate:"required"`
}

type ValidGenRequiredUint16PointerStruct struct {
	Field *uint16 `valid:"required"`
}

type ValidatorRequiredUint16PointerStruct struct {
	Field *uint16 `validate:"required"`
}

type ValidGenRequiredUint32PointerStruct struct {
	Field *uint32 `valid:"required"`
}

type ValidatorRequiredUint32PointerStruct struct {
	Field *uint32 `validate:"required"`
}

type ValidGenRequiredUint64PointerStruct struct {
	Field *uint64 `valid:"required"`
}

type ValidatorRequiredUint64PointerStruct struct {
	Field *uint64 `validate:"required"`
}

type ValidGenRequiredFloat32PointerStruct struct {
	Field *float32 `valid:"required"`
}

type ValidatorRequiredFloat32PointerStruct struct {
	Field *float32 `validate:"required"`
}

type ValidGenRequiredFloat64PointerStruct struct {
	Field *float64 `valid:"required"`
}

type ValidatorRequiredFloat64PointerStruct struct {
	Field *float64 `validate:"required"`
}

type ValidGenRequiredBoolPointerStruct struct {
	Field *bool `valid:"required"`
}

type ValidatorRequiredBoolPointerStruct struct {
	Field *bool `validate:"required"`
}

type ValidGenRequiredStringSlicePointerStruct struct {
	Field *[]string `valid:"required"`
}

type ValidatorRequiredStringSlicePointerStruct struct {
	Field *[]string `validate:"required"`
}

type ValidGenRequiredIntSlicePointerStruct struct {
	Field *[]int `valid:"required"`
}

type ValidatorRequiredIntSlicePointerStruct struct {
	Field *[]int `validate:"required"`
}

type ValidGenRequiredInt8SlicePointerStruct struct {
	Field *[]int8 `valid:"required"`
}

type ValidatorRequiredInt8SlicePointerStruct struct {
	Field *[]int8 `validate:"required"`
}

type ValidGenRequiredInt16SlicePointerStruct struct {
	Field *[]int16 `valid:"required"`
}

type ValidatorRequiredInt16SlicePointerStruct struct {
	Field *[]int16 `validate:"required"`
}

type ValidGenRequiredInt32SlicePointerStruct struct {
	Field *[]int32 `valid:"required"`
}

type ValidatorRequiredInt32SlicePointerStruct struct {
	Field *[]int32 `validate:"required"`
}

type ValidGenRequiredInt64SlicePointerStruct struct {
	Field *[]int64 `valid:"required"`
}

type ValidatorRequiredInt64SlicePointerStruct struct {
	Field *[]int64 `validate:"required"`
}

type ValidGenRequiredUintSlicePointerStruct struct {
	Field *[]uint `valid:"required"`
}

type ValidatorRequiredUintSlicePointerStruct struct {
	Field *[]uint `validate:"required"`
}

type ValidGenRequiredUint8SlicePointerStruct struct {
	Field *[]uint8 `valid:"required"`
}

type ValidatorRequiredUint8SlicePointerStruct struct {
	Field *[]uint8 `validate:"required"`
}

type ValidGenRequiredUint16SlicePointerStruct struct {
	Field *[]uint16 `valid:"required"`
}

type ValidatorRequiredUint16SlicePointerStruct struct {
	Field *[]uint16 `validate:"required"`
}

type ValidGenRequiredUint32SlicePointerStruct struct {
	Field *[]uint32 `valid:"required"`
}

type ValidatorRequiredUint32SlicePointerStruct struct {
	Field *[]uint32 `validate:"required"`
}

type ValidGenRequiredUint64SlicePointerStruct struct {
	Field *[]uint64 `valid:"required"`
}

type ValidatorRequiredUint64SlicePointerStruct struct {
	Field *[]uint64 `validate:"required"`
}

type ValidGenRequiredFloat32SlicePointerStruct struct {
	Field *[]float32 `valid:"required"`
}

type ValidatorRequiredFloat32SlicePointerStruct struct {
	Field *[]float32 `validate:"required"`
}

type ValidGenRequiredFloat64SlicePointerStruct struct {
	Field *[]float64 `valid:"required"`
}

type ValidatorRequiredFloat64SlicePointerStruct struct {
	Field *[]float64 `validate:"required"`
}

type ValidGenRequiredBoolSlicePointerStruct struct {
	Field *[]bool `valid:"required"`
}

type ValidatorRequiredBoolSlicePointerStruct struct {
	Field *[]bool `validate:"required"`
}

type ValidGenRequiredStringArrayPointerStruct struct {
	Field *[3]string `valid:"required"`
}

type ValidatorRequiredStringArrayPointerStruct struct {
	Field *[3]string `validate:"required"`
}

type ValidGenRequiredIntArrayPointerStruct struct {
	Field *[3]int `valid:"required"`
}

type ValidatorRequiredIntArrayPointerStruct struct {
	Field *[3]int `validate:"required"`
}

type ValidGenRequiredInt8ArrayPointerStruct struct {
	Field *[3]int8 `valid:"required"`
}

type ValidatorRequiredInt8ArrayPointerStruct struct {
	Field *[3]int8 `validate:"required"`
}

type ValidGenRequiredInt16ArrayPointerStruct struct {
	Field *[3]int16 `valid:"required"`
}

type ValidatorRequiredInt16ArrayPointerStruct struct {
	Field *[3]int16 `validate:"required"`
}

type ValidGenRequiredInt32ArrayPointerStruct struct {
	Field *[3]int32 `valid:"required"`
}

type ValidatorRequiredInt32ArrayPointerStruct struct {
	Field *[3]int32 `validate:"required"`
}

type ValidGenRequiredInt64ArrayPointerStruct struct {
	Field *[3]int64 `valid:"required"`
}

type ValidatorRequiredInt64ArrayPointerStruct struct {
	Field *[3]int64 `validate:"required"`
}

type ValidGenRequiredUintArrayPointerStruct struct {
	Field *[3]uint `valid:"required"`
}

type ValidatorRequiredUintArrayPointerStruct struct {
	Field *[3]uint `validate:"required"`
}

type ValidGenRequiredUint8ArrayPointerStruct struct {
	Field *[3]uint8 `valid:"required"`
}

type ValidatorRequiredUint8ArrayPointerStruct struct {
	Field *[3]uint8 `validate:"required"`
}

type ValidGenRequiredUint16ArrayPointerStruct struct {
	Field *[3]uint16 `valid:"required"`
}

type ValidatorRequiredUint16ArrayPointerStruct struct {
	Field *[3]uint16 `validate:"required"`
}

type ValidGenRequiredUint32ArrayPointerStruct struct {
	Field *[3]uint32 `valid:"required"`
}

type ValidatorRequiredUint32ArrayPointerStruct struct {
	Field *[3]uint32 `validate:"required"`
}

type ValidGenRequiredUint64ArrayPointerStruct struct {
	Field *[3]uint64 `valid:"required"`
}

type ValidatorRequiredUint64ArrayPointerStruct struct {
	Field *[3]uint64 `validate:"required"`
}

type ValidGenRequiredFloat32ArrayPointerStruct struct {
	Field *[3]float32 `valid:"required"`
}

type ValidatorRequiredFloat32ArrayPointerStruct struct {
	Field *[3]float32 `validate:"required"`
}

type ValidGenRequiredFloat64ArrayPointerStruct struct {
	Field *[3]float64 `valid:"required"`
}

type ValidatorRequiredFloat64ArrayPointerStruct struct {
	Field *[3]float64 `validate:"required"`
}

type ValidGenRequiredBoolArrayPointerStruct struct {
	Field *[3]bool `valid:"required"`
}

type ValidatorRequiredBoolArrayPointerStruct struct {
	Field *[3]bool `validate:"required"`
}

type ValidGenRequiredStringMapPointerStruct struct {
	Field *map[string]string `valid:"required"`
}

type ValidatorRequiredStringMapPointerStruct struct {
	Field *map[string]string `validate:"required"`
}

type ValidGenRequiredIntMapPointerStruct struct {
	Field *map[int]int `valid:"required"`
}

type ValidatorRequiredIntMapPointerStruct struct {
	Field *map[int]int `validate:"required"`
}

type ValidGenRequiredInt8MapPointerStruct struct {
	Field *map[int8]int8 `valid:"required"`
}

type ValidatorRequiredInt8MapPointerStruct struct {
	Field *map[int8]int8 `validate:"required"`
}

type ValidGenRequiredInt16MapPointerStruct struct {
	Field *map[int16]int16 `valid:"required"`
}

type ValidatorRequiredInt16MapPointerStruct struct {
	Field *map[int16]int16 `validate:"required"`
}

type ValidGenRequiredInt32MapPointerStruct struct {
	Field *map[int32]int32 `valid:"required"`
}

type ValidatorRequiredInt32MapPointerStruct struct {
	Field *map[int32]int32 `validate:"required"`
}

type ValidGenRequiredInt64MapPointerStruct struct {
	Field *map[int64]int64 `valid:"required"`
}

type ValidatorRequiredInt64MapPointerStruct struct {
	Field *map[int64]int64 `validate:"required"`
}

type ValidGenRequiredUintMapPointerStruct struct {
	Field *map[uint]uint `valid:"required"`
}

type ValidatorRequiredUintMapPointerStruct struct {
	Field *map[uint]uint `validate:"required"`
}

type ValidGenRequiredUint8MapPointerStruct struct {
	Field *map[uint8]uint8 `valid:"required"`
}

type ValidatorRequiredUint8MapPointerStruct struct {
	Field *map[uint8]uint8 `validate:"required"`
}

type ValidGenRequiredUint16MapPointerStruct struct {
	Field *map[uint16]uint16 `valid:"required"`
}

type ValidatorRequiredUint16MapPointerStruct struct {
	Field *map[uint16]uint16 `validate:"required"`
}

type ValidGenRequiredUint32MapPointerStruct struct {
	Field *map[uint32]uint32 `valid:"required"`
}

type ValidatorRequiredUint32MapPointerStruct struct {
	Field *map[uint32]uint32 `validate:"required"`
}

type ValidGenRequiredUint64MapPointerStruct struct {
	Field *map[uint64]uint64 `valid:"required"`
}

type ValidatorRequiredUint64MapPointerStruct struct {
	Field *map[uint64]uint64 `validate:"required"`
}

type ValidGenRequiredFloat32MapPointerStruct struct {
	Field *map[float32]float32 `valid:"required"`
}

type ValidatorRequiredFloat32MapPointerStruct struct {
	Field *map[float32]float32 `validate:"required"`
}

type ValidGenRequiredFloat64MapPointerStruct struct {
	Field *map[float64]float64 `valid:"required"`
}

type ValidatorRequiredFloat64MapPointerStruct struct {
	Field *map[float64]float64 `validate:"required"`
}

type ValidGenRequiredBoolMapPointerStruct struct {
	Field *map[bool]bool `valid:"required"`
}

type ValidatorRequiredBoolMapPointerStruct struct {
	Field *map[bool]bool `validate:"required"`
}

type ValidGenEqStringPointerStruct struct {
	Field *string `valid:"eq=abcde"`
}

type ValidatorEqStringPointerStruct struct {
	Field *string `validate:"eq=abcde"`
}

type ValidGenEqIntPointerStruct struct {
	Field *int `valid:"eq=32"`
}

type ValidatorEqIntPointerStruct struct {
	Field *int `validate:"eq=32"`
}

type ValidGenEqInt8PointerStruct struct {
	Field *int8 `valid:"eq=32"`
}

type ValidatorEqInt8PointerStruct struct {
	Field *int8 `validate:"eq=32"`
}

type ValidGenEqInt16PointerStruct struct {
	Field *int16 `valid:"eq=32"`
}

type ValidatorEqInt16PointerStruct struct {
	Field *int16 `validate:"eq=32"`
}

type ValidGenEqInt32PointerStruct struct {
	Field *int32 `valid:"eq=32"`
}

type ValidatorEqInt32PointerStruct struct {
	Field *int32 `validate:"eq=32"`
}

type ValidGenEqInt64PointerStruct struct {
	Field *int64 `valid:"eq=32"`
}

type ValidatorEqInt64PointerStruct struct {
	Field *int64 `validate:"eq=32"`
}

type ValidGenEqUintPointerStruct struct {
	Field *uint `valid:"eq=32"`
}

type ValidatorEqUintPointerStruct struct {
	Field *uint `validate:"eq=32"`
}

type ValidGenEqUint8PointerStruct struct {
	Field *uint8 `valid:"eq=32"`
}

type ValidatorEqUint8PointerStruct struct {
	Field *uint8 `validate:"eq=32"`
}

type ValidGenEqUint16PointerStruct struct {
	Field *uint16 `valid:"eq=32"`
}

type ValidatorEqUint16PointerStruct struct {
	Field *uint16 `validate:"eq=32"`
}

type ValidGenEqUint32PointerStruct struct {
	Field *uint32 `valid:"eq=32"`
}

type ValidatorEqUint32PointerStruct struct {
	Field *uint32 `validate:"eq=32"`
}

type ValidGenEqUint64PointerStruct struct {
	Field *uint64 `valid:"eq=32"`
}

type ValidatorEqUint64PointerStruct struct {
	Field *uint64 `validate:"eq=32"`
}

type ValidGenEqFloat32PointerStruct struct {
	Field *float32 `valid:"eq=12.34"`
}

type ValidatorEqFloat32PointerStruct struct {
	Field *float32 `validate:"eq=12.34"`
}

type ValidGenEqFloat64PointerStruct struct {
	Field *float64 `valid:"eq=12.34"`
}

type ValidatorEqFloat64PointerStruct struct {
	Field *float64 `validate:"eq=12.34"`
}

type ValidGenEqBoolPointerStruct struct {
	Field *bool `valid:"eq=true"`
}

type ValidatorEqBoolPointerStruct struct {
	Field *bool `validate:"eq=true"`
}

type ValidGenNeqStringPointerStruct struct {
	Field *string `valid:"neq=abcde"`
}

type ValidatorNeqStringPointerStruct struct {
	Field *string `validate:"ne=abcde"`
}

type ValidGenNeqIntPointerStruct struct {
	Field *int `valid:"neq=32"`
}

type ValidatorNeqIntPointerStruct struct {
	Field *int `validate:"ne=32"`
}

type ValidGenNeqInt8PointerStruct struct {
	Field *int8 `valid:"neq=32"`
}

type ValidatorNeqInt8PointerStruct struct {
	Field *int8 `validate:"ne=32"`
}

type ValidGenNeqInt16PointerStruct struct {
	Field *int16 `valid:"neq=32"`
}

type ValidatorNeqInt16PointerStruct struct {
	Field *int16 `validate:"ne=32"`
}

type ValidGenNeqInt32PointerStruct struct {
	Field *int32 `valid:"neq=32"`
}

type ValidatorNeqInt32PointerStruct struct {
	Field *int32 `validate:"ne=32"`
}

type ValidGenNeqInt64PointerStruct struct {
	Field *int64 `valid:"neq=32"`
}

type ValidatorNeqInt64PointerStruct struct {
	Field *int64 `validate:"ne=32"`
}

type ValidGenNeqUintPointerStruct struct {
	Field *uint `valid:"neq=32"`
}

type ValidatorNeqUintPointerStruct struct {
	Field *uint `validate:"ne=32"`
}

type ValidGenNeqUint8PointerStruct struct {
	Field *uint8 `valid:"neq=32"`
}

type ValidatorNeqUint8PointerStruct struct {
	Field *uint8 `validate:"ne=32"`
}

type ValidGenNeqUint16PointerStruct struct {
	Field *uint16 `valid:"neq=32"`
}

type ValidatorNeqUint16PointerStruct struct {
	Field *uint16 `validate:"ne=32"`
}

type ValidGenNeqUint32PointerStruct struct {
	Field *uint32 `valid:"neq=32"`
}

type ValidatorNeqUint32PointerStruct struct {
	Field *uint32 `validate:"ne=32"`
}

type ValidGenNeqUint64PointerStruct struct {
	Field *uint64 `valid:"neq=32"`
}

type ValidatorNeqUint64PointerStruct struct {
	Field *uint64 `validate:"ne=32"`
}

type ValidGenNeqFloat32PointerStruct struct {
	Field *float32 `valid:"neq=12.34"`
}

type ValidatorNeqFloat32PointerStruct struct {
	Field *float32 `validate:"ne=12.34"`
}

type ValidGenNeqFloat64PointerStruct struct {
	Field *float64 `valid:"neq=12.34"`
}

type ValidatorNeqFloat64PointerStruct struct {
	Field *float64 `validate:"ne=12.34"`
}

type ValidGenNeqBoolPointerStruct struct {
	Field *bool `valid:"neq=true"`
}

type ValidatorNeqBoolPointerStruct struct {
	Field *bool `validate:"ne=true"`
}

type ValidGenGtIntPointerStruct struct {
	Field *int `valid:"gt=32"`
}

type ValidatorGtIntPointerStruct struct {
	Field *int `validate:"gt=32"`
}

type ValidGenGtInt8PointerStruct struct {
	Field *int8 `valid:"gt=32"`
}

type ValidatorGtInt8PointerStruct struct {
	Field *int8 `validate:"gt=32"`
}

type ValidGenGtInt16PointerStruct struct {
	Field *int16 `valid:"gt=32"`
}

type ValidatorGtInt16PointerStruct struct {
	Field *int16 `validate:"gt=32"`
}

type ValidGenGtInt32PointerStruct struct {
	Field *int32 `valid:"gt=32"`
}

type ValidatorGtInt32PointerStruct struct {
	Field *int32 `validate:"gt=32"`
}

type ValidGenGtInt64PointerStruct struct {
	Field *int64 `valid:"gt=32"`
}

type ValidatorGtInt64PointerStruct struct {
	Field *int64 `validate:"gt=32"`
}

type ValidGenGtUintPointerStruct struct {
	Field *uint `valid:"gt=32"`
}

type ValidatorGtUintPointerStruct struct {
	Field *uint `validate:"gt=32"`
}

type ValidGenGtUint8PointerStruct struct {
	Field *uint8 `valid:"gt=32"`
}

type ValidatorGtUint8PointerStruct struct {
	Field *uint8 `validate:"gt=32"`
}

type ValidGenGtUint16PointerStruct struct {
	Field *uint16 `valid:"gt=32"`
}

type ValidatorGtUint16PointerStruct struct {
	Field *uint16 `validate:"gt=32"`
}

type ValidGenGtUint32PointerStruct struct {
	Field *uint32 `valid:"gt=32"`
}

type ValidatorGtUint32PointerStruct struct {
	Field *uint32 `validate:"gt=32"`
}

type ValidGenGtUint64PointerStruct struct {
	Field *uint64 `valid:"gt=32"`
}

type ValidatorGtUint64PointerStruct struct {
	Field *uint64 `validate:"gt=32"`
}

type ValidGenGtFloat32PointerStruct struct {
	Field *float32 `valid:"gt=12.34"`
}

type ValidatorGtFloat32PointerStruct struct {
	Field *float32 `validate:"gt=12.34"`
}

type ValidGenGtFloat64PointerStruct struct {
	Field *float64 `valid:"gt=12.34"`
}

type ValidatorGtFloat64PointerStruct struct {
	Field *float64 `validate:"gt=12.34"`
}

type ValidGenGteIntPointerStruct struct {
	Field *int `valid:"gte=32"`
}

type ValidatorGteIntPointerStruct struct {
	Field *int `validate:"gte=32"`
}

type ValidGenGteInt8PointerStruct struct {
	Field *int8 `valid:"gte=32"`
}

type ValidatorGteInt8PointerStruct struct {
	Field *int8 `validate:"gte=32"`
}

type ValidGenGteInt16PointerStruct struct {
	Field *int16 `valid:"gte=32"`
}

type ValidatorGteInt16PointerStruct struct {
	Field *int16 `validate:"gte=32"`
}

type ValidGenGteInt32PointerStruct struct {
	Field *int32 `valid:"gte=32"`
}

type ValidatorGteInt32PointerStruct struct {
	Field *int32 `validate:"gte=32"`
}

type ValidGenGteInt64PointerStruct struct {
	Field *int64 `valid:"gte=32"`
}

type ValidatorGteInt64PointerStruct struct {
	Field *int64 `validate:"gte=32"`
}

type ValidGenGteUintPointerStruct struct {
	Field *uint `valid:"gte=32"`
}

type ValidatorGteUintPointerStruct struct {
	Field *uint `validate:"gte=32"`
}

type ValidGenGteUint8PointerStruct struct {
	Field *uint8 `valid:"gte=32"`
}

type ValidatorGteUint8PointerStruct struct {
	Field *uint8 `validate:"gte=32"`
}

type ValidGenGteUint16PointerStruct struct {
	Field *uint16 `valid:"gte=32"`
}

type ValidatorGteUint16PointerStruct struct {
	Field *uint16 `validate:"gte=32"`
}

type ValidGenGteUint32PointerStruct struct {
	Field *uint32 `valid:"gte=32"`
}

type ValidatorGteUint32PointerStruct struct {
	Field *uint32 `validate:"gte=32"`
}

type ValidGenGteUint64PointerStruct struct {
	Field *uint64 `valid:"gte=32"`
}

type ValidatorGteUint64PointerStruct struct {
	Field *uint64 `validate:"gte=32"`
}

type ValidGenGteFloat32PointerStruct struct {
	Field *float32 `valid:"gte=12.34"`
}

type ValidatorGteFloat32PointerStruct struct {
	Field *float32 `validate:"gte=12.34"`
}

type ValidGenGteFloat64PointerStruct struct {
	Field *float64 `valid:"gte=12.34"`
}

type ValidatorGteFloat64PointerStruct struct {
	Field *float64 `validate:"gte=12.34"`
}

type ValidGenLtIntPointerStruct struct {
	Field *int `valid:"lt=32"`
}

type ValidatorLtIntPointerStruct struct {
	Field *int `validate:"lt=32"`
}

type ValidGenLtInt8PointerStruct struct {
	Field *int8 `valid:"lt=32"`
}

type ValidatorLtInt8PointerStruct struct {
	Field *int8 `validate:"lt=32"`
}

type ValidGenLtInt16PointerStruct struct {
	Field *int16 `valid:"lt=32"`
}

type ValidatorLtInt16PointerStruct struct {
	Field *int16 `validate:"lt=32"`
}

type ValidGenLtInt32PointerStruct struct {
	Field *int32 `valid:"lt=32"`
}

type ValidatorLtInt32PointerStruct struct {
	Field *int32 `validate:"lt=32"`
}

type ValidGenLtInt64PointerStruct struct {
	Field *int64 `valid:"lt=32"`
}

type ValidatorLtInt64PointerStruct struct {
	Field *int64 `validate:"lt=32"`
}

type ValidGenLtUintPointerStruct struct {
	Field *uint `valid:"lt=32"`
}

type ValidatorLtUintPointerStruct struct {
	Field *uint `validate:"lt=32"`
}

type ValidGenLtUint8PointerStruct struct {
	Field *uint8 `valid:"lt=32"`
}

type ValidatorLtUint8PointerStruct struct {
	Field *uint8 `validate:"lt=32"`
}

type ValidGenLtUint16PointerStruct struct {
	Field *uint16 `valid:"lt=32"`
}

type ValidatorLtUint16PointerStruct struct {
	Field *uint16 `validate:"lt=32"`
}

type ValidGenLtUint32PointerStruct struct {
	Field *uint32 `valid:"lt=32"`
}

type ValidatorLtUint32PointerStruct struct {
	Field *uint32 `validate:"lt=32"`
}

type ValidGenLtUint64PointerStruct struct {
	Field *uint64 `valid:"lt=32"`
}

type ValidatorLtUint64PointerStruct struct {
	Field *uint64 `validate:"lt=32"`
}

type ValidGenLtFloat32PointerStruct struct {
	Field *float32 `valid:"lt=12.34"`
}

type ValidatorLtFloat32PointerStruct struct {
	Field *float32 `validate:"lt=12.34"`
}

type ValidGenLtFloat64PointerStruct struct {
	Field *float64 `valid:"lt=12.34"`
}

type ValidatorLtFloat64PointerStruct struct {
	Field *float64 `validate:"lt=12.34"`
}

type ValidGenLteIntPointerStruct struct {
	Field *int `valid:"lte=32"`
}

type ValidatorLteIntPointerStruct struct {
	Field *int `validate:"lte=32"`
}

type ValidGenLteInt8PointerStruct struct {
	Field *int8 `valid:"lte=32"`
}

type ValidatorLteInt8PointerStruct struct {
	Field *int8 `validate:"lte=32"`
}

type ValidGenLteInt16PointerStruct struct {
	Field *int16 `valid:"lte=32"`
}

type ValidatorLteInt16PointerStruct struct {
	Field *int16 `validate:"lte=32"`
}

type ValidGenLteInt32PointerStruct struct {
	Field *int32 `valid:"lte=32"`
}

type ValidatorLteInt32PointerStruct struct {
	Field *int32 `validate:"lte=32"`
}

type ValidGenLteInt64PointerStruct struct {
	Field *int64 `valid:"lte=32"`
}

type ValidatorLteInt64PointerStruct struct {
	Field *int64 `validate:"lte=32"`
}

type ValidGenLteUintPointerStruct struct {
	Field *uint `valid:"lte=32"`
}

type ValidatorLteUintPointerStruct struct {
	Field *uint `validate:"lte=32"`
}

type ValidGenLteUint8PointerStruct struct {
	Field *uint8 `valid:"lte=32"`
}

type ValidatorLteUint8PointerStruct struct {
	Field *uint8 `validate:"lte=32"`
}

type ValidGenLteUint16PointerStruct struct {
	Field *uint16 `valid:"lte=32"`
}

type ValidatorLteUint16PointerStruct struct {
	Field *uint16 `validate:"lte=32"`
}

type ValidGenLteUint32PointerStruct struct {
	Field *uint32 `valid:"lte=32"`
}

type ValidatorLteUint32PointerStruct struct {
	Field *uint32 `validate:"lte=32"`
}

type ValidGenLteUint64PointerStruct struct {
	Field *uint64 `valid:"lte=32"`
}

type ValidatorLteUint64PointerStruct struct {
	Field *uint64 `validate:"lte=32"`
}

type ValidGenLteFloat32PointerStruct struct {
	Field *float32 `valid:"lte=12.34"`
}

type ValidatorLteFloat32PointerStruct struct {
	Field *float32 `validate:"lte=12.34"`
}

type ValidGenLteFloat64PointerStruct struct {
	Field *float64 `valid:"lte=12.34"`
}

type ValidatorLteFloat64PointerStruct struct {
	Field *float64 `validate:"lte=12.34"`
}

type ValidGenMinStringPointerStruct struct {
	Field *string `valid:"min=5"`
}

type ValidatorMinStringPointerStruct struct {
	Field *string `validate:"min=5"`
}

type ValidGenMinStringSlicePointerStruct struct {
	Field *[]string `valid:"min=2"`
}

type ValidatorMinStringSlicePointerStruct struct {
	Field *[]string `validate:"min=2"`
}

type ValidGenMinIntSlicePointerStruct struct {
	Field *[]int `valid:"min=2"`
}

type ValidatorMinIntSlicePointerStruct struct {
	Field *[]int `validate:"min=2"`
}

type ValidGenMinInt8SlicePointerStruct struct {
	Field *[]int8 `valid:"min=2"`
}

type ValidatorMinInt8SlicePointerStruct struct {
	Field *[]int8 `validate:"min=2"`
}

type ValidGenMinInt16SlicePointerStruct struct {
	Field *[]int16 `valid:"min=2"`
}

type ValidatorMinInt16SlicePointerStruct struct {
	Field *[]int16 `validate:"min=2"`
}

type ValidGenMinInt32SlicePointerStruct struct {
	Field *[]int32 `valid:"min=2"`
}

type ValidatorMinInt32SlicePointerStruct struct {
	Field *[]int32 `validate:"min=2"`
}

type ValidGenMinInt64SlicePointerStruct struct {
	Field *[]int64 `valid:"min=2"`
}

type ValidatorMinInt64SlicePointerStruct struct {
	Field *[]int64 `validate:"min=2"`
}

type ValidGenMinUintSlicePointerStruct struct {
	Field *[]uint `valid:"min=2"`
}

type ValidatorMinUintSlicePointerStruct struct {
	Field *[]uint `validate:"min=2"`
}

type ValidGenMinUint8SlicePointerStruct struct {
	Field *[]uint8 `valid:"min=2"`
}

type ValidatorMinUint8SlicePointerStruct struct {
	Field *[]uint8 `validate:"min=2"`
}

type ValidGenMinUint16SlicePointerStruct struct {
	Field *[]uint16 `valid:"min=2"`
}

type ValidatorMinUint16SlicePointerStruct struct {
	Field *[]uint16 `validate:"min=2"`
}

type ValidGenMinUint32SlicePointerStruct struct {
	Field *[]uint32 `valid:"min=2"`
}

type ValidatorMinUint32SlicePointerStruct struct {
	Field *[]uint32 `validate:"min=2"`
}

type ValidGenMinUint64SlicePointerStruct struct {
	Field *[]uint64 `valid:"min=2"`
}

type ValidatorMinUint64SlicePointerStruct struct {
	Field *[]uint64 `validate:"min=2"`
}

type ValidGenMinFloat32SlicePointerStruct struct {
	Field *[]float32 `valid:"min=2"`
}

type ValidatorMinFloat32SlicePointerStruct struct {
	Field *[]float32 `validate:"min=2"`
}

type ValidGenMinFloat64SlicePointerStruct struct {
	Field *[]float64 `valid:"min=2"`
}

type ValidatorMinFloat64SlicePointerStruct struct {
	Field *[]float64 `validate:"min=2"`
}

type ValidGenMinBoolSlicePointerStruct struct {
	Field *[]bool `valid:"min=2"`
}

type ValidatorMinBoolSlicePointerStruct struct {
	Field *[]bool `validate:"min=2"`
}

type ValidGenMinStringMapPointerStruct struct {
	Field *map[string]string `valid:"min=2"`
}

type ValidatorMinStringMapPointerStruct struct {
	Field *map[string]string `validate:"min=2"`
}

type ValidGenMinIntMapPointerStruct struct {
	Field *map[int]int `valid:"min=2"`
}

type ValidatorMinIntMapPointerStruct struct {
	Field *map[int]int `validate:"min=2"`
}

type ValidGenMinInt8MapPointerStruct struct {
	Field *map[int8]int8 `valid:"min=2"`
}

type ValidatorMinInt8MapPointerStruct struct {
	Field *map[int8]int8 `validate:"min=2"`
}

type ValidGenMinInt16MapPointerStruct struct {
	Field *map[int16]int16 `valid:"min=2"`
}

type ValidatorMinInt16MapPointerStruct struct {
	Field *map[int16]int16 `validate:"min=2"`
}

type ValidGenMinInt32MapPointerStruct struct {
	Field *map[int32]int32 `valid:"min=2"`
}

type ValidatorMinInt32MapPointerStruct struct {
	Field *map[int32]int32 `validate:"min=2"`
}

type ValidGenMinInt64MapPointerStruct struct {
	Field *map[int64]int64 `valid:"min=2"`
}

type ValidatorMinInt64MapPointerStruct struct {
	Field *map[int64]int64 `validate:"min=2"`
}

type ValidGenMinUintMapPointerStruct struct {
	Field *map[uint]uint `valid:"min=2"`
}

type ValidatorMinUintMapPointerStruct struct {
	Field *map[uint]uint `validate:"min=2"`
}

type ValidGenMinUint8MapPointerStruct struct {
	Field *map[uint8]uint8 `valid:"min=2"`
}

type ValidatorMinUint8MapPointerStruct struct {
	Field *map[uint8]uint8 `validate:"min=2"`
}

type ValidGenMinUint16MapPointerStruct struct {
	Field *map[uint16]uint16 `valid:"min=2"`
}

type ValidatorMinUint16MapPointerStruct struct {
	Field *map[uint16]uint16 `validate:"min=2"`
}

type ValidGenMinUint32MapPointerStruct struct {
	Field *map[uint32]uint32 `valid:"min=2"`
}

type ValidatorMinUint32MapPointerStruct struct {
	Field *map[uint32]uint32 `validate:"min=2"`
}

type ValidGenMinUint64MapPointerStruct struct {
	Field *map[uint64]uint64 `valid:"min=2"`
}

type ValidatorMinUint64MapPointerStruct struct {
	Field *map[uint64]uint64 `validate:"min=2"`
}

type ValidGenMinFloat32MapPointerStruct struct {
	Field *map[float32]float32 `valid:"min=2"`
}

type ValidatorMinFloat32MapPointerStruct struct {
	Field *map[float32]float32 `validate:"min=2"`
}

type ValidGenMinFloat64MapPointerStruct struct {
	Field *map[float64]float64 `valid:"min=2"`
}

type ValidatorMinFloat64MapPointerStruct struct {
	Field *map[float64]float64 `validate:"min=2"`
}

type ValidGenMinBoolMapPointerStruct struct {
	Field *map[bool]bool `valid:"min=2"`
}

type ValidatorMinBoolMapPointerStruct struct {
	Field *map[bool]bool `validate:"min=2"`
}

type ValidGenMaxStringPointerStruct struct {
	Field *string `valid:"max=3"`
}

type ValidatorMaxStringPointerStruct struct {
	Field *string `validate:"max=3"`
}

type ValidGenMaxStringSlicePointerStruct struct {
	Field *[]string `valid:"max=2"`
}

type ValidatorMaxStringSlicePointerStruct struct {
	Field *[]string `validate:"max=2"`
}

type ValidGenMaxIntSlicePointerStruct struct {
	Field *[]int `valid:"max=2"`
}

type ValidatorMaxIntSlicePointerStruct struct {
	Field *[]int `validate:"max=2"`
}

type ValidGenMaxInt8SlicePointerStruct struct {
	Field *[]int8 `valid:"max=2"`
}

type ValidatorMaxInt8SlicePointerStruct struct {
	Field *[]int8 `validate:"max=2"`
}

type ValidGenMaxInt16SlicePointerStruct struct {
	Field *[]int16 `valid:"max=2"`
}

type ValidatorMaxInt16SlicePointerStruct struct {
	Field *[]int16 `validate:"max=2"`
}

type ValidGenMaxInt32SlicePointerStruct struct {
	Field *[]int32 `valid:"max=2"`
}

type ValidatorMaxInt32SlicePointerStruct struct {
	Field *[]int32 `validate:"max=2"`
}

type ValidGenMaxInt64SlicePointerStruct struct {
	Field *[]int64 `valid:"max=2"`
}

type ValidatorMaxInt64SlicePointerStruct struct {
	Field *[]int64 `validate:"max=2"`
}

type ValidGenMaxUintSlicePointerStruct struct {
	Field *[]uint `valid:"max=2"`
}

type ValidatorMaxUintSlicePointerStruct struct {
	Field *[]uint `validate:"max=2"`
}

type ValidGenMaxUint8SlicePointerStruct struct {
	Field *[]uint8 `valid:"max=2"`
}

type ValidatorMaxUint8SlicePointerStruct struct {
	Field *[]uint8 `validate:"max=2"`
}

type ValidGenMaxUint16SlicePointerStruct struct {
	Field *[]uint16 `valid:"max=2"`
}

type ValidatorMaxUint16SlicePointerStruct struct {
	Field *[]uint16 `validate:"max=2"`
}

type ValidGenMaxUint32SlicePointerStruct struct {
	Field *[]uint32 `valid:"max=2"`
}

type ValidatorMaxUint32SlicePointerStruct struct {
	Field *[]uint32 `validate:"max=2"`
}

type ValidGenMaxUint64SlicePointerStruct struct {
	Field *[]uint64 `valid:"max=2"`
}

type ValidatorMaxUint64SlicePointerStruct struct {
	Field *[]uint64 `validate:"max=2"`
}

type ValidGenMaxFloat32SlicePointerStruct struct {
	Field *[]float32 `valid:"max=2"`
}

type ValidatorMaxFloat32SlicePointerStruct struct {
	Field *[]float32 `validate:"max=2"`
}

type ValidGenMaxFloat64SlicePointerStruct struct {
	Field *[]float64 `valid:"max=2"`
}

type ValidatorMaxFloat64SlicePointerStruct struct {
	Field *[]float64 `validate:"max=2"`
}

type ValidGenMaxBoolSlicePointerStruct struct {
	Field *[]bool `valid:"max=2"`
}

type ValidatorMaxBoolSlicePointerStruct struct {
	Field *[]bool `validate:"max=2"`
}

type ValidGenMaxStringMapPointerStruct struct {
	Field *map[string]string `valid:"max=2"`
}

type ValidatorMaxStringMapPointerStruct struct {
	Field *map[string]string `validate:"max=2"`
}

type ValidGenMaxIntMapPointerStruct struct {
	Field *map[int]int `valid:"max=2"`
}

type ValidatorMaxIntMapPointerStruct struct {
	Field *map[int]int `validate:"max=2"`
}

type ValidGenMaxInt8MapPointerStruct struct {
	Field *map[int8]int8 `valid:"max=2"`
}

type ValidatorMaxInt8MapPointerStruct struct {
	Field *map[int8]int8 `validate:"max=2"`
}

type ValidGenMaxInt16MapPointerStruct struct {
	Field *map[int16]int16 `valid:"max=2"`
}

type ValidatorMaxInt16MapPointerStruct struct {
	Field *map[int16]int16 `validate:"max=2"`
}

type ValidGenMaxInt32MapPointerStruct struct {
	Field *map[int32]int32 `valid:"max=2"`
}

type ValidatorMaxInt32MapPointerStruct struct {
	Field *map[int32]int32 `validate:"max=2"`
}

type ValidGenMaxInt64MapPointerStruct struct {
	Field *map[int64]int64 `valid:"max=2"`
}

type ValidatorMaxInt64MapPointerStruct struct {
	Field *map[int64]int64 `validate:"max=2"`
}

type ValidGenMaxUintMapPointerStruct struct {
	Field *map[uint]uint `valid:"max=2"`
}

type ValidatorMaxUintMapPointerStruct struct {
	Field *map[uint]uint `validate:"max=2"`
}

type ValidGenMaxUint8MapPointerStruct struct {
	Field *map[uint8]uint8 `valid:"max=2"`
}

type ValidatorMaxUint8MapPointerStruct struct {
	Field *map[uint8]uint8 `validate:"max=2"`
}

type ValidGenMaxUint16MapPointerStruct struct {
	Field *map[uint16]uint16 `valid:"max=2"`
}

type ValidatorMaxUint16MapPointerStruct struct {
	Field *map[uint16]uint16 `validate:"max=2"`
}

type ValidGenMaxUint32MapPointerStruct struct {
	Field *map[uint32]uint32 `valid:"max=2"`
}

type ValidatorMaxUint32MapPointerStruct struct {
	Field *map[uint32]uint32 `validate:"max=2"`
}

type ValidGenMaxUint64MapPointerStruct struct {
	Field *map[uint64]uint64 `valid:"max=2"`
}

type ValidatorMaxUint64MapPointerStruct struct {
	Field *map[uint64]uint64 `validate:"max=2"`
}

type ValidGenMaxFloat32MapPointerStruct struct {
	Field *map[float32]float32 `valid:"max=2"`
}

type ValidatorMaxFloat32MapPointerStruct struct {
	Field *map[float32]float32 `validate:"max=2"`
}

type ValidGenMaxFloat64MapPointerStruct struct {
	Field *map[float64]float64 `valid:"max=2"`
}

type ValidatorMaxFloat64MapPointerStruct struct {
	Field *map[float64]float64 `validate:"max=2"`
}

type ValidGenMaxBoolMapPointerStruct struct {
	Field *map[bool]bool `valid:"max=1"`
}

type ValidatorMaxBoolMapPointerStruct struct {
	Field *map[bool]bool `validate:"max=1"`
}

type ValidGenEq_ignore_caseStringPointerStruct struct {
	Field *string `valid:"eq_ignore_case=abcde"`
}

type ValidatorEq_ignore_caseStringPointerStruct struct {
	Field *string `validate:"eq_ignore_case=abcde"`
}

type ValidGenNeq_ignore_caseStringPointerStruct struct {
	Field *string `valid:"neq_ignore_case=abcde"`
}

type ValidatorNeq_ignore_caseStringPointerStruct struct {
	Field *string `validate:"ne_ignore_case=abcde"`
}

type ValidGenLenStringPointerStruct struct {
	Field *string `valid:"len=2"`
}

type ValidatorLenStringPointerStruct struct {
	Field *string `validate:"len=2"`
}

type ValidGenLenStringSlicePointerStruct struct {
	Field *[]string `valid:"len=2"`
}

type ValidatorLenStringSlicePointerStruct struct {
	Field *[]string `validate:"len=2"`
}

type ValidGenLenIntSlicePointerStruct struct {
	Field *[]int `valid:"len=2"`
}

type ValidatorLenIntSlicePointerStruct struct {
	Field *[]int `validate:"len=2"`
}

type ValidGenLenInt8SlicePointerStruct struct {
	Field *[]int8 `valid:"len=2"`
}

type ValidatorLenInt8SlicePointerStruct struct {
	Field *[]int8 `validate:"len=2"`
}

type ValidGenLenInt16SlicePointerStruct struct {
	Field *[]int16 `valid:"len=2"`
}

type ValidatorLenInt16SlicePointerStruct struct {
	Field *[]int16 `validate:"len=2"`
}

type ValidGenLenInt32SlicePointerStruct struct {
	Field *[]int32 `valid:"len=2"`
}

type ValidatorLenInt32SlicePointerStruct struct {
	Field *[]int32 `validate:"len=2"`
}

type ValidGenLenInt64SlicePointerStruct struct {
	Field *[]int64 `valid:"len=2"`
}

type ValidatorLenInt64SlicePointerStruct struct {
	Field *[]int64 `validate:"len=2"`
}

type ValidGenLenUintSlicePointerStruct struct {
	Field *[]uint `valid:"len=2"`
}

type ValidatorLenUintSlicePointerStruct struct {
	Field *[]uint `validate:"len=2"`
}

type ValidGenLenUint8SlicePointerStruct struct {
	Field *[]uint8 `valid:"len=2"`
}

type ValidatorLenUint8SlicePointerStruct struct {
	Field *[]uint8 `validate:"len=2"`
}

type ValidGenLenUint16SlicePointerStruct struct {
	Field *[]uint16 `valid:"len=2"`
}

type ValidatorLenUint16SlicePointerStruct struct {
	Field *[]uint16 `validate:"len=2"`
}

type ValidGenLenUint32SlicePointerStruct struct {
	Field *[]uint32 `valid:"len=2"`
}

type ValidatorLenUint32SlicePointerStruct struct {
	Field *[]uint32 `validate:"len=2"`
}

type ValidGenLenUint64SlicePointerStruct struct {
	Field *[]uint64 `valid:"len=2"`
}

type ValidatorLenUint64SlicePointerStruct struct {
	Field *[]uint64 `validate:"len=2"`
}

type ValidGenLenFloat32SlicePointerStruct struct {
	Field *[]float32 `valid:"len=2"`
}

type ValidatorLenFloat32SlicePointerStruct struct {
	Field *[]float32 `validate:"len=2"`
}

type ValidGenLenFloat64SlicePointerStruct struct {
	Field *[]float64 `valid:"len=2"`
}

type ValidatorLenFloat64SlicePointerStruct struct {
	Field *[]float64 `validate:"len=2"`
}

type ValidGenLenBoolSlicePointerStruct struct {
	Field *[]bool `valid:"len=2"`
}

type ValidatorLenBoolSlicePointerStruct struct {
	Field *[]bool `validate:"len=2"`
}

type ValidGenLenStringMapPointerStruct struct {
	Field *map[string]string `valid:"len=2"`
}

type ValidatorLenStringMapPointerStruct struct {
	Field *map[string]string `validate:"len=2"`
}

type ValidGenLenIntMapPointerStruct struct {
	Field *map[int]int `valid:"len=2"`
}

type ValidatorLenIntMapPointerStruct struct {
	Field *map[int]int `validate:"len=2"`
}

type ValidGenLenInt8MapPointerStruct struct {
	Field *map[int8]int8 `valid:"len=2"`
}

type ValidatorLenInt8MapPointerStruct struct {
	Field *map[int8]int8 `validate:"len=2"`
}

type ValidGenLenInt16MapPointerStruct struct {
	Field *map[int16]int16 `valid:"len=2"`
}

type ValidatorLenInt16MapPointerStruct struct {
	Field *map[int16]int16 `validate:"len=2"`
}

type ValidGenLenInt32MapPointerStruct struct {
	Field *map[int32]int32 `valid:"len=2"`
}

type ValidatorLenInt32MapPointerStruct struct {
	Field *map[int32]int32 `validate:"len=2"`
}

type ValidGenLenInt64MapPointerStruct struct {
	Field *map[int64]int64 `valid:"len=2"`
}

type ValidatorLenInt64MapPointerStruct struct {
	Field *map[int64]int64 `validate:"len=2"`
}

type ValidGenLenUintMapPointerStruct struct {
	Field *map[uint]uint `valid:"len=2"`
}

type ValidatorLenUintMapPointerStruct struct {
	Field *map[uint]uint `validate:"len=2"`
}

type ValidGenLenUint8MapPointerStruct struct {
	Field *map[uint8]uint8 `valid:"len=2"`
}

type ValidatorLenUint8MapPointerStruct struct {
	Field *map[uint8]uint8 `validate:"len=2"`
}

type ValidGenLenUint16MapPointerStruct struct {
	Field *map[uint16]uint16 `valid:"len=2"`
}

type ValidatorLenUint16MapPointerStruct struct {
	Field *map[uint16]uint16 `validate:"len=2"`
}

type ValidGenLenUint32MapPointerStruct struct {
	Field *map[uint32]uint32 `valid:"len=2"`
}

type ValidatorLenUint32MapPointerStruct struct {
	Field *map[uint32]uint32 `validate:"len=2"`
}

type ValidGenLenUint64MapPointerStruct struct {
	Field *map[uint64]uint64 `valid:"len=2"`
}

type ValidatorLenUint64MapPointerStruct struct {
	Field *map[uint64]uint64 `validate:"len=2"`
}

type ValidGenLenFloat32MapPointerStruct struct {
	Field *map[float32]float32 `valid:"len=2"`
}

type ValidatorLenFloat32MapPointerStruct struct {
	Field *map[float32]float32 `validate:"len=2"`
}

type ValidGenLenFloat64MapPointerStruct struct {
	Field *map[float64]float64 `valid:"len=2"`
}

type ValidatorLenFloat64MapPointerStruct struct {
	Field *map[float64]float64 `validate:"len=2"`
}

type ValidGenLenBoolMapPointerStruct struct {
	Field *map[bool]bool `valid:"len=2"`
}

type ValidatorLenBoolMapPointerStruct struct {
	Field *map[bool]bool `validate:"len=2"`
}

type ValidGenInStringPointerStruct struct {
	Field *string `valid:"in=ab cd ef"`
}

type ValidatorInStringPointerStruct struct {
	Field *string `validate:"oneof=ab cd ef"`
}

type ValidGenInIntPointerStruct struct {
	Field *int `valid:"in=12 34 56"`
}

type ValidatorInIntPointerStruct struct {
	Field *int `validate:"oneof=12 34 56"`
}

type ValidGenInInt8PointerStruct struct {
	Field *int8 `valid:"in=12 34 56"`
}

type ValidatorInInt8PointerStruct struct {
	Field *int8 `validate:"oneof=12 34 56"`
}

type ValidGenInInt16PointerStruct struct {
	Field *int16 `valid:"in=12 34 56"`
}

type ValidatorInInt16PointerStruct struct {
	Field *int16 `validate:"oneof=12 34 56"`
}

type ValidGenInInt32PointerStruct struct {
	Field *int32 `valid:"in=12 34 56"`
}

type ValidatorInInt32PointerStruct struct {
	Field *int32 `validate:"oneof=12 34 56"`
}

type ValidGenInInt64PointerStruct struct {
	Field *int64 `valid:"in=12 34 56"`
}

type ValidatorInInt64PointerStruct struct {
	Field *int64 `validate:"oneof=12 34 56"`
}

type ValidGenInUintPointerStruct struct {
	Field *uint `valid:"in=12 34 56"`
}

type ValidatorInUintPointerStruct struct {
	Field *uint `validate:"oneof=12 34 56"`
}

type ValidGenInUint8PointerStruct struct {
	Field *uint8 `valid:"in=12 34 56"`
}

type ValidatorInUint8PointerStruct struct {
	Field *uint8 `validate:"oneof=12 34 56"`
}

type ValidGenInUint16PointerStruct struct {
	Field *uint16 `valid:"in=12 34 56"`
}

type ValidatorInUint16PointerStruct struct {
	Field *uint16 `validate:"oneof=12 34 56"`
}

type ValidGenInUint32PointerStruct struct {
	Field *uint32 `valid:"in=12 34 56"`
}

type ValidatorInUint32PointerStruct struct {
	Field *uint32 `validate:"oneof=12 34 56"`
}

type ValidGenInUint64PointerStruct struct {
	Field *uint64 `valid:"in=12 34 56"`
}

type ValidatorInUint64PointerStruct struct {
	Field *uint64 `validate:"oneof=12 34 56"`
}

func BenchmarkValidGenEmailStringPointer(b *testing.B) {
	var validInput string = "abcde@example.com"
	data := &ValidGenEmailStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEmailStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEmailStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "abcde@example.com"

	data := &ValidatorEmailStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredStringPointer(b *testing.B) {
	var validInput string = "abcde"
	data := &ValidGenRequiredStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "abcde"

	data := &ValidatorRequiredStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredIntPointer(b *testing.B) {
	var validInput int = 32
	data := &ValidGenRequiredIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredIntPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredIntPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int = 32

	data := &ValidatorRequiredIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt8Pointer(b *testing.B) {
	var validInput int8 = 32
	data := &ValidGenRequiredInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int8 = 32

	data := &ValidatorRequiredInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt16Pointer(b *testing.B) {
	var validInput int16 = 32
	data := &ValidGenRequiredInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int16 = 32

	data := &ValidatorRequiredInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt32Pointer(b *testing.B) {
	var validInput int32 = 32
	data := &ValidGenRequiredInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int32 = 32

	data := &ValidatorRequiredInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt64Pointer(b *testing.B) {
	var validInput int64 = 32
	data := &ValidGenRequiredInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int64 = 32

	data := &ValidatorRequiredInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUintPointer(b *testing.B) {
	var validInput uint = 32
	data := &ValidGenRequiredUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUintPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUintPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint = 32

	data := &ValidatorRequiredUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint8Pointer(b *testing.B) {
	var validInput uint8 = 32
	data := &ValidGenRequiredUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint8 = 32

	data := &ValidatorRequiredUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint16Pointer(b *testing.B) {
	var validInput uint16 = 32
	data := &ValidGenRequiredUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint16 = 32

	data := &ValidatorRequiredUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint32Pointer(b *testing.B) {
	var validInput uint32 = 32
	data := &ValidGenRequiredUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint32 = 32

	data := &ValidatorRequiredUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint64Pointer(b *testing.B) {
	var validInput uint64 = 32
	data := &ValidGenRequiredUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint64 = 32

	data := &ValidatorRequiredUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredFloat32Pointer(b *testing.B) {
	var validInput float32 = 12.34
	data := &ValidGenRequiredFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredFloat32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredFloat32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float32 = 12.34

	data := &ValidatorRequiredFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredFloat64Pointer(b *testing.B) {
	var validInput float64 = 12.34
	data := &ValidGenRequiredFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredFloat64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredFloat64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float64 = 12.34

	data := &ValidatorRequiredFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredBoolPointer(b *testing.B) {
	var validInput bool = true
	data := &ValidGenRequiredBoolPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredBoolPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredBoolPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput bool = true

	data := &ValidatorRequiredBoolPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredStringSlicePointer(b *testing.B) {
	var validInput []string = []string{"abcde"}
	data := &ValidGenRequiredStringSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredStringSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredStringSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []string = []string{"abcde"}

	data := &ValidatorRequiredStringSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredIntSlicePointer(b *testing.B) {
	var validInput []int = []int{32}
	data := &ValidGenRequiredIntSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredIntSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredIntSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int = []int{32}

	data := &ValidatorRequiredIntSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt8SlicePointer(b *testing.B) {
	var validInput []int8 = []int8{32}
	data := &ValidGenRequiredInt8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt8SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt8SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int8 = []int8{32}

	data := &ValidatorRequiredInt8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt16SlicePointer(b *testing.B) {
	var validInput []int16 = []int16{32}
	data := &ValidGenRequiredInt16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt16SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt16SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int16 = []int16{32}

	data := &ValidatorRequiredInt16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt32SlicePointer(b *testing.B) {
	var validInput []int32 = []int32{32}
	data := &ValidGenRequiredInt32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int32 = []int32{32}

	data := &ValidatorRequiredInt32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt64SlicePointer(b *testing.B) {
	var validInput []int64 = []int64{32}
	data := &ValidGenRequiredInt64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int64 = []int64{32}

	data := &ValidatorRequiredInt64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUintSlicePointer(b *testing.B) {
	var validInput []uint = []uint{32}
	data := &ValidGenRequiredUintSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUintSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUintSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint = []uint{32}

	data := &ValidatorRequiredUintSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint8SlicePointer(b *testing.B) {
	var validInput []uint8 = []uint8{32}
	data := &ValidGenRequiredUint8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint8SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint8SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint8 = []uint8{32}

	data := &ValidatorRequiredUint8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint16SlicePointer(b *testing.B) {
	var validInput []uint16 = []uint16{32}
	data := &ValidGenRequiredUint16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint16SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint16SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint16 = []uint16{32}

	data := &ValidatorRequiredUint16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint32SlicePointer(b *testing.B) {
	var validInput []uint32 = []uint32{32}
	data := &ValidGenRequiredUint32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint32 = []uint32{32}

	data := &ValidatorRequiredUint32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint64SlicePointer(b *testing.B) {
	var validInput []uint64 = []uint64{32}
	data := &ValidGenRequiredUint64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint64 = []uint64{32}

	data := &ValidatorRequiredUint64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredFloat32SlicePointer(b *testing.B) {
	var validInput []float32 = []float32{12.34}
	data := &ValidGenRequiredFloat32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredFloat32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredFloat32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []float32 = []float32{12.34}

	data := &ValidatorRequiredFloat32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredFloat64SlicePointer(b *testing.B) {
	var validInput []float64 = []float64{12.34}
	data := &ValidGenRequiredFloat64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredFloat64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredFloat64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []float64 = []float64{12.34}

	data := &ValidatorRequiredFloat64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredBoolSlicePointer(b *testing.B) {
	var validInput []bool = []bool{true}
	data := &ValidGenRequiredBoolSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredBoolSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredBoolSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []bool = []bool{true}

	data := &ValidatorRequiredBoolSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredStringArrayPointer(b *testing.B) {
	var validInput [3]string = [3]string{"abcde"}
	data := &ValidGenRequiredStringArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredStringArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredStringArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]string = [3]string{"abcde"}

	data := &ValidatorRequiredStringArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredIntArrayPointer(b *testing.B) {
	var validInput [3]int = [3]int{32}
	data := &ValidGenRequiredIntArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredIntArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredIntArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]int = [3]int{32}

	data := &ValidatorRequiredIntArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt8ArrayPointer(b *testing.B) {
	var validInput [3]int8 = [3]int8{32}
	data := &ValidGenRequiredInt8ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt8ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt8ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]int8 = [3]int8{32}

	data := &ValidatorRequiredInt8ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt16ArrayPointer(b *testing.B) {
	var validInput [3]int16 = [3]int16{32}
	data := &ValidGenRequiredInt16ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt16ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt16ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]int16 = [3]int16{32}

	data := &ValidatorRequiredInt16ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt32ArrayPointer(b *testing.B) {
	var validInput [3]int32 = [3]int32{32}
	data := &ValidGenRequiredInt32ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt32ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt32ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]int32 = [3]int32{32}

	data := &ValidatorRequiredInt32ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt64ArrayPointer(b *testing.B) {
	var validInput [3]int64 = [3]int64{32}
	data := &ValidGenRequiredInt64ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt64ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt64ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]int64 = [3]int64{32}

	data := &ValidatorRequiredInt64ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUintArrayPointer(b *testing.B) {
	var validInput [3]uint = [3]uint{32}
	data := &ValidGenRequiredUintArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUintArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUintArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]uint = [3]uint{32}

	data := &ValidatorRequiredUintArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint8ArrayPointer(b *testing.B) {
	var validInput [3]uint8 = [3]uint8{32}
	data := &ValidGenRequiredUint8ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint8ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint8ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]uint8 = [3]uint8{32}

	data := &ValidatorRequiredUint8ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint16ArrayPointer(b *testing.B) {
	var validInput [3]uint16 = [3]uint16{32}
	data := &ValidGenRequiredUint16ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint16ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint16ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]uint16 = [3]uint16{32}

	data := &ValidatorRequiredUint16ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint32ArrayPointer(b *testing.B) {
	var validInput [3]uint32 = [3]uint32{32}
	data := &ValidGenRequiredUint32ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint32ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint32ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]uint32 = [3]uint32{32}

	data := &ValidatorRequiredUint32ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint64ArrayPointer(b *testing.B) {
	var validInput [3]uint64 = [3]uint64{32}
	data := &ValidGenRequiredUint64ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint64ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint64ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]uint64 = [3]uint64{32}

	data := &ValidatorRequiredUint64ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredFloat32ArrayPointer(b *testing.B) {
	var validInput [3]float32 = [3]float32{12.34}
	data := &ValidGenRequiredFloat32ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredFloat32ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredFloat32ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]float32 = [3]float32{12.34}

	data := &ValidatorRequiredFloat32ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredFloat64ArrayPointer(b *testing.B) {
	var validInput [3]float64 = [3]float64{12.34}
	data := &ValidGenRequiredFloat64ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredFloat64ArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredFloat64ArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]float64 = [3]float64{12.34}

	data := &ValidatorRequiredFloat64ArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredBoolArrayPointer(b *testing.B) {
	var validInput [3]bool = [3]bool{true}
	data := &ValidGenRequiredBoolArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredBoolArrayPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredBoolArrayPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput [3]bool = [3]bool{true}

	data := &ValidatorRequiredBoolArrayPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredStringMapPointer(b *testing.B) {
	var validInput map[string]string = map[string]string{"abcde": "value"}
	data := &ValidGenRequiredStringMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredStringMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredStringMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[string]string = map[string]string{"abcde": "value"}

	data := &ValidatorRequiredStringMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredIntMapPointer(b *testing.B) {
	var validInput map[int]int = map[int]int{32: 64}
	data := &ValidGenRequiredIntMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredIntMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredIntMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int]int = map[int]int{32: 64}

	data := &ValidatorRequiredIntMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt8MapPointer(b *testing.B) {
	var validInput map[int8]int8 = map[int8]int8{32: 64}
	data := &ValidGenRequiredInt8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt8MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt8MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int8]int8 = map[int8]int8{32: 64}

	data := &ValidatorRequiredInt8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt16MapPointer(b *testing.B) {
	var validInput map[int16]int16 = map[int16]int16{32: 64}
	data := &ValidGenRequiredInt16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt16MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt16MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int16]int16 = map[int16]int16{32: 64}

	data := &ValidatorRequiredInt16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt32MapPointer(b *testing.B) {
	var validInput map[int32]int32 = map[int32]int32{32: 64}
	data := &ValidGenRequiredInt32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int32]int32 = map[int32]int32{32: 64}

	data := &ValidatorRequiredInt32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredInt64MapPointer(b *testing.B) {
	var validInput map[int64]int64 = map[int64]int64{32: 64}
	data := &ValidGenRequiredInt64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredInt64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredInt64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int64]int64 = map[int64]int64{32: 64}

	data := &ValidatorRequiredInt64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUintMapPointer(b *testing.B) {
	var validInput map[uint]uint = map[uint]uint{32: 64}
	data := &ValidGenRequiredUintMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUintMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUintMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint]uint = map[uint]uint{32: 64}

	data := &ValidatorRequiredUintMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint8MapPointer(b *testing.B) {
	var validInput map[uint8]uint8 = map[uint8]uint8{32: 64}
	data := &ValidGenRequiredUint8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint8MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint8MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint8]uint8 = map[uint8]uint8{32: 64}

	data := &ValidatorRequiredUint8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint16MapPointer(b *testing.B) {
	var validInput map[uint16]uint16 = map[uint16]uint16{32: 64}
	data := &ValidGenRequiredUint16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint16MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint16MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint16]uint16 = map[uint16]uint16{32: 64}

	data := &ValidatorRequiredUint16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint32MapPointer(b *testing.B) {
	var validInput map[uint32]uint32 = map[uint32]uint32{32: 64}
	data := &ValidGenRequiredUint32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint32]uint32 = map[uint32]uint32{32: 64}

	data := &ValidatorRequiredUint32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredUint64MapPointer(b *testing.B) {
	var validInput map[uint64]uint64 = map[uint64]uint64{32: 64}
	data := &ValidGenRequiredUint64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredUint64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredUint64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint64]uint64 = map[uint64]uint64{32: 64}

	data := &ValidatorRequiredUint64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredFloat32MapPointer(b *testing.B) {
	var validInput map[float32]float32 = map[float32]float32{12.34: 56.78}
	data := &ValidGenRequiredFloat32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredFloat32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredFloat32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[float32]float32 = map[float32]float32{12.34: 56.78}

	data := &ValidatorRequiredFloat32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredFloat64MapPointer(b *testing.B) {
	var validInput map[float64]float64 = map[float64]float64{12.34: 56.78}
	data := &ValidGenRequiredFloat64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredFloat64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredFloat64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[float64]float64 = map[float64]float64{12.34: 56.78}

	data := &ValidatorRequiredFloat64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenRequiredBoolMapPointer(b *testing.B) {
	var validInput map[bool]bool = map[bool]bool{true: true}
	data := &ValidGenRequiredBoolMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenRequiredBoolMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorRequiredBoolMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[bool]bool = map[bool]bool{true: true}

	data := &ValidatorRequiredBoolMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqStringPointer(b *testing.B) {
	var validInput string = "abcde"
	data := &ValidGenEqStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "abcde"

	data := &ValidatorEqStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqIntPointer(b *testing.B) {
	var validInput int = 32
	data := &ValidGenEqIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqIntPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqIntPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int = 32

	data := &ValidatorEqIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqInt8Pointer(b *testing.B) {
	var validInput int8 = 32
	data := &ValidGenEqInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqInt8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqInt8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int8 = 32

	data := &ValidatorEqInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqInt16Pointer(b *testing.B) {
	var validInput int16 = 32
	data := &ValidGenEqInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqInt16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqInt16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int16 = 32

	data := &ValidatorEqInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqInt32Pointer(b *testing.B) {
	var validInput int32 = 32
	data := &ValidGenEqInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqInt32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqInt32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int32 = 32

	data := &ValidatorEqInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqInt64Pointer(b *testing.B) {
	var validInput int64 = 32
	data := &ValidGenEqInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqInt64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqInt64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int64 = 32

	data := &ValidatorEqInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqUintPointer(b *testing.B) {
	var validInput uint = 32
	data := &ValidGenEqUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqUintPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqUintPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint = 32

	data := &ValidatorEqUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqUint8Pointer(b *testing.B) {
	var validInput uint8 = 32
	data := &ValidGenEqUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqUint8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqUint8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint8 = 32

	data := &ValidatorEqUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqUint16Pointer(b *testing.B) {
	var validInput uint16 = 32
	data := &ValidGenEqUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqUint16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqUint16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint16 = 32

	data := &ValidatorEqUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqUint32Pointer(b *testing.B) {
	var validInput uint32 = 32
	data := &ValidGenEqUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqUint32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqUint32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint32 = 32

	data := &ValidatorEqUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqUint64Pointer(b *testing.B) {
	var validInput uint64 = 32
	data := &ValidGenEqUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqUint64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqUint64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint64 = 32

	data := &ValidatorEqUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqFloat32Pointer(b *testing.B) {
	var validInput float32 = 12.34
	data := &ValidGenEqFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqFloat32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqFloat32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float32 = 12.34

	data := &ValidatorEqFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqFloat64Pointer(b *testing.B) {
	var validInput float64 = 12.34
	data := &ValidGenEqFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqFloat64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqFloat64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float64 = 12.34

	data := &ValidatorEqFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEqBoolPointer(b *testing.B) {
	var validInput bool = true
	data := &ValidGenEqBoolPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEqBoolPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEqBoolPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput bool = true

	data := &ValidatorEqBoolPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqStringPointer(b *testing.B) {
	var validInput string = "fghij"
	data := &ValidGenNeqStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "fghij"

	data := &ValidatorNeqStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqIntPointer(b *testing.B) {
	var validInput int = 64
	data := &ValidGenNeqIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqIntPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqIntPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int = 64

	data := &ValidatorNeqIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqInt8Pointer(b *testing.B) {
	var validInput int8 = 64
	data := &ValidGenNeqInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqInt8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqInt8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int8 = 64

	data := &ValidatorNeqInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqInt16Pointer(b *testing.B) {
	var validInput int16 = 64
	data := &ValidGenNeqInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqInt16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqInt16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int16 = 64

	data := &ValidatorNeqInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqInt32Pointer(b *testing.B) {
	var validInput int32 = 64
	data := &ValidGenNeqInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqInt32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqInt32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int32 = 64

	data := &ValidatorNeqInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqInt64Pointer(b *testing.B) {
	var validInput int64 = 64
	data := &ValidGenNeqInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqInt64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqInt64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int64 = 64

	data := &ValidatorNeqInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqUintPointer(b *testing.B) {
	var validInput uint = 64
	data := &ValidGenNeqUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqUintPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqUintPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint = 64

	data := &ValidatorNeqUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqUint8Pointer(b *testing.B) {
	var validInput uint8 = 64
	data := &ValidGenNeqUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqUint8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqUint8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint8 = 64

	data := &ValidatorNeqUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqUint16Pointer(b *testing.B) {
	var validInput uint16 = 64
	data := &ValidGenNeqUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqUint16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqUint16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint16 = 64

	data := &ValidatorNeqUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqUint32Pointer(b *testing.B) {
	var validInput uint32 = 64
	data := &ValidGenNeqUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqUint32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqUint32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint32 = 64

	data := &ValidatorNeqUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqUint64Pointer(b *testing.B) {
	var validInput uint64 = 64
	data := &ValidGenNeqUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqUint64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqUint64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint64 = 64

	data := &ValidatorNeqUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqFloat32Pointer(b *testing.B) {
	var validInput float32 = 34.56
	data := &ValidGenNeqFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqFloat32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqFloat32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float32 = 34.56

	data := &ValidatorNeqFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqFloat64Pointer(b *testing.B) {
	var validInput float64 = 34.56
	data := &ValidGenNeqFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqFloat64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqFloat64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float64 = 34.56

	data := &ValidatorNeqFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeqBoolPointer(b *testing.B) {
	var validInput bool = false
	data := &ValidGenNeqBoolPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeqBoolPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeqBoolPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput bool = false

	data := &ValidatorNeqBoolPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtIntPointer(b *testing.B) {
	var validInput int = 33
	data := &ValidGenGtIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtIntPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtIntPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int = 33

	data := &ValidatorGtIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtInt8Pointer(b *testing.B) {
	var validInput int8 = 33
	data := &ValidGenGtInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtInt8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtInt8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int8 = 33

	data := &ValidatorGtInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtInt16Pointer(b *testing.B) {
	var validInput int16 = 33
	data := &ValidGenGtInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtInt16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtInt16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int16 = 33

	data := &ValidatorGtInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtInt32Pointer(b *testing.B) {
	var validInput int32 = 33
	data := &ValidGenGtInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtInt32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtInt32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int32 = 33

	data := &ValidatorGtInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtInt64Pointer(b *testing.B) {
	var validInput int64 = 33
	data := &ValidGenGtInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtInt64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtInt64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int64 = 33

	data := &ValidatorGtInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtUintPointer(b *testing.B) {
	var validInput uint = 33
	data := &ValidGenGtUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtUintPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtUintPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint = 33

	data := &ValidatorGtUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtUint8Pointer(b *testing.B) {
	var validInput uint8 = 33
	data := &ValidGenGtUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtUint8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtUint8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint8 = 33

	data := &ValidatorGtUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtUint16Pointer(b *testing.B) {
	var validInput uint16 = 33
	data := &ValidGenGtUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtUint16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtUint16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint16 = 33

	data := &ValidatorGtUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtUint32Pointer(b *testing.B) {
	var validInput uint32 = 33
	data := &ValidGenGtUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtUint32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtUint32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint32 = 33

	data := &ValidatorGtUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtUint64Pointer(b *testing.B) {
	var validInput uint64 = 33
	data := &ValidGenGtUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtUint64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtUint64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint64 = 33

	data := &ValidatorGtUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtFloat32Pointer(b *testing.B) {
	var validInput float32 = 12.35
	data := &ValidGenGtFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtFloat32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtFloat32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float32 = 12.35

	data := &ValidatorGtFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGtFloat64Pointer(b *testing.B) {
	var validInput float64 = 12.35
	data := &ValidGenGtFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGtFloat64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGtFloat64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float64 = 12.35

	data := &ValidatorGtFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteIntPointer(b *testing.B) {
	var validInput int = 32
	data := &ValidGenGteIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteIntPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteIntPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int = 32

	data := &ValidatorGteIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteInt8Pointer(b *testing.B) {
	var validInput int8 = 32
	data := &ValidGenGteInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteInt8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteInt8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int8 = 32

	data := &ValidatorGteInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteInt16Pointer(b *testing.B) {
	var validInput int16 = 32
	data := &ValidGenGteInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteInt16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteInt16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int16 = 32

	data := &ValidatorGteInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteInt32Pointer(b *testing.B) {
	var validInput int32 = 32
	data := &ValidGenGteInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteInt32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteInt32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int32 = 32

	data := &ValidatorGteInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteInt64Pointer(b *testing.B) {
	var validInput int64 = 32
	data := &ValidGenGteInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteInt64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteInt64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int64 = 32

	data := &ValidatorGteInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteUintPointer(b *testing.B) {
	var validInput uint = 32
	data := &ValidGenGteUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteUintPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteUintPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint = 32

	data := &ValidatorGteUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteUint8Pointer(b *testing.B) {
	var validInput uint8 = 32
	data := &ValidGenGteUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteUint8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteUint8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint8 = 32

	data := &ValidatorGteUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteUint16Pointer(b *testing.B) {
	var validInput uint16 = 32
	data := &ValidGenGteUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteUint16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteUint16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint16 = 32

	data := &ValidatorGteUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteUint32Pointer(b *testing.B) {
	var validInput uint32 = 32
	data := &ValidGenGteUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteUint32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteUint32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint32 = 32

	data := &ValidatorGteUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteUint64Pointer(b *testing.B) {
	var validInput uint64 = 32
	data := &ValidGenGteUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteUint64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteUint64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint64 = 32

	data := &ValidatorGteUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteFloat32Pointer(b *testing.B) {
	var validInput float32 = 12.34
	data := &ValidGenGteFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteFloat32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteFloat32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float32 = 12.34

	data := &ValidatorGteFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenGteFloat64Pointer(b *testing.B) {
	var validInput float64 = 12.34
	data := &ValidGenGteFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenGteFloat64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorGteFloat64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float64 = 12.34

	data := &ValidatorGteFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtIntPointer(b *testing.B) {
	var validInput int = 31
	data := &ValidGenLtIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtIntPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtIntPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int = 31

	data := &ValidatorLtIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtInt8Pointer(b *testing.B) {
	var validInput int8 = 31
	data := &ValidGenLtInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtInt8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtInt8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int8 = 31

	data := &ValidatorLtInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtInt16Pointer(b *testing.B) {
	var validInput int16 = 31
	data := &ValidGenLtInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtInt16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtInt16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int16 = 31

	data := &ValidatorLtInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtInt32Pointer(b *testing.B) {
	var validInput int32 = 31
	data := &ValidGenLtInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtInt32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtInt32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int32 = 31

	data := &ValidatorLtInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtInt64Pointer(b *testing.B) {
	var validInput int64 = 31
	data := &ValidGenLtInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtInt64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtInt64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int64 = 31

	data := &ValidatorLtInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtUintPointer(b *testing.B) {
	var validInput uint = 31
	data := &ValidGenLtUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtUintPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtUintPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint = 31

	data := &ValidatorLtUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtUint8Pointer(b *testing.B) {
	var validInput uint8 = 31
	data := &ValidGenLtUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtUint8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtUint8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint8 = 31

	data := &ValidatorLtUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtUint16Pointer(b *testing.B) {
	var validInput uint16 = 31
	data := &ValidGenLtUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtUint16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtUint16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint16 = 31

	data := &ValidatorLtUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtUint32Pointer(b *testing.B) {
	var validInput uint32 = 31
	data := &ValidGenLtUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtUint32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtUint32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint32 = 31

	data := &ValidatorLtUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtUint64Pointer(b *testing.B) {
	var validInput uint64 = 31
	data := &ValidGenLtUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtUint64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtUint64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint64 = 31

	data := &ValidatorLtUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtFloat32Pointer(b *testing.B) {
	var validInput float32 = 12.33
	data := &ValidGenLtFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtFloat32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtFloat32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float32 = 12.33

	data := &ValidatorLtFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLtFloat64Pointer(b *testing.B) {
	var validInput float64 = 12.33
	data := &ValidGenLtFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLtFloat64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLtFloat64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float64 = 12.33

	data := &ValidatorLtFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteIntPointer(b *testing.B) {
	var validInput int = 32
	data := &ValidGenLteIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteIntPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteIntPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int = 32

	data := &ValidatorLteIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteInt8Pointer(b *testing.B) {
	var validInput int8 = 32
	data := &ValidGenLteInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteInt8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteInt8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int8 = 32

	data := &ValidatorLteInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteInt16Pointer(b *testing.B) {
	var validInput int16 = 32
	data := &ValidGenLteInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteInt16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteInt16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int16 = 32

	data := &ValidatorLteInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteInt32Pointer(b *testing.B) {
	var validInput int32 = 32
	data := &ValidGenLteInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteInt32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteInt32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int32 = 32

	data := &ValidatorLteInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteInt64Pointer(b *testing.B) {
	var validInput int64 = 32
	data := &ValidGenLteInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteInt64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteInt64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int64 = 32

	data := &ValidatorLteInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteUintPointer(b *testing.B) {
	var validInput uint = 32
	data := &ValidGenLteUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteUintPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteUintPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint = 32

	data := &ValidatorLteUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteUint8Pointer(b *testing.B) {
	var validInput uint8 = 32
	data := &ValidGenLteUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteUint8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteUint8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint8 = 32

	data := &ValidatorLteUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteUint16Pointer(b *testing.B) {
	var validInput uint16 = 32
	data := &ValidGenLteUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteUint16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteUint16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint16 = 32

	data := &ValidatorLteUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteUint32Pointer(b *testing.B) {
	var validInput uint32 = 32
	data := &ValidGenLteUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteUint32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteUint32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint32 = 32

	data := &ValidatorLteUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteUint64Pointer(b *testing.B) {
	var validInput uint64 = 32
	data := &ValidGenLteUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteUint64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteUint64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint64 = 32

	data := &ValidatorLteUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteFloat32Pointer(b *testing.B) {
	var validInput float32 = 12.34
	data := &ValidGenLteFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteFloat32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteFloat32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float32 = 12.34

	data := &ValidatorLteFloat32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLteFloat64Pointer(b *testing.B) {
	var validInput float64 = 12.34
	data := &ValidGenLteFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLteFloat64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLteFloat64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput float64 = 12.34

	data := &ValidatorLteFloat64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinStringPointer(b *testing.B) {
	var validInput string = "abcde"
	data := &ValidGenMinStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "abcde"

	data := &ValidatorMinStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinStringSlicePointer(b *testing.B) {
	var validInput []string = []string{"abc", "def"}
	data := &ValidGenMinStringSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinStringSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinStringSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []string = []string{"abc", "def"}

	data := &ValidatorMinStringSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinIntSlicePointer(b *testing.B) {
	var validInput []int = []int{65, 67}
	data := &ValidGenMinIntSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinIntSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinIntSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int = []int{65, 67}

	data := &ValidatorMinIntSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinInt8SlicePointer(b *testing.B) {
	var validInput []int8 = []int8{65, 67}
	data := &ValidGenMinInt8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinInt8SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinInt8SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int8 = []int8{65, 67}

	data := &ValidatorMinInt8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinInt16SlicePointer(b *testing.B) {
	var validInput []int16 = []int16{65, 67}
	data := &ValidGenMinInt16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinInt16SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinInt16SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int16 = []int16{65, 67}

	data := &ValidatorMinInt16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinInt32SlicePointer(b *testing.B) {
	var validInput []int32 = []int32{65, 67}
	data := &ValidGenMinInt32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinInt32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinInt32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int32 = []int32{65, 67}

	data := &ValidatorMinInt32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinInt64SlicePointer(b *testing.B) {
	var validInput []int64 = []int64{65, 67}
	data := &ValidGenMinInt64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinInt64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinInt64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int64 = []int64{65, 67}

	data := &ValidatorMinInt64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUintSlicePointer(b *testing.B) {
	var validInput []uint = []uint{65, 67}
	data := &ValidGenMinUintSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUintSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUintSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint = []uint{65, 67}

	data := &ValidatorMinUintSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUint8SlicePointer(b *testing.B) {
	var validInput []uint8 = []uint8{65, 67}
	data := &ValidGenMinUint8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUint8SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUint8SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint8 = []uint8{65, 67}

	data := &ValidatorMinUint8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUint16SlicePointer(b *testing.B) {
	var validInput []uint16 = []uint16{65, 67}
	data := &ValidGenMinUint16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUint16SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUint16SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint16 = []uint16{65, 67}

	data := &ValidatorMinUint16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUint32SlicePointer(b *testing.B) {
	var validInput []uint32 = []uint32{65, 67}
	data := &ValidGenMinUint32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUint32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUint32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint32 = []uint32{65, 67}

	data := &ValidatorMinUint32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUint64SlicePointer(b *testing.B) {
	var validInput []uint64 = []uint64{65, 67}
	data := &ValidGenMinUint64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUint64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUint64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint64 = []uint64{65, 67}

	data := &ValidatorMinUint64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinFloat32SlicePointer(b *testing.B) {
	var validInput []float32 = []float32{65.65, 67.67}
	data := &ValidGenMinFloat32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinFloat32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinFloat32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []float32 = []float32{65.65, 67.67}

	data := &ValidatorMinFloat32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinFloat64SlicePointer(b *testing.B) {
	var validInput []float64 = []float64{65.65, 67.67}
	data := &ValidGenMinFloat64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinFloat64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinFloat64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []float64 = []float64{65.65, 67.67}

	data := &ValidatorMinFloat64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinBoolSlicePointer(b *testing.B) {
	var validInput []bool = []bool{true, false}
	data := &ValidGenMinBoolSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinBoolSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinBoolSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []bool = []bool{true, false}

	data := &ValidatorMinBoolSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinStringMapPointer(b *testing.B) {
	var validInput map[string]string = map[string]string{"a": "1", "b": "2"}
	data := &ValidGenMinStringMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinStringMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinStringMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[string]string = map[string]string{"a": "1", "b": "2"}

	data := &ValidatorMinStringMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinIntMapPointer(b *testing.B) {
	var validInput map[int]int = map[int]int{1: 65, 2: 67}
	data := &ValidGenMinIntMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinIntMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinIntMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int]int = map[int]int{1: 65, 2: 67}

	data := &ValidatorMinIntMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinInt8MapPointer(b *testing.B) {
	var validInput map[int8]int8 = map[int8]int8{1: 65, 2: 67}
	data := &ValidGenMinInt8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinInt8MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinInt8MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int8]int8 = map[int8]int8{1: 65, 2: 67}

	data := &ValidatorMinInt8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinInt16MapPointer(b *testing.B) {
	var validInput map[int16]int16 = map[int16]int16{1: 65, 2: 67}
	data := &ValidGenMinInt16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinInt16MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinInt16MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int16]int16 = map[int16]int16{1: 65, 2: 67}

	data := &ValidatorMinInt16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinInt32MapPointer(b *testing.B) {
	var validInput map[int32]int32 = map[int32]int32{1: 65, 2: 67}
	data := &ValidGenMinInt32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinInt32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinInt32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int32]int32 = map[int32]int32{1: 65, 2: 67}

	data := &ValidatorMinInt32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinInt64MapPointer(b *testing.B) {
	var validInput map[int64]int64 = map[int64]int64{1: 65, 2: 67}
	data := &ValidGenMinInt64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinInt64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinInt64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int64]int64 = map[int64]int64{1: 65, 2: 67}

	data := &ValidatorMinInt64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUintMapPointer(b *testing.B) {
	var validInput map[uint]uint = map[uint]uint{1: 65, 2: 67}
	data := &ValidGenMinUintMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUintMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUintMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint]uint = map[uint]uint{1: 65, 2: 67}

	data := &ValidatorMinUintMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUint8MapPointer(b *testing.B) {
	var validInput map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67}
	data := &ValidGenMinUint8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUint8MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUint8MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67}

	data := &ValidatorMinUint8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUint16MapPointer(b *testing.B) {
	var validInput map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67}
	data := &ValidGenMinUint16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUint16MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUint16MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67}

	data := &ValidatorMinUint16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUint32MapPointer(b *testing.B) {
	var validInput map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67}
	data := &ValidGenMinUint32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUint32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUint32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67}

	data := &ValidatorMinUint32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinUint64MapPointer(b *testing.B) {
	var validInput map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67}
	data := &ValidGenMinUint64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinUint64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinUint64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67}

	data := &ValidatorMinUint64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinFloat32MapPointer(b *testing.B) {
	var validInput map[float32]float32 = map[float32]float32{1: 65.65, 2: 67.67}
	data := &ValidGenMinFloat32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinFloat32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinFloat32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[float32]float32 = map[float32]float32{1: 65.65, 2: 67.67}

	data := &ValidatorMinFloat32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinFloat64MapPointer(b *testing.B) {
	var validInput map[float64]float64 = map[float64]float64{1: 65.65, 2: 67.67}
	data := &ValidGenMinFloat64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinFloat64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinFloat64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[float64]float64 = map[float64]float64{1: 65.65, 2: 67.67}

	data := &ValidatorMinFloat64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMinBoolMapPointer(b *testing.B) {
	var validInput map[bool]bool = map[bool]bool{true: true, false: false}
	data := &ValidGenMinBoolMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMinBoolMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMinBoolMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[bool]bool = map[bool]bool{true: true, false: false}

	data := &ValidatorMinBoolMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxStringPointer(b *testing.B) {
	var validInput string = "abc"
	data := &ValidGenMaxStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "abc"

	data := &ValidatorMaxStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxStringSlicePointer(b *testing.B) {
	var validInput []string = []string{"abc", "def"}
	data := &ValidGenMaxStringSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxStringSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxStringSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []string = []string{"abc", "def"}

	data := &ValidatorMaxStringSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxIntSlicePointer(b *testing.B) {
	var validInput []int = []int{65, 67}
	data := &ValidGenMaxIntSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxIntSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxIntSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int = []int{65, 67}

	data := &ValidatorMaxIntSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxInt8SlicePointer(b *testing.B) {
	var validInput []int8 = []int8{65, 67}
	data := &ValidGenMaxInt8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxInt8SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxInt8SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int8 = []int8{65, 67}

	data := &ValidatorMaxInt8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxInt16SlicePointer(b *testing.B) {
	var validInput []int16 = []int16{65, 67}
	data := &ValidGenMaxInt16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxInt16SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxInt16SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int16 = []int16{65, 67}

	data := &ValidatorMaxInt16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxInt32SlicePointer(b *testing.B) {
	var validInput []int32 = []int32{65, 67}
	data := &ValidGenMaxInt32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxInt32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxInt32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int32 = []int32{65, 67}

	data := &ValidatorMaxInt32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxInt64SlicePointer(b *testing.B) {
	var validInput []int64 = []int64{65, 67}
	data := &ValidGenMaxInt64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxInt64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxInt64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int64 = []int64{65, 67}

	data := &ValidatorMaxInt64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUintSlicePointer(b *testing.B) {
	var validInput []uint = []uint{65, 67}
	data := &ValidGenMaxUintSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUintSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUintSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint = []uint{65, 67}

	data := &ValidatorMaxUintSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUint8SlicePointer(b *testing.B) {
	var validInput []uint8 = []uint8{65, 67}
	data := &ValidGenMaxUint8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUint8SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUint8SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint8 = []uint8{65, 67}

	data := &ValidatorMaxUint8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUint16SlicePointer(b *testing.B) {
	var validInput []uint16 = []uint16{65, 67}
	data := &ValidGenMaxUint16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUint16SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUint16SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint16 = []uint16{65, 67}

	data := &ValidatorMaxUint16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUint32SlicePointer(b *testing.B) {
	var validInput []uint32 = []uint32{65, 67}
	data := &ValidGenMaxUint32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUint32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUint32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint32 = []uint32{65, 67}

	data := &ValidatorMaxUint32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUint64SlicePointer(b *testing.B) {
	var validInput []uint64 = []uint64{65, 67}
	data := &ValidGenMaxUint64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUint64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUint64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint64 = []uint64{65, 67}

	data := &ValidatorMaxUint64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxFloat32SlicePointer(b *testing.B) {
	var validInput []float32 = []float32{65.65, 67.67}
	data := &ValidGenMaxFloat32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxFloat32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxFloat32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []float32 = []float32{65.65, 67.67}

	data := &ValidatorMaxFloat32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxFloat64SlicePointer(b *testing.B) {
	var validInput []float64 = []float64{65.65, 67.67}
	data := &ValidGenMaxFloat64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxFloat64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxFloat64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []float64 = []float64{65.65, 67.67}

	data := &ValidatorMaxFloat64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxBoolSlicePointer(b *testing.B) {
	var validInput []bool = []bool{true, false}
	data := &ValidGenMaxBoolSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxBoolSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxBoolSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []bool = []bool{true, false}

	data := &ValidatorMaxBoolSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxStringMapPointer(b *testing.B) {
	var validInput map[string]string = map[string]string{"a": "1", "b": "2"}
	data := &ValidGenMaxStringMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxStringMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxStringMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[string]string = map[string]string{"a": "1", "b": "2"}

	data := &ValidatorMaxStringMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxIntMapPointer(b *testing.B) {
	var validInput map[int]int = map[int]int{1: 65, 2: 67}
	data := &ValidGenMaxIntMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxIntMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxIntMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int]int = map[int]int{1: 65, 2: 67}

	data := &ValidatorMaxIntMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxInt8MapPointer(b *testing.B) {
	var validInput map[int8]int8 = map[int8]int8{1: 65, 2: 67}
	data := &ValidGenMaxInt8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxInt8MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxInt8MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int8]int8 = map[int8]int8{1: 65, 2: 67}

	data := &ValidatorMaxInt8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxInt16MapPointer(b *testing.B) {
	var validInput map[int16]int16 = map[int16]int16{1: 65, 2: 67}
	data := &ValidGenMaxInt16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxInt16MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxInt16MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int16]int16 = map[int16]int16{1: 65, 2: 67}

	data := &ValidatorMaxInt16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxInt32MapPointer(b *testing.B) {
	var validInput map[int32]int32 = map[int32]int32{1: 65, 2: 67}
	data := &ValidGenMaxInt32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxInt32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxInt32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int32]int32 = map[int32]int32{1: 65, 2: 67}

	data := &ValidatorMaxInt32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxInt64MapPointer(b *testing.B) {
	var validInput map[int64]int64 = map[int64]int64{1: 65, 2: 67}
	data := &ValidGenMaxInt64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxInt64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxInt64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int64]int64 = map[int64]int64{1: 65, 2: 67}

	data := &ValidatorMaxInt64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUintMapPointer(b *testing.B) {
	var validInput map[uint]uint = map[uint]uint{1: 65, 2: 67}
	data := &ValidGenMaxUintMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUintMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUintMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint]uint = map[uint]uint{1: 65, 2: 67}

	data := &ValidatorMaxUintMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUint8MapPointer(b *testing.B) {
	var validInput map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67}
	data := &ValidGenMaxUint8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUint8MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUint8MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67}

	data := &ValidatorMaxUint8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUint16MapPointer(b *testing.B) {
	var validInput map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67}
	data := &ValidGenMaxUint16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUint16MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUint16MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67}

	data := &ValidatorMaxUint16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUint32MapPointer(b *testing.B) {
	var validInput map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67}
	data := &ValidGenMaxUint32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUint32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUint32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67}

	data := &ValidatorMaxUint32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxUint64MapPointer(b *testing.B) {
	var validInput map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67}
	data := &ValidGenMaxUint64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxUint64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxUint64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67}

	data := &ValidatorMaxUint64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxFloat32MapPointer(b *testing.B) {
	var validInput map[float32]float32 = map[float32]float32{1: 65.65, 2: 67.67}
	data := &ValidGenMaxFloat32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxFloat32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxFloat32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[float32]float32 = map[float32]float32{1: 65.65, 2: 67.67}

	data := &ValidatorMaxFloat32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxFloat64MapPointer(b *testing.B) {
	var validInput map[float64]float64 = map[float64]float64{1: 65.65, 2: 67.67}
	data := &ValidGenMaxFloat64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxFloat64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxFloat64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[float64]float64 = map[float64]float64{1: 65.65, 2: 67.67}

	data := &ValidatorMaxFloat64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenMaxBoolMapPointer(b *testing.B) {
	var validInput map[bool]bool = map[bool]bool{true: true}
	data := &ValidGenMaxBoolMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenMaxBoolMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorMaxBoolMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[bool]bool = map[bool]bool{true: true}

	data := &ValidatorMaxBoolMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenEq_ignore_caseStringPointer(b *testing.B) {
	var validInput string = "AbCdE"
	data := &ValidGenEq_ignore_caseStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenEq_ignore_caseStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorEq_ignore_caseStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "AbCdE"

	data := &ValidatorEq_ignore_caseStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenNeq_ignore_caseStringPointer(b *testing.B) {
	var validInput string = "a1b2c3"
	data := &ValidGenNeq_ignore_caseStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenNeq_ignore_caseStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorNeq_ignore_caseStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "a1b2c3"

	data := &ValidatorNeq_ignore_caseStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenStringPointer(b *testing.B) {
	var validInput string = "ab"
	data := &ValidGenLenStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "ab"

	data := &ValidatorLenStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenStringSlicePointer(b *testing.B) {
	var validInput []string = []string{"abc", "def"}
	data := &ValidGenLenStringSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenStringSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenStringSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []string = []string{"abc", "def"}

	data := &ValidatorLenStringSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenIntSlicePointer(b *testing.B) {
	var validInput []int = []int{65, 67}
	data := &ValidGenLenIntSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenIntSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenIntSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int = []int{65, 67}

	data := &ValidatorLenIntSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenInt8SlicePointer(b *testing.B) {
	var validInput []int8 = []int8{65, 67}
	data := &ValidGenLenInt8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenInt8SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenInt8SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int8 = []int8{65, 67}

	data := &ValidatorLenInt8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenInt16SlicePointer(b *testing.B) {
	var validInput []int16 = []int16{65, 67}
	data := &ValidGenLenInt16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenInt16SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenInt16SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int16 = []int16{65, 67}

	data := &ValidatorLenInt16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenInt32SlicePointer(b *testing.B) {
	var validInput []int32 = []int32{65, 67}
	data := &ValidGenLenInt32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenInt32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenInt32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int32 = []int32{65, 67}

	data := &ValidatorLenInt32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenInt64SlicePointer(b *testing.B) {
	var validInput []int64 = []int64{65, 67}
	data := &ValidGenLenInt64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenInt64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenInt64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []int64 = []int64{65, 67}

	data := &ValidatorLenInt64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUintSlicePointer(b *testing.B) {
	var validInput []uint = []uint{65, 67}
	data := &ValidGenLenUintSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUintSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUintSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint = []uint{65, 67}

	data := &ValidatorLenUintSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUint8SlicePointer(b *testing.B) {
	var validInput []uint8 = []uint8{65, 67}
	data := &ValidGenLenUint8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUint8SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUint8SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint8 = []uint8{65, 67}

	data := &ValidatorLenUint8SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUint16SlicePointer(b *testing.B) {
	var validInput []uint16 = []uint16{65, 67}
	data := &ValidGenLenUint16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUint16SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUint16SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint16 = []uint16{65, 67}

	data := &ValidatorLenUint16SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUint32SlicePointer(b *testing.B) {
	var validInput []uint32 = []uint32{65, 67}
	data := &ValidGenLenUint32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUint32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUint32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint32 = []uint32{65, 67}

	data := &ValidatorLenUint32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUint64SlicePointer(b *testing.B) {
	var validInput []uint64 = []uint64{65, 67}
	data := &ValidGenLenUint64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUint64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUint64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []uint64 = []uint64{65, 67}

	data := &ValidatorLenUint64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenFloat32SlicePointer(b *testing.B) {
	var validInput []float32 = []float32{65.65, 67.67}
	data := &ValidGenLenFloat32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenFloat32SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenFloat32SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []float32 = []float32{65.65, 67.67}

	data := &ValidatorLenFloat32SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenFloat64SlicePointer(b *testing.B) {
	var validInput []float64 = []float64{65.65, 67.67}
	data := &ValidGenLenFloat64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenFloat64SlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenFloat64SlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []float64 = []float64{65.65, 67.67}

	data := &ValidatorLenFloat64SlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenBoolSlicePointer(b *testing.B) {
	var validInput []bool = []bool{true, false}
	data := &ValidGenLenBoolSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenBoolSlicePointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenBoolSlicePointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput []bool = []bool{true, false}

	data := &ValidatorLenBoolSlicePointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenStringMapPointer(b *testing.B) {
	var validInput map[string]string = map[string]string{"a": "1", "b": "2"}
	data := &ValidGenLenStringMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenStringMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenStringMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[string]string = map[string]string{"a": "1", "b": "2"}

	data := &ValidatorLenStringMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenIntMapPointer(b *testing.B) {
	var validInput map[int]int = map[int]int{1: 65, 2: 67}
	data := &ValidGenLenIntMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenIntMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenIntMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int]int = map[int]int{1: 65, 2: 67}

	data := &ValidatorLenIntMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenInt8MapPointer(b *testing.B) {
	var validInput map[int8]int8 = map[int8]int8{1: 65, 2: 67}
	data := &ValidGenLenInt8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenInt8MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenInt8MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int8]int8 = map[int8]int8{1: 65, 2: 67}

	data := &ValidatorLenInt8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenInt16MapPointer(b *testing.B) {
	var validInput map[int16]int16 = map[int16]int16{1: 65, 2: 67}
	data := &ValidGenLenInt16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenInt16MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenInt16MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int16]int16 = map[int16]int16{1: 65, 2: 67}

	data := &ValidatorLenInt16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenInt32MapPointer(b *testing.B) {
	var validInput map[int32]int32 = map[int32]int32{1: 65, 2: 67}
	data := &ValidGenLenInt32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenInt32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenInt32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int32]int32 = map[int32]int32{1: 65, 2: 67}

	data := &ValidatorLenInt32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenInt64MapPointer(b *testing.B) {
	var validInput map[int64]int64 = map[int64]int64{1: 65, 2: 67}
	data := &ValidGenLenInt64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenInt64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenInt64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[int64]int64 = map[int64]int64{1: 65, 2: 67}

	data := &ValidatorLenInt64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUintMapPointer(b *testing.B) {
	var validInput map[uint]uint = map[uint]uint{1: 65, 2: 67}
	data := &ValidGenLenUintMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUintMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUintMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint]uint = map[uint]uint{1: 65, 2: 67}

	data := &ValidatorLenUintMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUint8MapPointer(b *testing.B) {
	var validInput map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67}
	data := &ValidGenLenUint8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUint8MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUint8MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint8]uint8 = map[uint8]uint8{1: 65, 2: 67}

	data := &ValidatorLenUint8MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUint16MapPointer(b *testing.B) {
	var validInput map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67}
	data := &ValidGenLenUint16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUint16MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUint16MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint16]uint16 = map[uint16]uint16{1: 65, 2: 67}

	data := &ValidatorLenUint16MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUint32MapPointer(b *testing.B) {
	var validInput map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67}
	data := &ValidGenLenUint32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUint32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUint32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint32]uint32 = map[uint32]uint32{1: 65, 2: 67}

	data := &ValidatorLenUint32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenUint64MapPointer(b *testing.B) {
	var validInput map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67}
	data := &ValidGenLenUint64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenUint64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenUint64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[uint64]uint64 = map[uint64]uint64{1: 65, 2: 67}

	data := &ValidatorLenUint64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenFloat32MapPointer(b *testing.B) {
	var validInput map[float32]float32 = map[float32]float32{1: 65.65, 2: 67.67}
	data := &ValidGenLenFloat32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenFloat32MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenFloat32MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[float32]float32 = map[float32]float32{1: 65.65, 2: 67.67}

	data := &ValidatorLenFloat32MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenFloat64MapPointer(b *testing.B) {
	var validInput map[float64]float64 = map[float64]float64{1: 65.65, 2: 67.67}
	data := &ValidGenLenFloat64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenFloat64MapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenFloat64MapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[float64]float64 = map[float64]float64{1: 65.65, 2: 67.67}

	data := &ValidatorLenFloat64MapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenLenBoolMapPointer(b *testing.B) {
	var validInput map[bool]bool = map[bool]bool{true: true, false: false}
	data := &ValidGenLenBoolMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenLenBoolMapPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorLenBoolMapPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput map[bool]bool = map[bool]bool{true: true, false: false}

	data := &ValidatorLenBoolMapPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInStringPointer(b *testing.B) {
	var validInput string = "cd"
	data := &ValidGenInStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInStringPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInStringPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput string = "cd"

	data := &ValidatorInStringPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInIntPointer(b *testing.B) {
	var validInput int = 34
	data := &ValidGenInIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInIntPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInIntPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int = 34

	data := &ValidatorInIntPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInInt8Pointer(b *testing.B) {
	var validInput int8 = 34
	data := &ValidGenInInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInInt8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInInt8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int8 = 34

	data := &ValidatorInInt8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInInt16Pointer(b *testing.B) {
	var validInput int16 = 34
	data := &ValidGenInInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInInt16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInInt16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int16 = 34

	data := &ValidatorInInt16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInInt32Pointer(b *testing.B) {
	var validInput int32 = 34
	data := &ValidGenInInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInInt32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInInt32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int32 = 34

	data := &ValidatorInInt32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInInt64Pointer(b *testing.B) {
	var validInput int64 = 34
	data := &ValidGenInInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInInt64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInInt64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput int64 = 34

	data := &ValidatorInInt64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInUintPointer(b *testing.B) {
	var validInput uint = 34
	data := &ValidGenInUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInUintPointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInUintPointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint = 34

	data := &ValidatorInUintPointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInUint8Pointer(b *testing.B) {
	var validInput uint8 = 34
	data := &ValidGenInUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInUint8PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInUint8Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint8 = 34

	data := &ValidatorInUint8PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInUint16Pointer(b *testing.B) {
	var validInput uint16 = 34
	data := &ValidGenInUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInUint16PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInUint16Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint16 = 34

	data := &ValidatorInUint16PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInUint32Pointer(b *testing.B) {
	var validInput uint32 = 34
	data := &ValidGenInUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInUint32PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInUint32Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint32 = 34

	data := &ValidatorInUint32PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenInUint64Pointer(b *testing.B) {
	var validInput uint64 = 34
	data := &ValidGenInUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := ValidGenInUint64PointerStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorInUint64Pointer(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())

	var validInput uint64 = 34

	data := &ValidatorInUint64PointerStruct{
		Field: &validInput,
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}
