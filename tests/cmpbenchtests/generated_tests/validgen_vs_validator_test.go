// Code generated by BenchTestGenerator. DO NOT EDIT.

package benchtests

import (
	"testing"

	"github.com/go-playground/validator/v10"
)

func BenchmarkValidGenStringRequired(b *testing.B) {
	data := &ValidGenStringRequiredStruct{
		Field: "xpto",
	}

	for b.Loop() {
		if err := ValidGenStringRequiredStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringRequired(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringRequiredStruct{
		Field: "xpto",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenStringEq(b *testing.B) {
	data := &ValidGenStringEqStruct{
		Field: "abc",
	}

	for b.Loop() {
		if err := ValidGenStringEqStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringEq(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringEqStruct{
		Field: "abc",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenStringEqIC(b *testing.B) {
	data := &ValidGenStringEqICStruct{
		Field: "AbC",
	}

	for b.Loop() {
		if err := ValidGenStringEqICStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringEqIC(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringEqICStruct{
		Field: "AbC",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenStringNeq(b *testing.B) {
	data := &ValidGenStringNeqStruct{
		Field: "123",
	}

	for b.Loop() {
		if err := ValidGenStringNeqStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringNeq(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringNeqStruct{
		Field: "123",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenStringNeqIC(b *testing.B) {
	data := &ValidGenStringNeqICStruct{
		Field: "123",
	}

	for b.Loop() {
		if err := ValidGenStringNeqICStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringNeqIC(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringNeqICStruct{
		Field: "123",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenStringLen(b *testing.B) {
	data := &ValidGenStringLenStruct{
		Field: "abcde",
	}

	for b.Loop() {
		if err := ValidGenStringLenStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringLen(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringLenStruct{
		Field: "abcde",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenStringMax(b *testing.B) {
	data := &ValidGenStringMaxStruct{
		Field: "abcde",
	}

	for b.Loop() {
		if err := ValidGenStringMaxStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringMax(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringMaxStruct{
		Field: "abcde",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenStringMin(b *testing.B) {
	data := &ValidGenStringMinStruct{
		Field: "abcd",
	}

	for b.Loop() {
		if err := ValidGenStringMinStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringMin(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringMinStruct{
		Field: "abcd",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenStringIn(b *testing.B) {
	data := &ValidGenStringInStruct{
		Field: "ef",
	}

	for b.Loop() {
		if err := ValidGenStringInStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringIn(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringInStruct{
		Field: "ef",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}

func BenchmarkValidGenStringEmail(b *testing.B) {
	data := &ValidGenStringEmailStruct{
		Field: "aaa@example.com",
	}

	for b.Loop() {
		if err := ValidGenStringEmailStructValidate(data); len(err) > 0 {
			b.FailNow()
		}
	}
}

func BenchmarkValidatorStringEmail(b *testing.B) {
	var validate *validator.Validate

	validate = validator.New(validator.WithRequiredStructEnabled())
	data := &ValidatorStringEmailStruct{
		Field: "aaa@example.com",
	}

	for b.Loop() {
		if err := validate.Struct(data); err != nil {
			b.FailNow()
		}
	}
}
